cscope 15 /work/prj/teclong/src/drv/s3c_mfc10               0000256607
	@bootmem.c

1 
	#LOG_TAG
 "boŸmem.c"

	)

2 
	~"oßl.h
"

9 
	~<asm/£tup.h
>

10 
	~"medü.h
"

12 
	#MEMSIZE_FIMC
 15360

	)

13 
	#MEMSIZE_POST
 8192

	)

14 
	#MEMSIZE_TV
 8192

	)

15 
	#MEMSIZE_MFC
 6144

	)

16 
	#MEMSIZE_JPEG
 8192

	)

17 
	#MEMSIZE_CMM
 8192

	)

19 
s3c_medü_devi˚
 
	gs3c_mdevs
[
S3C_MDEV_MAX
] = {

21 .
id
 = 
S3C_MDEV_FIMC
,

22 .
	g«me
 = "fimc",

24 #ifde‡
MEMSIZE_FIMC


25 .
	gmemsize
 = 
MEMSIZE_FIMC
 * 
SZ_1K
,

27 .
	gmemsize
 = 0,

29 .
	g∑ddr
 = 0,

33 .
	gid
 = 
S3C_MDEV_POST
,

34 .
	g«me
 = "pp",

36 #ifde‡
MEMSIZE_POST


37 .
	gmemsize
 = 
MEMSIZE_POST
 * 
SZ_1K
,

39 .
	gmemsize
 = 0,

41 .
	g∑ddr
 = 0,

45 .
	gid
 = 
S3C_MDEV_TV
,

46 .
	g«me
 = "tv",

48 #ifde‡
MEMSIZE_TV


49 .
	gmemsize
 = 
MEMSIZE_TV
 * 
SZ_1K
,

51 .
	gmemsize
 = 0,

53 .
	g∑ddr
 = 0,

57 .
	gid
 = 
S3C_MDEV_MFC
,

58 .
	g«me
 = "mfc",

60 #ifde‡
MEMSIZE_MFC


61 .
	gmemsize
 = 
MEMSIZE_MFC
 * 
SZ_1K
,

63 .
	gmemsize
 = 0,

65 .
	g∑ddr
 = 0,

69 .
	gid
 = 
S3C_MDEV_JPEG
,

70 .
	g«me
 = "jpeg",

72 #ifde‡
MEMSIZE_JPEG


73 .
	gmemsize
 = 
MEMSIZE_JPEG
 * 
SZ_1K
,

75 .
	gmemsize
 = 0,

77 .
	g∑ddr
 = 0,

81 .
	gid
 = 
S3C_MDEV_CMM
,

82 .
	g«me
 = "cmm",

84 #ifde‡
MEMSIZE_CMM


85 .
	gmemsize
 = 
MEMSIZE_CMM
 * 
SZ_1K
,

87 .
	gmemsize
 = 0,

89 .
	g∑ddr
 = 0,

92 
s3c_medü_devi˚
 *
	$s3c_gë_medü_devi˚
(
dev_id
)

93 { 
	`__D
("\n");

94 
s3c_medü_devi˚
 *
mdev
 = 
NULL
;

95 
i
;

97 i‡(
dev_id
 < 0 || dev_id >
S3C_MDEV_MAX
)

98  
NULL
;

100 
i
 = 0; i < 
	`ARRAY_SIZE
(
s3c_mdevs
); i++) {

101 
mdev
 = &
s3c_mdevs
[
i
];

102 if(
mdev
->
id
 =
dev_id
) {

103 
mdev
->
∑ddr
 = 
	`__∑
(
	`__gë_‰ì_∑ges
(
GFP_KERNEL
, 
	`gë_‹dî
(mdev->
memsize
)));

104 i‡(
mdev
->
∑ddr
 =
NULL
) {

105 
	`__D
("__pa(__get_free_pages(GFP_KERNEL, get_order(mdev->memsize)))Érror\n");

111 if(
i
 =
	`ARRAY_SIZE
(
s3c_mdevs
))

112 
mdev
 = 
NULL
;

114  
mdev
;

115 
	}
}

118 
dma_addr_t
 
	$s3c_gë_medü_mem‹y
(
dev_id
)

119 { 
	`__D
("\n");

120 
s3c_medü_devi˚
 *
mdev
;

122 
mdev
 = 
	`s3c_gë_medü_devi˚
(
dev_id
);

123 i‡(!
mdev
){

124 
	`¥ötk
(
KERN_ERR
 "invalid media device\n");

128 i‡(!
mdev
->
∑ddr
) {

129 
	`¥ötk
(
KERN_ERR
 "nÿmem‹y f‹ %s\n", 
mdev
->
«me
);

133  
mdev
->
∑ddr
;

134 
	}
}

136 
size_t
 
	$s3c_gë_medü_memsize
(
dev_id
)

137 { 
	`__D
("\n");

138 
s3c_medü_devi˚
 *
mdev
;

140 
mdev
 = 
	`s3c_gë_medü_devi˚
(
dev_id
);

141 i‡(!
mdev
){

142 
	`¥ötk
(
KERN_ERR
 "invalid media device\n");

146  
mdev
->
memsize
;

147 
	}
}

	@media.h

14 #i‚de‡
_S3C_MEDIA_H


15 
	#_S3C_MEDIA_H


	)

17 
	~<löux/ty≥s.h
>

19 
	#S3C_MDEV_FIMC
 0

	)

20 
	#S3C_MDEV_POST
 1

	)

21 
	#S3C_MDEV_TV
 2

	)

22 
	#S3C_MDEV_MFC
 3

	)

23 
	#S3C_MDEV_JPEG
 4

	)

24 
	#S3C_MDEV_CMM
 5

	)

25 
	#S3C_MDEV_MAX
 6

	)

27 
	ss3c_medü_devi˚
 {

28 
	mid
;

29 c⁄° *
	m«me
;

30 
size_t
 
	mmemsize
;

31 
dma_addr_t
 
	m∑ddr
;

34 
dma_addr_t
 
s3c_gë_medü_mem‹y
(
dev_id
);

35 
size_t
 
s3c_gë_medü_memsize
(
dev_id
);

	@prism_s.h

13 #i‚de‡
_S3C_PRISM_S_H


14 
	#_S3C_PRISM_S_H


	)

16 c⁄° 
s3c_mfc_bô_code
[40960];

	@prism_s_v137.c

16 c⁄° 
	gs3c_mfc_bô_code
[40960] = {

	@regs-clock.h

15 #i‚de‡
__PLAT_REGS_CLOCK_H


16 
	#__PLAT_REGS_CLOCK_H
 
__FILE__


	)

18 
	#S3C_CLKREG
(
x
Ë(
S3C_VA_SYS
 + (x))

	)

20 
	#S3C_APLL_LOCK
 
	`S3C_CLKREG
(0x00)

	)

21 
	#S3C_MPLL_LOCK
 
	`S3C_CLKREG
(0x04)

	)

22 
	#S3C_EPLL_LOCK
 
	`S3C_CLKREG
(0x08)

	)

23 
	#S3C_APLL_CON
 
	`S3C_CLKREG
(0x0C)

	)

24 
	#S3C_MPLL_CON
 
	`S3C_CLKREG
(0x10)

	)

25 
	#S3C_EPLL_CON0
 
	`S3C_CLKREG
(0x14)

	)

26 
	#S3C_EPLL_CON1
 
	`S3C_CLKREG
(0x18)

	)

27 
	#S3C_CLK_SRC
 
	`S3C_CLKREG
(0x1C)

	)

28 
	#S3C_CLK_SRC2
 
	`S3C_CLKREG
(0x10C)

	)

29 
	#S3C_CLK_DIV0
 
	`S3C_CLKREG
(0x20)

	)

30 
	#S3C_CLK_DIV1
 
	`S3C_CLKREG
(0x24)

	)

31 
	#S3C_CLK_DIV2
 
	`S3C_CLKREG
(0x28)

	)

32 
	#S3C_CLK_OUT
 
	`S3C_CLKREG
(0x2C)

	)

33 
	#S3C_HCLK_GATE
 
	`S3C_CLKREG
(0x30)

	)

34 
	#S3C_PCLK_GATE
 
	`S3C_CLKREG
(0x34)

	)

35 
	#S3C_SCLK_GATE
 
	`S3C_CLKREG
(0x38)

	)

36 
	#S3C_SDMA_SEL
 
	`S3C_CLKREG
(0x110)

	)

37 
	#S3C_SW_RST
 
	`S3C_CLKREG
(0x114)

	)

38 
	#S3C_SYS_ID
 
	`S3C_CLKREG
(0x118)

	)

39 
	#S3C_MEM_SYS_CFG
 
	`S3C_CLKREG
(0x120)

	)

40 
	#S3C_QOS_OVERRIDE0
 
	`S3C_CLKREG
(0x124)

	)

41 
	#S3C_QOS_OVERRIDE1
 
	`S3C_CLKREG
(0x128)

	)

42 
	#S3C_MEM_CFG_STAT
 
	`S3C_CLKREG
(0x12C)

	)

43 
	#S3C_PWR_CFG
 
	`S3C_CLKREG
(0x804)

	)

44 
	#S3C_EINT_MASK
 
	`S3C_CLKREG
(0x808)

	)

45 
	#S3C_NORMAL_CFG
 
	`S3C_CLKREG
(0x810)

	)

46 
	#S3C_STOP_CFG
 
	`S3C_CLKREG
(0x814)

	)

47 
	#S3C_SLEEP_CFG
 
	`S3C_CLKREG
(0x818)

	)

48 
	#S3C_OSC_FREQ
 
	`S3C_CLKREG
(0x820)

	)

49 
	#S3C_OSC_STABLE
 
	`S3C_CLKREG
(0x824)

	)

50 
	#S3C_PWR_STABLE
 
	`S3C_CLKREG
(0x828)

	)

51 
	#S3C_FPC_STABLE
 
	`S3C_CLKREG
(0x82C)

	)

52 
	#S3C_MTC_STABLE
 
	`S3C_CLKREG
(0x830)

	)

53 
	#S3C_OTHERS
 
	`S3C_CLKREG
(0x900)

	)

54 
	#S3C_RST_STAT
 
	`S3C_CLKREG
(0x904)

	)

55 
	#S3C_WAKEUP_STAT
 
	`S3C_CLKREG
(0x908)

	)

56 
	#S3C_BLK_PWR_STAT
 
	`S3C_CLKREG
(0x90C)

	)

57 
	#S3C_INFORM0
 
	`S3C_CLKREG
(0xA00)

	)

58 
	#S3C_INFORM1
 
	`S3C_CLKREG
(0xA04)

	)

59 
	#S3C_INFORM2
 
	`S3C_CLKREG
(0xA08)

	)

60 
	#S3C_INFORM3
 
	`S3C_CLKREG
(0xA0C)

	)

61 
	#S3C_INFORM4
 
	`S3C_CLKREG
(0xA10)

	)

62 
	#S3C_INFORM5
 
	`S3C_CLKREG
(0xA14)

	)

63 
	#S3C_INFORM6
 
	`S3C_CLKREG
(0xA18)

	)

64 
	#S3C_INFORM7
 
	`S3C_CLKREG
(0xA1C)

	)

66 
	#S3C64XX_EPLL_CON0_M_SHIFT
 16

	)

67 
	#S3C64XX_EPLL_CON0_P_SHIFT
 8

	)

68 
	#S3C64XX_EPLL_CON0_S_SHIFT
 0

	)

69 
	#S3C64XX_EPLL_CON1_K_SHIFT
 0

	)

71 
	#S3C64XX_EPLL_CON0_M_MASK
 (0xff<<
S3C64XX_EPLL_CON0_M_SHIFT
)

	)

72 
	#S3C64XX_EPLL_CON0_P_MASK
 (0x3f<<
S3C64XX_EPLL_CON0_P_SHIFT
)

	)

73 
	#S3C64XX_EPLL_CON0_S_MASK
 (0x7<<
S3C64XX_EPLL_CON0_S_SHIFT
)

	)

74 
	#S3C64XX_EPLL_CON1_K_MASK
 (0xffff<<
S3C64XX_EPLL_CON1_K_SHIFT
)

	)

77 
	#S3C6400_CLKDIV0_MFC_MASK
 (0x‡<< 28)

	)

78 
	#S3C6400_CLKDIV0_MFC_SHIFT
 (28)

	)

79 
	#S3C6400_CLKDIV0_JPEG_MASK
 (0x‡<< 24)

	)

80 
	#S3C6400_CLKDIV0_JPEG_SHIFT
 (24)

	)

81 
	#S3C6400_CLKDIV0_CAM_MASK
 (0x‡<< 20)

	)

82 
	#S3C6400_CLKDIV0_CAM_SHIFT
 (20)

	)

83 
	#S3C6400_CLKDIV0_SECURITY_MASK
 (0x3 << 18)

	)

84 
	#S3C6400_CLKDIV0_SECURITY_SHIFT
 (18)

	)

85 
	#S3C6400_CLKDIV0_PCLK_MASK
 (0x‡<< 12)

	)

86 
	#S3C6400_CLKDIV0_PCLK_SHIFT
 (12)

	)

87 
	#S3C6400_CLKDIV0_HCLK2_MASK
 (0x7 << 9)

	)

88 
	#S3C6400_CLKDIV0_HCLK2_SHIFT
 (9)

	)

89 
	#S3C6400_CLKDIV0_HCLK_MASK
 (0x1 << 8)

	)

90 
	#S3C6400_CLKDIV0_HCLK_SHIFT
 (8)

	)

91 
	#S3C6400_CLKDIV0_MPLL_MASK
 (0x1 << 4)

	)

92 
	#S3C6400_CLKDIV0_MPLL_SHIFT
 (4)

	)

93 
	#S3C6400_CLKDIV0_ARM_MASK
 (0x3 << 0)

	)

94 
	#S3C6410_CLKDIV0_ARM_MASK
 (0x7 << 0)

	)

95 
	#S3C6400_CLKDIV0_ARM_SHIFT
 (0)

	)

96 
	#S3C6410_CLKDIV0_ARM_SHIFT
 (0)

	)

99 
	#S3C6410_CLKDIV1_FIMC_MASK
 (0x‡<< 24)

	)

100 
	#S3C6410_CLKDIV1_FIMC_SHIFT
 (24)

	)

101 
	#S3C6400_CLKDIV1_UHOST_MASK
 (0x‡<< 20)

	)

102 
	#S3C6400_CLKDIV1_UHOST_SHIFT
 (20)

	)

103 
	#S3C6400_CLKDIV1_SCALER_MASK
 (0x‡<< 16)

	)

104 
	#S3C6400_CLKDIV1_SCALER_SHIFT
 (16)

	)

105 
	#S3C6400_CLKDIV1_LCD_MASK
 (0x‡<< 12)

	)

106 
	#S3C6400_CLKDIV1_LCD_SHIFT
 (12)

	)

107 
	#S3C6400_CLKDIV1_MMC2_MASK
 (0x‡<< 8)

	)

108 
	#S3C6400_CLKDIV1_MMC2_SHIFT
 (8)

	)

109 
	#S3C6400_CLKDIV1_MMC1_MASK
 (0x‡<< 4)

	)

110 
	#S3C6400_CLKDIV1_MMC1_SHIFT
 (4)

	)

111 
	#S3C6400_CLKDIV1_MMC0_MASK
 (0x‡<< 0)

	)

112 
	#S3C6400_CLKDIV1_MMC0_SHIFT
 (0)

	)

115 
	#S3C6410_CLKDIV2_AUDIO2_MASK
 (0x‡<< 24)

	)

116 
	#S3C6410_CLKDIV2_AUDIO2_SHIFT
 (24)

	)

117 
	#S3C6400_CLKDIV2_IRDA_MASK
 (0x‡<< 20)

	)

118 
	#S3C6400_CLKDIV2_IRDA_SHIFT
 (20)

	)

119 
	#S3C6400_CLKDIV2_UART_MASK
 (0x‡<< 16)

	)

120 
	#S3C6400_CLKDIV2_UART_SHIFT
 (16)

	)

121 
	#S3C6400_CLKDIV2_AUDIO1_MASK
 (0x‡<< 12)

	)

122 
	#S3C6400_CLKDIV2_AUDIO1_SHIFT
 (12)

	)

123 
	#S3C6400_CLKDIV2_AUDIO0_MASK
 (0x‡<< 8)

	)

124 
	#S3C6400_CLKDIV2_AUDIO0_SHIFT
 (8)

	)

125 
	#S3C6400_CLKDIV2_SPI1_MASK
 (0x‡<< 4)

	)

126 
	#S3C6400_CLKDIV2_SPI1_SHIFT
 (4)

	)

127 
	#S3C6400_CLKDIV2_SPI0_MASK
 (0x‡<< 0)

	)

128 
	#S3C6400_CLKDIV2_SPI0_SHIFT
 (0)

	)

131 
	#S3C_CLKCON_HCLK_BUS
 (1<<30)

	)

132 
	#S3C_CLKCON_HCLK_SECUR
 (1<<29)

	)

133 
	#S3C_CLKCON_HCLK_SDMA1
 (1<<28)

	)

134 
	#S3C_CLKCON_HCLK_SDMA2
 (1<<27)

	)

135 
	#S3C_CLKCON_HCLK_UHOST
 (1<<26)

	)

136 
	#S3C_CLKCON_HCLK_IROM
 (1<<25)

	)

137 
	#S3C_CLKCON_HCLK_DDR1
 (1<<24)

	)

138 
	#S3C_CLKCON_HCLK_DDR0
 (1<<23)

	)

139 
	#S3C_CLKCON_HCLK_MEM1
 (1<<22)

	)

140 
	#S3C_CLKCON_HCLK_MEM0
 (1<<21)

	)

141 
	#S3C_CLKCON_HCLK_USB
 (1<<20)

	)

142 
	#S3C_CLKCON_HCLK_HSMMC2
 (1<<19)

	)

143 
	#S3C_CLKCON_HCLK_HSMMC1
 (1<<18)

	)

144 
	#S3C_CLKCON_HCLK_HSMMC0
 (1<<17)

	)

145 
	#S3C_CLKCON_HCLK_MDP
 (1<<16)

	)

146 
	#S3C_CLKCON_HCLK_DHOST
 (1<<15)

	)

147 
	#S3C_CLKCON_HCLK_IHOST
 (1<<14)

	)

148 
	#S3C_CLKCON_HCLK_DMA1
 (1<<13)

	)

149 
	#S3C_CLKCON_HCLK_DMA0
 (1<<12)

	)

150 
	#S3C_CLKCON_HCLK_JPEG
 (1<<11)

	)

151 
	#S3C_CLKCON_HCLK_CAMIF
 (1<<10)

	)

152 
	#S3C_CLKCON_HCLK_SCALER
 (1<<9)

	)

153 
	#S3C_CLKCON_HCLK_2D
 (1<<8)

	)

154 
	#S3C_CLKCON_HCLK_TV
 (1<<7)

	)

155 
	#S3C_CLKCON_HCLK_POST0
 (1<<5)

	)

156 
	#S3C_CLKCON_HCLK_ROT
 (1<<4)

	)

157 
	#S3C_CLKCON_HCLK_LCD
 (1<<3)

	)

158 
	#S3C_CLKCON_HCLK_TZIC
 (1<<2)

	)

159 
	#S3C_CLKCON_HCLK_INTC
 (1<<1)

	)

160 
	#S3C_CLKCON_HCLK_MFC
 (1<<0)

	)

163 
	#S3C6410_CLKCON_PCLK_I2C1
 (1<<27)

	)

164 
	#S3C6410_CLKCON_PCLK_IIS2
 (1<<26)

	)

165 
	#S3C_CLKCON_PCLK_SKEY
 (1<<24)

	)

166 
	#S3C_CLKCON_PCLK_CHIPID
 (1<<23)

	)

167 
	#S3C_CLKCON_PCLK_SPI1
 (1<<22)

	)

168 
	#S3C_CLKCON_PCLK_SPI0
 (1<<21)

	)

169 
	#S3C_CLKCON_PCLK_HSIRX
 (1<<20)

	)

170 
	#S3C_CLKCON_PCLK_HSITX
 (1<<19)

	)

171 
	#S3C_CLKCON_PCLK_GPIO
 (1<<18)

	)

172 
	#S3C_CLKCON_PCLK_IIC
 (1<<17)

	)

173 
	#S3C_CLKCON_PCLK_IIS1
 (1<<16)

	)

174 
	#S3C_CLKCON_PCLK_IIS0
 (1<<15)

	)

175 
	#S3C_CLKCON_PCLK_AC97
 (1<<14)

	)

176 
	#S3C_CLKCON_PCLK_TZPC
 (1<<13)

	)

177 
	#S3C_CLKCON_PCLK_TSADC
 (1<<12)

	)

178 
	#S3C_CLKCON_PCLK_KEYPAD
 (1<<11)

	)

179 
	#S3C_CLKCON_PCLK_IRDA
 (1<<10)

	)

180 
	#S3C_CLKCON_PCLK_PCM1
 (1<<9)

	)

181 
	#S3C_CLKCON_PCLK_PCM0
 (1<<8)

	)

182 
	#S3C_CLKCON_PCLK_PWM
 (1<<7)

	)

183 
	#S3C_CLKCON_PCLK_RTC
 (1<<6)

	)

184 
	#S3C_CLKCON_PCLK_WDT
 (1<<5)

	)

185 
	#S3C_CLKCON_PCLK_UART3
 (1<<4)

	)

186 
	#S3C_CLKCON_PCLK_UART2
 (1<<3)

	)

187 
	#S3C_CLKCON_PCLK_UART1
 (1<<2)

	)

188 
	#S3C_CLKCON_PCLK_UART0
 (1<<1)

	)

189 
	#S3C_CLKCON_PCLK_MFC
 (1<<0)

	)

192 
	#S3C_CLKCON_SCLK_UHOST
 (1<<30)

	)

193 
	#S3C_CLKCON_SCLK_MMC2_48
 (1<<29)

	)

194 
	#S3C_CLKCON_SCLK_MMC1_48
 (1<<28)

	)

195 
	#S3C_CLKCON_SCLK_MMC0_48
 (1<<27)

	)

196 
	#S3C_CLKCON_SCLK_MMC2
 (1<<26)

	)

197 
	#S3C_CLKCON_SCLK_MMC1
 (1<<25)

	)

198 
	#S3C_CLKCON_SCLK_MMC0
 (1<<24)

	)

199 
	#S3C_CLKCON_SCLK_SPI1_48
 (1<<23)

	)

200 
	#S3C_CLKCON_SCLK_SPI0_48
 (1<<22)

	)

201 
	#S3C_CLKCON_SCLK_SPI1
 (1<<21)

	)

202 
	#S3C_CLKCON_SCLK_SPI0
 (1<<20)

	)

203 
	#S3C_CLKCON_SCLK_DAC27
 (1<<19)

	)

204 
	#S3C_CLKCON_SCLK_TV27
 (1<<18)

	)

205 
	#S3C_CLKCON_SCLK_SCALER27
 (1<<17)

	)

206 
	#S3C_CLKCON_SCLK_SCALER
 (1<<16)

	)

207 
	#S3C_CLKCON_SCLK_LCD27
 (1<<15)

	)

208 
	#S3C_CLKCON_SCLK_LCD
 (1<<14)

	)

209 
	#S3C6400_CLKCON_SCLK_POST1_27
 (1<<13)

	)

210 
	#S3C6410_CLKCON_FIMC
 (1<<13)

	)

211 
	#S3C_CLKCON_SCLK_POST0_27
 (1<<12)

	)

212 
	#S3C6400_CLKCON_SCLK_POST1
 (1<<11)

	)

213 
	#S3C6410_CLKCON_SCLK_AUDIO2
 (1<<11)

	)

214 
	#S3C_CLKCON_SCLK_POST0
 (1<<10)

	)

215 
	#S3C_CLKCON_SCLK_AUDIO1
 (1<<9)

	)

216 
	#S3C_CLKCON_SCLK_AUDIO0
 (1<<8)

	)

217 
	#S3C_CLKCON_SCLK_SECUR
 (1<<7)

	)

218 
	#S3C_CLKCON_SCLK_IRDA
 (1<<6)

	)

219 
	#S3C_CLKCON_SCLK_UART
 (1<<5)

	)

220 
	#S3C_CLKCON_SCLK_ONENAND
 (1<<4)

	)

221 
	#S3C_CLKCON_SCLK_MFC
 (1<<3)

	)

222 
	#S3C_CLKCON_SCLK_CAM
 (1<<2)

	)

223 
	#S3C_CLKCON_SCLK_JPEG
 (1<<1)

	)

226 
	#S3C_OTHERS_USB_SIG_MASK
 (1<<16)

	)

227 
	#S3C_OTHERS_SYNCMUXSEL_SYNC
 (1<<6)

	)

228 
	#S3C_OTHERS_SYNCMODE_SYNC
 (1<<7)

	)

233 
	#S3C6400_CLKSRC_APLL_MOUT
 (1 << 0)

	)

234 
	#S3C6400_CLKSRC_MPLL_MOUT
 (1 << 1)

	)

235 
	#S3C6400_CLKSRC_EPLL_MOUT
 (1 << 2)

	)

236 
	#S3C6400_CLKSRC_APLL_MOUT_SHIFT
 (0)

	)

237 
	#S3C6400_CLKSRC_MPLL_MOUT_SHIFT
 (1)

	)

238 
	#S3C6400_CLKSRC_EPLL_MOUT_SHIFT
 (2)

	)

239 
	#S3C6400_CLKSRC_MFC
 (1 << 4)

	)

241 
	#S3C6410_CLKSRC_TV27_MASK
 (0x1 << 31)

	)

242 
	#S3C6410_CLKSRC_TV27_SHIFT
 (31)

	)

243 
	#S3C6410_CLKSRC_DAC27_MASK
 (0x1 << 30)

	)

244 
	#S3C6410_CLKSRC_DAC27_SHIFT
 (30)

	)

245 
	#S3C6400_CLKSRC_SCALER_MASK
 (0x3 << 28)

	)

246 
	#S3C6400_CLKSRC_SCALER_SHIFT
 (28)

	)

247 
	#S3C6400_CLKSRC_LCD_MASK
 (0x3 << 26)

	)

248 
	#S3C6400_CLKSRC_LCD_SHIFT
 (26)

	)

249 
	#S3C6400_CLKSRC_IRDA_MASK
 (0x3 << 24)

	)

250 
	#S3C6400_CLKSRC_IRDA_SHIFT
 (24)

	)

251 
	#S3C6400_CLKSRC_MMC2_MASK
 (0x3 << 22)

	)

252 
	#S3C6400_CLKSRC_MMC2_SHIFT
 (22)

	)

253 
	#S3C6400_CLKSRC_MMC1_MASK
 (0x3 << 20)

	)

254 
	#S3C6400_CLKSRC_MMC1_SHIFT
 (20)

	)

255 
	#S3C6400_CLKSRC_MMC0_MASK
 (0x3 << 18)

	)

256 
	#S3C6400_CLKSRC_MMC0_SHIFT
 (18)

	)

257 
	#S3C6400_CLKSRC_SPI1_MASK
 (0x3 << 16)

	)

258 
	#S3C6400_CLKSRC_SPI1_SHIFT
 (16)

	)

259 
	#S3C6400_CLKSRC_SPI0_MASK
 (0x3 << 14)

	)

260 
	#S3C6400_CLKSRC_SPI0_SHIFT
 (14)

	)

261 
	#S3C6400_CLKSRC_UART_MASK
 (0x1 << 13)

	)

262 
	#S3C6400_CLKSRC_UART_SHIFT
 (13)

	)

263 
	#S3C6400_CLKSRC_AUDIO1_MASK
 (0x7 << 10)

	)

264 
	#S3C6400_CLKSRC_AUDIO1_SHIFT
 (10)

	)

265 
	#S3C6400_CLKSRC_AUDIO0_MASK
 (0x7 << 7)

	)

266 
	#S3C6400_CLKSRC_AUDIO0_SHIFT
 (7)

	)

267 
	#S3C6400_CLKSRC_UHOST_MASK
 (0x3 << 5)

	)

268 
	#S3C6400_CLKSRC_UHOST_SHIFT
 (5)

	)

270 
	#S3C6410_CLKSRC2_AUDIO2_MASK
 (0x7 << 0)

	)

271 
	#S3C6410_CLKSRC2_AUDIO2_SHIFT
 (0)

	)

274 
	#S3C_CLKSRC_APLL_CLKSEL
 (1<<0)

	)

275 
	#S3C_CLKSRC_MPLL_CLKSEL
 (1<<1)

	)

276 
	#S3C_CLKSRC_EPLL_CLKSEL
 (1<<2)

	)

277 
	#S3C_CLKSRC_UHOST_EPLL
 (1<<5)

	)

278 
	#S3C_CLKSRC_UHOST_MASK
 (3<<5)

	)

	@regs-mfc.h

13 #i‚de‡
__ASM_ARCH_REGS_MFC_H


14 
	#__ASM_ARCH_REGS_MFC_H
 
__FILE__


	)

19 
	#S3C_MFC
(
x
Ë(x)

	)

21 
	#S3C_MFC_CODE_RUN
 
	`S3C_MFC
(0x000Ë

	)

22 
	#S3C_MFC_CODE_DN_LOAD
 
	`S3C_MFC
(0x004Ë

	)

23 
	#S3C_MFC_HOST_INTR
 
	`S3C_MFC
(0x008Ë

	)

24 
	#S3C_MFC_BITS_INT_CLEAR
 
	`S3C_MFC
(0x00c)

	)

25 
	#S3C_MFC_BITS_INT_STAT
 
	`S3C_MFC
(0x010Ë

	)

26 
	#S3C_MFC_BITS_CODE_RESET
 
	`S3C_MFC
(0x014)

	)

27 
	#S3C_MFC_BITS_CUR_PC
 
	`S3C_MFC
(0x018)

	)

28 
	#S3C_MFC_RESERVED1
 
	`S3C_MFC
(0x01cË

	)

29 
	#S3C_MFC_CODE_BUF_ADDR
 
	`S3C_MFC
(0x100)

	)

30 
	#S3C_MFC_WORK_BUF_ADDR
 
	`S3C_MFC
(0x104)

	)

31 
	#S3C_MFC_PARA_BUF_ADDR
 
	`S3C_MFC
(0x108)

	)

32 
	#S3C_MFC_STRM_BUF_CTRL
 
	`S3C_MFC
(0x10c)

	)

33 
	#S3C_MFC_FRME_BUF_CTRL
 
	`S3C_MFC
(0x110)

	)

34 
	#S3C_MFC_DEC_FUNC_CTRL
 
	`S3C_MFC
(0x114Ë

	)

35 
	#S3C_MFC_RESERVED2
 
	`S3C_MFC
(0x118Ë

	)

36 
	#S3C_MFC_WORK_BUF_CTRL
 
	`S3C_MFC
(0x11cË

	)

38 
	#S3C_MFC_BIT_STR_BASE_PTR0
 
	`S3C_MFC
(0x120)

	)

39 
	#S3C_MFC_BIT_STR_RD_PTR0
 
	`S3C_MFC
(0x120)

	)

40 
	#S3C_MFC_BIT_STR_WR_PTR0
 
	`S3C_MFC
(0x124)

	)

42 
	#S3C_MFC_BIT_STR_BASE_PTR1
 
	`S3C_MFC
(0x128)

	)

43 
	#S3C_MFC_BIT_STR_RD_PTR1
 
	`S3C_MFC
(0x128)

	)

44 
	#S3C_MFC_BIT_STR_WR_PTR1
 
	`S3C_MFC
(0x12c)

	)

46 
	#S3C_MFC_BIT_STR_BASE_PTR2
 
	`S3C_MFC
(0x130)

	)

47 
	#S3C_MFC_BIT_STR_RD_PTR2
 
	`S3C_MFC
(0x130)

	)

48 
	#S3C_MFC_BIT_STR_WR_PTR2
 
	`S3C_MFC
(0x134)

	)

50 
	#S3C_MFC_BIT_STR_BASE_PTR3
 
	`S3C_MFC
(0x138)

	)

51 
	#S3C_MFC_BIT_STR_RD_PTR3
 
	`S3C_MFC
(0x138)

	)

52 
	#S3C_MFC_BIT_STR_WR_PTR3
 
	`S3C_MFC
(0x13c)

	)

54 
	#S3C_MFC_BIT_STR_BASE_PTR4
 
	`S3C_MFC
(0x140)

	)

55 
	#S3C_MFC_BIT_STR_RD_PTR4
 
	`S3C_MFC
(0x140)

	)

56 
	#S3C_MFC_BIT_STR_WR_PTR4
 
	`S3C_MFC
(0x144)

	)

58 
	#S3C_MFC_BIT_STR_BASE_PTR5
 
	`S3C_MFC
(0x148)

	)

59 
	#S3C_MFC_BIT_STR_RD_PTR5
 
	`S3C_MFC
(0x148)

	)

60 
	#S3C_MFC_BIT_STR_WR_PTR5
 
	`S3C_MFC
(0x14c)

	)

62 
	#S3C_MFC_BIT_STR_BASE_PTR6
 
	`S3C_MFC
(0x150)

	)

63 
	#S3C_MFC_BIT_STR_RD_PTR6
 
	`S3C_MFC
(0x150)

	)

64 
	#S3C_MFC_BIT_STR_WR_PTR6
 
	`S3C_MFC
(0x154)

	)

66 
	#S3C_MFC_BIT_STR_BASE_PTR7
 
	`S3C_MFC
(0x158)

	)

67 
	#S3C_MFC_BIT_STR_RD_PTR7
 
	`S3C_MFC
(0x158)

	)

68 
	#S3C_MFC_BIT_STR_WR_PTR7
 
	`S3C_MFC
(0x15c)

	)

70 
	#S3C_MFC_BUSY_FLAG
 
	`S3C_MFC
(0x160)

	)

71 
	#S3C_MFC_RUN_CMD
 
	`S3C_MFC
(0x164)

	)

72 
	#S3C_MFC_RUN_INDEX
 
	`S3C_MFC
(0x168)

	)

73 
	#S3C_MFC_RUN_COD_STD
 
	`S3C_MFC
(0x16c)

	)

74 
	#S3C_MFC_INT_ENABLE
 
	`S3C_MFC
(0x170)

	)

75 
	#S3C_MFC_INT_REASON
 
	`S3C_MFC
(0x174)

	)

77 
	#S3C_MFC_RESERVED3
 
	`S3C_MFC
(0x178Ë

	)

79 
	#S3C_MFC_PARAM
 
	`S3C_MFC
(0x180)

	)

82 
	#S3C_MFC_PARAM_DEC_SEQ_INIT
 
S3C_MFC_PARAM


	)

83 
	#S3C_MFC_PARAM_DEC_SEQ_BIT_BUF_ADDR
 
	`S3C_MFC
(0x180)

	)

84 
	#S3C_MFC_PARAM_DEC_SEQ_BIT_BUF_SIZE
 
	`S3C_MFC
(0x184)

	)

85 
	#S3C_MFC_PARAM_DEC_SEQ_OPTION
 
	`S3C_MFC
(0x188)

	)

86 
	#S3C_MFC_PARAM_DEC_SEQ_PRO_BUF
 
	`S3C_MFC
(0x18c)

	)

87 
	#S3C_MFC_PARAM_DEC_SEQ_TMP_BUF_1
 
	`S3C_MFC
(0x190)

	)

88 
	#S3C_MFC_PARAM_DEC_SEQ_TMP_BUF_2
 
	`S3C_MFC
(0x194)

	)

89 
	#S3C_MFC_PARAM_DEC_SEQ_TMP_BUF_3
 
	`S3C_MFC
(0x198)

	)

90 
	#S3C_MFC_PARAM_DEC_SEQ_TMP_BUF_4
 
	`S3C_MFC
(0x19c)

	)

91 
	#S3C_MFC_PARAM_DEC_SEQ_TMP_BUF_5
 
	`S3C_MFC
(0x1a0)

	)

92 
	#S3C_MFC_PARAM_DEC_SEQ_START_BYTE
 
	`S3C_MFC
(0x1a4)

	)

93 
	#S3C_MFC_PARAM_DEC_SEQ_RESERVED
 
	`S3C_MFC
(0x1a8)

	)

95 
	#S3C_MFC_PARAM_RET_DEC_SEQ_SUCCESS
 
	`S3C_MFC
(0x1c0)

	)

96 
	#S3C_MFC_PARAM_RET_DEC_SEQ_SRC_SIZE
 
	`S3C_MFC
(0x1c4)

	)

97 
	#S3C_MFC_PARAM_RET_DEC_SEQ_SRC_FRAME_RATE
 
	`S3C_MFC
(0x1c8)

	)

98 
	#S3C_MFC_PARAM_RET_DEC_SEQ_FRAME_NEED_COUNT
 
	`S3C_MFC
(0x1cc)

	)

99 
	#S3C_MFC_PARAM_RET_DEC_SEQ_FRAME_DELAY
 
	`S3C_MFC
(0x1d0)

	)

100 
	#S3C_MFC_PARAM_RET_DEC_SEQ_INFO
 
	`S3C_MFC
(0x1d4)

	)

101 
	#S3C_MFC_PARAM_RET_DEC_SEQ_TIME_RES
 
	`S3C_MFC
(0x1d8)

	)

104 
	#S3C_MFC_PARAM_ENC_SEQ_INIT
 
S3C_MFC_PARAM


	)

105 
	#S3C_MFC_PARAM_ENC_SEQ_BIT_BUF_ADDR
 
	`S3C_MFC
(0x180)

	)

106 
	#S3C_MFC_PARAM_ENC_SEQ_BIT_BUF_SIZE
 
	`S3C_MFC
(0x184)

	)

107 
	#S3C_MFC_PARAM_ENC_SEQ_OPTION
 
	`S3C_MFC
(0x188)

	)

108 
	#S3C_MFC_PARAM_ENC_SEQ_COD_STD
 
	`S3C_MFC
(0x18c)

	)

109 
	#S3C_MFC_PARAM_ENC_SEQ_SRC_SIZE
 
	`S3C_MFC
(0x190)

	)

110 
	#S3C_MFC_PARAM_ENC_SEQ_SRC_F_RATE
 
	`S3C_MFC
(0x194)

	)

111 
	#S3C_MFC_PARAM_ENC_SEQ_MP4_PARA
 
	`S3C_MFC
(0x198)

	)

112 
	#S3C_MFC_PARAM_ENC_SEQ_263_PARA
 
	`S3C_MFC
(0x19c)

	)

113 
	#S3C_MFC_PARAM_ENC_SEQ_264_PARA
 
	`S3C_MFC
(0x1a0)

	)

114 
	#S3C_MFC_PARAM_ENC_SEQ_SLICE_MODE
 
	`S3C_MFC
(0x1a4)

	)

115 
	#S3C_MFC_PARAM_ENC_SEQ_GOP_NUM
 
	`S3C_MFC
(0x1a8)

	)

116 
	#S3C_MFC_PARAM_ENC_SEQ_RC_PARA
 
	`S3C_MFC
(0x1ac)

	)

117 
	#S3C_MFC_PARAM_ENC_SEQ_RC_BUF_SIZE
 
	`S3C_MFC
(0x1b0)

	)

118 
	#S3C_MFC_PARAM_ENC_SEQ_INTRA_MB
 
	`S3C_MFC
(0x1b4)

	)

119 
	#S3C_MFC_PARAM_ENC_SEQ_FMO
 
	`S3C_MFC
(0x1b8)

	)

120 
	#S3C_MFC_PARAM_ENC_SEQ_INTRA_QP
 
	`S3C_MFC
(0x1bc)

	)

122 
	#S3C_MFC_PARAM_RET_ENC_SEQ_SUCCESS
 
	`S3C_MFC
(0x1c0)

	)

124 
	#S3C_MFC_PARAM_ENC_SEQ_RC_OPTION
 
	`S3C_MFC
(0x1c4)

	)

125 
	#S3C_MFC_PARAM_ENC_SEQ_RC_QP_MAX
 
	`S3C_MFC
(0x1c8)

	)

126 
	#S3C_MFC_PARAM_ENC_SEQ_RC_GAMMA
 
	`S3C_MFC
(0x1ccË

	)

127 
	#S3C_MFC_PARAM_ENC_SEQ_TMP_BUF1
 
	`S3C_MFC
(0x1d0)

	)

128 
	#S3C_MFC_PARAM_ENC_SEQ_TMP_BUF2
 
	`S3C_MFC
(0x1d4)

	)

129 
	#S3C_MFC_PARAM_ENC_SEQ_TMP_BUF3
 
	`S3C_MFC
(0x1d8)

	)

130 
	#S3C_MFC_PARAM_ENC_SEQ_TMP_BUF4
 
	`S3C_MFC
(0x1dc)

	)

133 
	#S3C_MFC_PARAM_REG_SET_FRAME_BUF
 
S3C_MFC_PARAM


	)

134 
	#S3C_MFC_PARAM_SET_FRAME_BUF_NUM
 
	`S3C_MFC
(0x180)

	)

135 
	#S3C_MFC_PARAM_SET_FRAME_BUF_STRIDE
 
	`S3C_MFC
(0x184)

	)

139 
	#S3C_MFC_PARAM_DEC_PIC_RUN
 
S3C_MFC_PARAM


	)

140 
	#S3C_MFC_PARAM_DEC_PIC_ROT_MODE
 
	`S3C_MFC
(0x180Ë

	)

141 
	#S3C_MFC_PARAM_DEC_PIC_ROT_ADDR_Y
 
	`S3C_MFC
(0x184Ë

	)

142 
	#S3C_MFC_PARAM_DEC_PIC_ROT_ADDR_CB
 
	`S3C_MFC
(0x188Ë

	)

143 
	#S3C_MFC_PARAM_DEC_PIC_ROT_ADDR_CR
 
	`S3C_MFC
(0x18cË

	)

144 
	#S3C_MFC_PARAM_DEC_PIC_DBK_ADDR_Y
 
	`S3C_MFC
(0x190Ë

	)

145 
	#S3C_MFC_PARAM_DEC_PIC_DBK_ADDR_CB
 
	`S3C_MFC
(0x194Ë

	)

146 
	#S3C_MFC_PARAM_DEC_PIC_DBK_ADDR_CR
 
	`S3C_MFC
(0x198Ë

	)

147 
	#S3C_MFC_PARAM_DEC_PIC_ROT_STRIDE
 
	`S3C_MFC
(0x19cË

	)

148 
	#S3C_MFC_PARAM_DEC_PIC_OPTION
 
	`S3C_MFC
(0x1a0Ë

	)

149 
	#S3C_MFC_PARAM_DEC_PIC_RESERVED1
 
	`S3C_MFC
(0x1a4)

	)

150 
	#S3C_MFC_PARAM_DEC_PIC_CHUNK_SIZE
 
	`S3C_MFC
(0x1a8Ë

	)

151 
	#S3C_MFC_PARAM_DEC_PIC_BB_START
 
	`S3C_MFC
(0x1acË

	)

152 
	#S3C_MFC_PARAM_DEC_PIC_START_BYTE
 
	`S3C_MFC
(0x1b0Ë

	)

153 
	#S3C_MFC_PARAM_DEC_PIC_MV_ADDR
 
	`S3C_MFC
(0x1b4Ë

	)

154 
	#S3C_MFC_PARAM_DEC_PIC_MBTYPE_ADDR
 
	`S3C_MFC
(0x1b8Ë

	)

155 
	#S3C_MFC_PARAM_DEC_PIC_RESERVED2
 
	`S3C_MFC
(0x1bc)

	)

157 
	#S3C_MFC_PARAM_RET_DEC_PIC_FRAME_NUM
 
	`S3C_MFC
(0x1c0Ë

	)

158 
	#S3C_MFC_PARAM_RET_DEC_PIC_IDX
 
	`S3C_MFC
(0x1c4Ë

	)

159 
	#S3C_MFC_PARAM_RET_DEC_PIC_ERR_MB_NUM
 
	`S3C_MFC
(0x1c8Ë

	)

160 
	#S3C_MFC_PARAM_RET_DEC_PIC_TYPE
 
	`S3C_MFC
(0x1ccË

	)

161 
	#S3C_MFC_PARAM_DEC_PIC_RESERVED3
 
	`S3C_MFC
(0x1d0Ë

	)

162 
	#S3C_MFC_PARAM_RET_DEC_PIC_SUCCESS
 
	`S3C_MFC
(0x1d8Ë

	)

163 
	#S3C_MFC_PARAM_RET_DEC_PIC_CUR_IDX
 
	`S3C_MFC
(0x1dcË

	)

164 
	#S3C_MFC_PARAM_RET_DEC_PIC_FCODE_FWD
 
	`S3C_MFC
(0x1e0Ë

	)

165 
	#S3C_MFC_PARAM_RET_DEC_PIC_TRD
 
	`S3C_MFC
(0x1e4Ë

	)

166 
	#S3C_MFC_PARAM_RET_DEC_PIC_TIME_BASE_LAST
 
	`S3C_MFC
(0x1e8Ë

	)

167 
	#S3C_MFC_PARAM_RET_DEC_PIC_NONB_TIME_LAST
 
	`S3C_MFC
(0x1ecË

	)

168 
	#S3C_MFC_PARAM_RET_DEC_PIC_BCNT
 
	`S3C_MFC
(0x1f0Ë

	)

171 
	#S3C_MFC_PARAM_ENC_PIC_RUN
 
S3C_MFC_PARAM


	)

172 
	#S3C_MFC_PARAM_ENC_PIC_SRC_ADDR_Y
 
	`S3C_MFC
(0x180)

	)

173 
	#S3C_MFC_PARAM_ENC_PIC_SRC_ADDR_CB
 
	`S3C_MFC
(0x184)

	)

174 
	#S3C_MFC_PARAM_ENC_PIC_SRC_ADDR_CR
 
	`S3C_MFC
(0x188)

	)

175 
	#S3C_MFC_PARAM_ENC_PIC_QS
 
	`S3C_MFC
(0x18c)

	)

176 
	#S3C_MFC_PARAM_ENC_PIC_ROT_MODE
 
	`S3C_MFC
(0x190)

	)

177 
	#S3C_MFC_PARAM_ENC_PIC_OPTION
 
	`S3C_MFC
(0x194)

	)

178 
	#S3C_MFC_PARAM_ENC_PIC_BB_START
 
	`S3C_MFC
(0x198)

	)

179 
	#S3C_MFC_PARAM_ENC_PIC_BB_SIZE
 
	`S3C_MFC
(0x19c)

	)

180 
	#S3C_MFC_PARAM_ENC_PIC_RESERVED
 
	`S3C_MFC
(0x1a0Ë

	)

182 
	#S3C_MFC_PARAM_RET_ENC_PIC_FRAME_NUM
 
	`S3C_MFC
(0x1c0)

	)

183 
	#S3C_MFC_PARAM_RET_ENC_PIC_TYPE
 
	`S3C_MFC
(0x1c4)

	)

184 
	#S3C_MFC_PARAM_RET_ENC_PIC_IDX
 
	`S3C_MFC
(0x1c8)

	)

185 
	#S3C_MFC_PARAM_RET_ENC_PIC_SLICE_NUM
 
	`S3C_MFC
(0x1cc)

	)

186 
	#S3C_MFC_PARAM_RET_ENC_PIC_FLAG
 
	`S3C_MFC
(0x1d0)

	)

189 
	#S3C_MFC_PARAM_ENC_PARA_SET
 
S3C_MFC_PARAM


	)

190 
	#S3C_MFC_PARAM_ENC_PARA_SET_TYPE
 
	`S3C_MFC
(0x180)

	)

191 
	#S3C_MFC_PARAM_ENC_RESERVED
 
	`S3C_MFC
(0x184)

	)

193 
	#S3C_MFC_PARAM_RET_ENC_PARA_SET_SIZE
 
	`S3C_MFC
(0x1c0)

	)

196 
	#S3C_MFC_PARAM_ENC_HEADER
 
S3C_MFC_PARAM


	)

197 
	#S3C_MFC_PARAM_ENC_HEADER_CODE
 
	`S3C_MFC
(0x180)

	)

198 
	#S3C_MFC_PARAM_ENC_HEADER_BB_START
 
	`S3C_MFC
(0x184)

	)

199 
	#S3C_MFC_PARAM_ENC_HEADER_BB_SIZE
 
	`S3C_MFC
(0x188)

	)

200 
	#S3C_MFC_PARAM_ENC_HEADER_NUM
 
	`S3C_MFC
(0x18c)

	)

201 
	#S3C_MFC_PARAM_ENC_HEADER_RESERVED
 
	`S3C_MFC
(0x190)

	)

205 
	#S3C_MFC_PARAM_ENC_CHANGE
 
S3C_MFC_PARAM


	)

206 
	#S3C_MFC_PARAM_ENC_CHANGE_ENABLE
 
	`S3C_MFC
(0x180)

	)

207 
	#S3C_MFC_PARAM_ENC_CHANGE_GOP_NUM
 
	`S3C_MFC
(0x184)

	)

208 
	#S3C_MFC_PARAM_ENC_CHANGE_INTRA_QP
 
	`S3C_MFC
(0x188)

	)

209 
	#S3C_MFC_PARAM_ENC_CHANGE_BITRATE
 
	`S3C_MFC
(0x18c)

	)

210 
	#S3C_MFC_PARAM_ENC_CHANGE_F_RATE
 
	`S3C_MFC
(0x190)

	)

211 
	#S3C_MFC_PARAM_ENC_CHANGE_INTRA_REFRESH
 
	`S3C_MFC
(0x194)

	)

212 
	#S3C_MFC_PARAM_ENC_CHANGE_SLICE_MODE
 
	`S3C_MFC
(0x198)

	)

213 
	#S3C_MFC_PARAM_ENC_CHANGE_HEC_MODE
 
	`S3C_MFC
(0x19c)

	)

214 
	#S3C_MFC_PARAM_ENC_CHANGE_RESERVED
 
	`S3C_MFC
(0x1a0Ë

	)

215 
	#S3C_MFC_PARAM_ENC_CHANGE_RESERVED0
 
	`S3C_MFC
(0x1a0)

	)

216 
	#S3C_MFC_PARAM_ENC_CHANGE_RESERVED1
 
	`S3C_MFC
(0x1a4)

	)

217 
	#S3C_MFC_PARAM_ENC_CHANGE_RESERVED2
 
	`S3C_MFC
(0x1a8)

	)

218 
	#S3C_MFC_PARAM_ENC_CHANGE_RESERVED3
 
	`S3C_MFC
(0x1ac)

	)

219 
	#S3C_MFC_PARAM_ENC_CHANGE_RESERVED4
 
	`S3C_MFC
(0x1b0)

	)

220 
	#S3C_MFC_PARAM_ENC_CHANGE_RESERVED5
 
	`S3C_MFC
(0x1b4)

	)

221 
	#S3C_MFC_PARAM_ENC_CHANGE_RESERVED6
 
	`S3C_MFC
(0x1b8)

	)

222 
	#S3C_MFC_PARAM_ENC_CHANGE_RESERVED7
 
	`S3C_MFC
(0x1bc)

	)

224 
	#S3C_MFC_PARAM_RET_ENC_CHANGE_SUCCESS
 
	`S3C_MFC
(0x1c0)

	)

227 
	#S3C_MFC_PARAM_FIRMWARE_VER
 
S3C_MFC_PARAM


	)

228 
	#S3C_MFC_PARAM_FIRMWARE_VER_RESERVED
 
	`S3C_MFC
(0x180Ë

	)

229 
	#S3C_MFC_PARAM_FIRMWARE_VER_GET_FW_VER
 
	`S3C_MFC
(0x1c0)

	)

237 
	#S3C_MFC_SFR_SW_RESET_ADDR
 
	`S3C_MFC
(0x0e00)

	)

238 
	#S3C_MFC_SFR_SIZE
 
	`S3C_MFC
(0x0e00)

	)

246 
	#STREAM_ENDIAN_LITTLE
 (0<<0)

	)

247 
	#STREAM_ENDIAN_BIG
 (1<<0)

	)

248 
	#BUF_STATUS_FULL_EMPTY_CHECK_BIT
 (0<<1)

	)

249 
	#BUF_STATUS_NO_CHECK_BIT
 (1<<1)

	)

252 
	#FRAME_MEM_ENDIAN_LITTLE
 (0<<0)

	)

253 
	#FRAME_MEM_ENDIAN_BIG
 (1<<0)

	)

262 
	#MP4_DBK_DISABLE
 (0<<0)

	)

263 
	#MP4_DBK_ENABLE
 (1<<0)

	)

264 
	#REORDER_DISABLE
 (0<<1)

	)

265 
	#REORDER_ENABLE
 (1<<1)

	)

266 
	#FILEPLAY_ENABLE
 (1<<2)

	)

267 
	#FILEPLAY_DISABLE
 (0<<2)

	)

268 
	#DYNBUFALLOC_ENABLE
 (1<<3)

	)

269 
	#DYNBUFALLOC_DISABLE
 (0<<3)

	)

273 
	#MB_BIT_REPORT_DISABLE
 (0<<0)

	)

274 
	#MB_BIT_REPORT_ENABLE
 (1<<0)

	)

275 
	#SLICE_INFO_REPORT_DISABLE
 (0<<1)

	)

276 
	#SLICE_INFO_REPORT_ENABLE
 (1<<1)

	)

277 
	#AUD_DISABLE
 (0<<2)

	)

278 
	#AUD_ENABLE
 (1<<2)

	)

279 
	#MB_QP_REPORT_DISABLE
 (0<<3)

	)

280 
	#MB_QP_REPORT_ENBLE
 (1<<3)

	)

281 
	#CONST_QP_DISABLE
 (0<<5)

	)

282 
	#CONST_QP_ENBLE
 (1<<5)

	)

285 
	#MPEG4_ENCODE
 0

	)

286 
	#H263_ENCODE
 1

	)

287 
	#H264_ENCODE
 2

	)

290 
	#DATA_PART_DISABLE
 (0<<0)

	)

291 
	#DATA_PART_ENABLE
 (1<<0)

	)

294 
	#ANNEX_T_OFF
 (0<<0)

	)

295 
	#ANNEX_T_ON
 (1<<0)

	)

296 
	#ANNEX_K_OFF
 (0<<1)

	)

297 
	#ANNEX_K_ON
 (1<<1)

	)

298 
	#ANNEX_J_OFF
 (0<<2)

	)

299 
	#ANNEX_J_ON
 (1<<2)

	)

300 
	#ANNEX_I_OFF
 (0<<3)

	)

301 
	#ANNEX_I_ON
 (1<<3)

	)

304 
	#SLICE_MODE_ONE
 (0<<0)

	)

305 
	#SLICE_MODE_MULTIPLE
 (1<<0)

	)

308 
	#RC_DISABLE
 (0<<0Ë

	)

309 
	#RC_ENABLE
 (1<<0)

	)

310 
	#SKIP_DISABLE
 (1<<31)

	)

311 
	#SKIP_ENABLE
 (0<<31)

	)

314 
	#FMO_DISABLE
 (0<<0)

	)

315 
	#FMO_ENABLE
 (1<<0)

	)

318 
	#USER_QP_MAX_DISABLE
 (0<<0)

	)

319 
	#USER_QP_MAX_ENABLE
 (1<<0)

	)

320 
	#USE_GAMMA_DISABLE
 (0<<1)

	)

321 
	#USE_GAMMA_ENABLE
 (1<<1)

	)

	@s3c_mfc.c

1 
	#LOG_TAG
 "s3c_mfc.c"

	)

2 
	~"oßl.h
"

3 
	~"s3c.h
"

11 
	~"ªgs-˛ock.h
"

12 
	~"ªgs-mfc.h
"

13 
	~"medü.h
"

16 #ifde‡
CONFIG_S3C6400_PDFW


17 
	~<asm/¨ch/pd.h
>

18 #i‡
deföed
(
CONFIG_S3C6400_KDPMD
Ë|| deföed(
CONFIG_S3C6400_KDPMD_MODULE
)

19 
	~<asm/¨ch/kdpmd.h
>

23 
	#S3C_MFC_PHYS_BUFFER_SET


	)

25 
	~"s3c_mfc_ba£.h
"

26 
	~"s3c_mfc_c⁄fig.h
"

27 
	~"s3c_mfc_öô_hw.h
"

28 
	~"s3c_mfc_ö°™˚.h
"

29 
	~"s3c_mfc_ö°_poﬁ.h
"

30 
	~"s3c_mfc.h
"

31 
	~"s3c_mfc_yuv_buf_m™agî.h
"

32 
	~"s3c_mfc_d©abuf.h
"

33 
	~"s3c_mfc_s‰.h
"

34 
	~"s3c_mfc_öå_nŸi.h
"

35 
	~"s3c_mfc_∑øms.h
"

37 
˛k
 *
	gs3c_mfc_h˛k
;

38 
˛k
 *
	gs3c_mfc_s˛k
;

39 
˛k
 *
	gs3c_mfc_p˛k
;

41 
	gs3c_mfc_›íh™dÀ_cou¡
 = 0;

44 
muãx
 
	gs3c_mfc_muãx
;

45 
	gs3c_mfc_öå_ty≥
 = 0;

47 
	#S3C_MFC_SAVE_START_ADDR
 0x100

	)

48 
	#S3C_MFC_SAVE_END_ADDR
 0x200

	)

49 
	gs3c_mfc_ßve
[
S3C_MFC_SAVE_END_ADDR
 - 
S3C_MFC_SAVE_START_ADDR
];

51 
s3c_mfc_gë_c⁄fig_∑øms
(
s3c_mfc_ö°_c⁄ãxt_t
 *
pMfcIn°
, 
s3c_mfc_¨gs_t
 *
¨gs
);

52 
s3c_mfc_£t_c⁄fig_∑øms
(
s3c_mfc_ö°_c⁄ãxt_t
 *
pMfcIn°
, 
s3c_mfc_¨gs_t
 *
¨gs
);

54 
	s_MFC_HANDLE
 {

55 
s3c_mfc_ö°_c⁄ãxt_t
 *
	mmfc_ö°
;

57 #i‡(
deföed
(
DIVX_ENABLE
) && (DIVX_ENABLE == 1))

58 *
	mpMV
;

59 *
	mpMBTy≥
;

61 } 
	ts3c_mfc_h™dÀ_t
;

64 #ifde‡
CONFIG_S3C6400_PDFW


65 
	$s3c_mfc_bef‹e_pdoff
()

66 { 
	`__D
("\n");

67 
	`mfc_debug
("mfc context saving beforeÖdoff\n");

69 
	}
}

71 
	$s3c_mfc_a·î_pd⁄
()

72 { 
	`__D
("\n");

73 
	`mfc_debug
("mfc initializationáfterÖdon\n");

75 
	}
}

77 
pm_devty≥
 
	gs3c_mfc_pmdev
 = {

78 .
«me
 = "mfc",

79 .
	g°©e
 = 
DEV_IDLE
,

80 .
	gbef‹e_pdoff
 = 
s3c_mfc_bef‹e_pdoff
,

81 .
	ga·î_pd⁄
 = 
s3c_mfc_a·î_pd⁄
,

86 
DECLARE_WAIT_QUEUE_HEAD
(
s3c_mfc_waô_queue
);

88 
ªsour˚
 *
	gs3c_mfc_mem
;

89 
__iomem
 *
	gs3c_mfc_s‰_ba£_vút_addr
;

91 
dma_addr_t
 
	gs3c_mfc_phys_buf„r
;

93 
úqªtu∫_t
 
	$s3c_mfc_úq
(
úq
, *
dev_id
)

95 
ötRós⁄
;

96 
s3c_mfc_ö°_c⁄ãxt_t
 *
pMfcIn°
;

98 
pMfcIn°
 = (
s3c_mfc_ö°_c⁄ãxt_t
 *)
dev_id
;

100 
ötRós⁄
 = 
	`s3c_mfc_öå_ªas⁄
();

103 i‡(
ötRós⁄
 & 
S3C_MFC_INTR_ENABLE_RESET
) {

104 
s3c_mfc_öå_ty≥
 = 
ötRós⁄
;

105 
	`wake_up_öãºu±ibÀ
(&
s3c_mfc_waô_queue
);

108 
	`s3c_mfc_˛ór_öå
();

110  
IRQ_HANDLED
;

111 
	}
}

113 
	$s3c_mfc_›í
(
öode
 *öode, 
fûe
 *file)

114 { 
	`__D
("\n");

115 
s3c_mfc_h™dÀ_t
 *
h™dÀ
;

120 
	`muãx_lock
(&
s3c_mfc_muãx
);

122 
	`˛k_íabÀ
(
s3c_mfc_h˛k
);

123 
	`˛k_íabÀ
(
s3c_mfc_s˛k
);

124 
	`˛k_íabÀ
(
s3c_mfc_p˛k
);

126 
s3c_mfc_›íh™dÀ_cou¡
++;

127 i‡(
s3c_mfc_›íh™dÀ_cou¡
 == 1) {

128 i‡(
	`s3c_mfc_öô_hw
(Ë=
FALSE
)

129  -
ENODEV
;

133 
h™dÀ
 = (
	`ty≥of
(h™dÀ))
	`kzÆloc
((*h™dÀ), 
GFP_KERNEL
);

134 i‡(!
h™dÀ
) {

135 
	`mfc_debug
("mfc openÉrror\n");

136 
îr1
;

142 
h™dÀ
->
mfc_ö°
 = 
	`s3c_mfc_ö°_¸óã
();

143 i‡(
h™dÀ
->
mfc_ö°
 =
NULL
) {

144 
	`mfc_îr
("failÅo mfc instanceállocation\n");

145 
îr2
;

152 
fûe
->
¥iv©e_d©a
 = (*)
h™dÀ
;

153 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

154 
	`mfc_debug
("mfc open success\n");

157 
îr2
:

158 
	`k‰ì
(
h™dÀ
);

159 
îr1
:

160 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

161  -
EPERM
;

162 
	}
}

165 
	$s3c_mfc_ªÀa£
(
öode
 *öode, 
fûe
 *file)

166 { 
	`__D
("\n");

167 
s3c_mfc_h™dÀ_t
 *
h™dÀ
 = 
NULL
;

169 
	`muãx_lock
(&
s3c_mfc_muãx
);

171 
h™dÀ
 = (
	`ty≥of
(h™dÀ))
fûe
->
¥iv©e_d©a
;

172 i‡(
h™dÀ
->
mfc_ö°
 =
NULL
) {

173 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

174  -
EPERM
;

177 
	`mfc_debug
("dñëög in°™˚Çumbî = %d\n", 
h™dÀ
->
mfc_ö°
->
ö°_no
);

179 
	`s3c_mfc_ö°_dñ
(
h™dÀ
->
mfc_ö°
);

181 
s3c_mfc_›íh™dÀ_cou¡
--;

182 i‡(
s3c_mfc_›íh™dÀ_cou¡
 == 0) {

184 #i‡
	`deföed
(
CONFIG_S3C6400_KDPMD
Ë|| deföed(
CONFIG_S3C6400_KDPMD_MODULE
)

185 
s3c_mfc_pmdev
.
°©e
 = 
DEV_IDLE
;

186 
	`kdpmd_£t_evít
(
s3c_mfc_pmdev
.
devid
, 
KDPMD_DRVCLOSE
);

187 
	`kdpmd_wakeup
();

188 
	`kdpmd_waô
(
s3c_mfc_pmdev
.
devid
);

191 
	`˛k_dißbÀ
(
s3c_mfc_h˛k
);

192 
	`˛k_dißbÀ
(
s3c_mfc_s˛k
);

193 
	`˛k_dißbÀ
(
s3c_mfc_p˛k
);

196 
	`k‰ì
(
fûe
->
¥iv©e_d©a
);

197 
fûe
->
¥iv©e_d©a
 = 
NULL
;

198 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

201 
	}
}

204 
ssize_t
 
	$s3c_mfc_wrôe
(
fûe
 *fûe, c⁄° *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
)

205 { 
	`__D
("\n");

207 
	}
}

209 
ssize_t
 
	$s3c_mfc_ªad
(
fûe
 *fûe, *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
)

210 { 
	`__D
("\n");

212 
	}
}

214 
	$s3c_mfc_io˘l
(
öode
 *öode, 
fûe
 *fûe, 
cmd
, 
¨g
)

215 { 
	`__D
("\n");

216 
ªt
 = 0;

217 
buf_size
;

218 
nSåmLí
, 
nHdrLí
;

219 
out
;

220 
yuv_size
;

221 
size
;

223 *
ãmp
;

224 
vú_mv_addr
;

225 
vú_mb_ty≥_addr
;

226 
tmp
;

227 
ö_u§_d©a
, 
yuv_buf„r
, 
run_ödex
, 
out_buf_size
, 
d©abuf_vaddr
, 
off£t
;

228 
d©abuf_∑ddr
;

229 *
OutBuf
 = 
NULL
;

230 *
°¨t
;

232 
s3c_mfc_ö°_c⁄ãxt_t
 *
pMfcIn°
;

233 
s3c_mfc_h™dÀ_t
 *
h™dÀ
;

234 
s3c_mfc_codec_mode_t
 
codec_mode
 = 0;

235 
s3c_mfc_¨gs_t
 
¨gs
;

236 
s3c_mfc_íc_öfo_t
 
íc_öfo
;

241 
h™dÀ
 = (
s3c_mfc_h™dÀ_t
 *)
fûe
->
¥iv©e_d©a
;

242 i‡(
h™dÀ
->
mfc_ö°
 =
NULL
) {

243  -
EFAULT
;

246 
pMfcIn°
 = 
h™dÀ
->
mfc_ö°
;

248 
cmd
) {

249 
S3C_MFC_IOCTL_MFC_MPEG4_ENC_INIT
:

250 
S3C_MFC_IOCTL_MFC_H264_ENC_INIT
:

251 
S3C_MFC_IOCTL_MFC_H263_ENC_INIT
:

252 
	`muãx_lock
(&
s3c_mfc_muãx
);

254 
	`mfc_debug
("cmd = %d\n", 
cmd
);

256 
out
 = 
	`c›y_‰om_u£r
(&
¨gs
.
íc_öô
, (
s3c_mfc_íc_öô_¨g_t
 *)
¨g
,

257 (
s3c_mfc_íc_öô_¨g_t
));

259 i‡–
cmd
 =
S3C_MFC_IOCTL_MFC_MPEG4_ENC_INIT
 )

260 
codec_mode
 = 
MP4_ENC
;

261 i‡–
cmd
 =
S3C_MFC_IOCTL_MFC_H264_ENC_INIT
 )

262 
codec_mode
 = 
AVC_ENC
;

263 i‡–
cmd
 =
S3C_MFC_IOCTL_MFC_H263_ENC_INIT
 )

264 
codec_mode
 = 
H263_ENC
;

269 
íc_öfo
.
width
 = 
¨gs
.
íc_öô
.
ö_width
;

270 
íc_öfo
.
height
 = 
¨gs
.
íc_öô
.
ö_height
;

271 
íc_öfo
.
bôøã
 = 
¨gs
.
íc_öô
.
ö_bôøã
;

272 
íc_öfo
.
g›_numbî
 = 
¨gs
.
íc_öô
.
ö_g›Num
;

273 
íc_öfo
.
‰ame_øã_ªsiduÆ
 = 
¨gs
.
íc_öô
.
ö_‰ameR©eRes
;

274 
íc_öfo
.
‰ame_øã_divisi⁄
 = 
¨gs
.
íc_öô
.
ö_‰ameR©eDiv
;

282 
ªt
 = 
	`s3c_mfc_ö°™˚_öô_íc
(
pMfcIn°
, 
codec_mode
, &
íc_öfo
);

284 
¨gs
.
íc_öô
.
ªt_code
 = 
ªt
;

285 
out
 = 
	`c›y_to_u£r
((
s3c_mfc_íc_öô_¨g_t
 *)
¨g
, &
¨gs
.
íc_öô
,

286 (
s3c_mfc_íc_öô_¨g_t
));

288 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

291 
S3C_MFC_IOCTL_MFC_MPEG4_ENC_EXE
:

292 
S3C_MFC_IOCTL_MFC_H264_ENC_EXE
:

293 
S3C_MFC_IOCTL_MFC_H263_ENC_EXE
:

294 
	`muãx_lock
(&
s3c_mfc_muãx
);

296 
out
 = 
	`c›y_‰om_u£r
(&
¨gs
.
íc_exe
, (
s3c_mfc_íc_exe_¨g_t
 *)
¨g
,

297 (
s3c_mfc_íc_exe_¨g_t
));

299 
tmp
 = (
pMfcIn°
->
width
 *ÖMfcIn°->
height
 * 3) >> 1;

301 
°¨t
 = 
pMfcIn°
->
yuv_buf„r
;

302 
size
 = 
tmp
 * 
pMfcIn°
->
yuv_buf„r_cou¡
;

303 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_TO_DEVICE
);

308 
ªt
 = 
	`s3c_mfc_ö°_íc
(
pMfcIn°
, &
nSåmLí
, &
nHdrLí
);

310 
°¨t
 = 
pMfcIn°
->
°ªam_buf„r
;

311 
size
 = 
pMfcIn°
->
°ªam_buf„r_size
;

312 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_FROM_DEVICE
);

314 
¨gs
.
íc_exe
.
ªt_code
 = 
ªt
;

315 i‡(
ªt
 =
S3C_MFC_INST_RET_OK
) {

316 
¨gs
.
íc_exe
.
out_ícoded_size
 = 
nSåmLí
;

317 
¨gs
.
íc_exe
.
out_hódî_size
 = 
nHdrLí
;

319 
out
 = 
	`c›y_to_u£r
((
s3c_mfc_íc_exe_¨g_t
 *)
¨g
, &
¨gs
.
íc_exe
,

320 (
s3c_mfc_íc_exe_¨g_t
));

322 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

325 
S3C_MFC_IOCTL_MFC_MPEG4_DEC_INIT
:

326 
S3C_MFC_IOCTL_MFC_H264_DEC_INIT
:

327 
S3C_MFC_IOCTL_MFC_H263_DEC_INIT
:

328 
S3C_MFC_IOCTL_MFC_VC1_DEC_INIT
:

329 
	`muãx_lock
(&
s3c_mfc_muãx
);

331 
out
 = 
	`c›y_‰om_u£r
(&
¨gs
.
dec_öô
, (
s3c_mfc_dec_öô_¨g_t
 *)
¨g
,

332 (
s3c_mfc_dec_öô_¨g_t
));

334 i‡–
cmd
 =
S3C_MFC_IOCTL_MFC_MPEG4_DEC_INIT
 )

335 
codec_mode
 = 
MP4_DEC
;

336 i‡–
cmd
 =
S3C_MFC_IOCTL_MFC_H264_DEC_INIT
 )

337 
codec_mode
 = 
AVC_DEC
;

338 i‡–
cmd
 =
S3C_MFC_IOCTL_MFC_H263_DEC_INIT
)

339 
codec_mode
 = 
H263_DEC
;

341 
codec_mode
 = 
VC1_DEC
;

347 
ªt
 = 
	`s3c_mfc_ö°_öô_dec
(
pMfcIn°
, 
codec_mode
,

348 
¨gs
.
dec_öô
.
ö_°rmSize
);

350 
¨gs
.
dec_öô
.
ªt_code
 = 
ªt
;

351 i‡(
ªt
 =
S3C_MFC_INST_RET_OK
) {

352 
¨gs
.
dec_öô
.
out_width
 = 
pMfcIn°
->
width
;

353 
¨gs
.
dec_öô
.
out_height
 = 
pMfcIn°
->
height
;

354 
¨gs
.
dec_öô
.
out_buf_width
 = 
pMfcIn°
->
buf_width
;

355 
¨gs
.
dec_öô
.
out_buf_height
 = 
pMfcIn°
->
buf_height
;

357 
out
 = 
	`c›y_to_u£r
((
s3c_mfc_dec_öô_¨g_t
 *)
¨g
, &
¨gs
.
dec_öô
,

358 (
s3c_mfc_dec_öô_¨g_t
));

360 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

363 
S3C_MFC_IOCTL_MFC_MPEG4_DEC_EXE
:

364 
S3C_MFC_IOCTL_MFC_H264_DEC_EXE
:

365 
S3C_MFC_IOCTL_MFC_H263_DEC_EXE
:

366 
S3C_MFC_IOCTL_MFC_VC1_DEC_EXE
:

367 
	`muãx_lock
(&
s3c_mfc_muãx
);

369 
out
 = 
	`c›y_‰om_u£r
(&
¨gs
.
dec_exe
, (
s3c_mfc_dec_exe_¨g_t
 *)
¨g
,

370 (
s3c_mfc_dec_exe_¨g_t
));

372 
tmp
 = (
pMfcIn°
->
width
 *ÖMfcIn°->
height
 * 3) >> 1;

374 
°¨t
 = 
pMfcIn°
->
°ªam_buf„r
;

375 
size
 = 
pMfcIn°
->
°ªam_buf„r_size
;

376 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_TO_DEVICE
);

378 
ªt
 = 
	`s3c_mfc_ö°_dec
(
pMfcIn°
, 
¨gs
.
dec_exe
.
ö_°rmSize
);

380 
°¨t
 = 
pMfcIn°
->
yuv_buf„r
;

381 
size
 = 
tmp
 * 
pMfcIn°
->
yuv_buf„r_cou¡
;

382 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_FROM_DEVICE
);

384 
¨gs
.
dec_exe
.
ªt_code
 = 
ªt
;

385 
out
 = 
	`c›y_to_u£r
((
s3c_mfc_dec_exe_¨g_t
 *)
¨g
, &
¨gs
.
dec_exe
,

386 (
s3c_mfc_dec_exe_¨g_t
));

388 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

391 
S3C_MFC_IOCTL_MFC_GET_LINE_BUF_ADDR
:

392 
	`muãx_lock
(&
s3c_mfc_muãx
);

394 
out
 = 
	`c›y_‰om_u£r
(&
¨gs
.
gë_buf_addr
,

395 (
s3c_mfc_gë_buf_addr_¨g_t
 *)
¨g
, (s3c_mfc_get_buf_addr_arg_t));

397 
ªt
 = 
	`s3c_mfc_ö°_gë_löe_buff
(
pMfcIn°
, &
OutBuf
, &
buf_size
);

399 
¨gs
.
gë_buf_addr
.
out_buf_size
 = 
buf_size
;

400 
¨gs
.
gë_buf_addr
.
out_buf_addr
 =árgs.gë_buf_addr.
ö_u§_d©a
 + (
OutBuf
 - 
	`s3c_mfc_gë_d©abuf_vút_addr
());

401 
¨gs
.
gë_buf_addr
.
ªt_code
 = 
ªt
;

403 
out
 = 
	`c›y_to_u£r
((
s3c_mfc_gë_buf_addr_¨g_t
 *)
¨g
,

404 &
¨gs
.
gë_buf_addr
, (
s3c_mfc_gë_buf_addr_¨g_t
));

406 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

409 
S3C_MFC_IOCTL_MFC_GET_YUV_BUF_ADDR
:

410 
	`muãx_lock
(&
s3c_mfc_muãx
);

412 
out
 = 
	`c›y_‰om_u£r
(&
¨gs
.
gë_buf_addr
,

413 (
s3c_mfc_gë_buf_addr_¨g_t
 *)
¨g
,

414 (
s3c_mfc_gë_buf_addr_¨g_t
));

416 i‡(
pMfcIn°
->
yuv_buf„r
 =
NULL
) {

417 
	`mfc_îr
("mfc frame buffer isÇot internallyállocated yet\n");

418 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

419  -
EFAULT
;

423 
pMfcIn°
->
codec_mode
) {

424 
MP4_DEC
:

425 
AVC_DEC
:

426 
VC1_DEC
:

427 
H263_DEC
:

429 
yuv_size
 = (
pMfcIn°
->
buf_width
 *ÖMfcIn°->
buf_height
 * 3) >> 1;

430 
¨gs
.
gë_buf_addr
.
out_buf_size
 = 
yuv_size
;

432 
ö_u§_d©a
 = ()
¨gs
.
gë_buf_addr
.in_usr_data;

433 
yuv_buf„r
 = ()
pMfcIn°
->yuv_buffer;

434 
run_ödex
 = 
pMfcIn°
->run_index;

435 
out_buf_size
 = 
¨gs
.
gë_buf_addr
.out_buf_size;

436 
d©abuf_vaddr
 = ()
	`s3c_mfc_gë_d©abuf_vút_addr
();

437 
off£t
 = 
yuv_buf„r
 + 
run_ödex
 * 
out_buf_size
 - 
d©abuf_vaddr
;

439 #i‡(
S3C_MFC_ROTATE_ENABLE
 == 1)

440 i‡((
pMfcIn°
->
codec_mode
 !
VC1_DEC
) &&

441 (
pMfcIn°
->
po°_rŸ©i⁄_mode
 & 0x0010)) {

442 
yuv_buff_˙t
 = 
pMfcIn°
->
yuv_buf„r_cou¡
;

443 
off£t
 = 
yuv_buf„r
 + 
yuv_buff_˙t
 * 
out_buf_size
 - 
d©abuf_vaddr
;

446 
¨gs
.
gë_buf_addr
.
out_buf_addr
 = 
ö_u§_d©a
 + 
off£t
;

449 
MP4_ENC
:

450 
AVC_ENC
:

451 
H263_ENC
:

453 
yuv_size
 = (
pMfcIn°
->
width
 *ÖMfcIn°->
height
 * 3) >> 1;

454 
ö_u§_d©a
 = 
¨gs
.
gë_buf_addr
.in_usr_data;

455 
run_ödex
 = 
pMfcIn°
->run_index;

456 
yuv_buf„r
 = ()
pMfcIn°
->yuv_buffer;

457 
d©abuf_vaddr
 = ()
	`s3c_mfc_gë_d©abuf_vút_addr
();

458 
off£t
 = 
run_ödex
 * 
yuv_size
 + (
yuv_buf„r
 - 
d©abuf_vaddr
);

460 
¨gs
.
gë_buf_addr
.
out_buf_addr
 = 
ö_u§_d©a
 + 
off£t
;

464 
¨gs
.
gë_buf_addr
.
ªt_code
 = 
S3C_MFC_INST_RET_OK
;

465 
out
 = 
	`c›y_to_u£r
((
s3c_mfc_gë_buf_addr_¨g_t
 *)
¨g
, &
¨gs
.
gë_buf_addr
, (s3c_mfc_get_buf_addr_arg_t));

467 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

470 
S3C_MFC_IOCTL_MFC_GET_PHY_FRAM_BUF_ADDR
:

471 
	`muãx_lock
(&
s3c_mfc_muãx
);

473 
out
 = 
	`c›y_‰om_u£r
(&
¨gs
.
gë_buf_addr
,

474 (
s3c_mfc_gë_buf_addr_¨g_t
 *)
¨g
,

475 (
s3c_mfc_gë_buf_addr_¨g_t
));

477 
yuv_size
 = (
pMfcIn°
->
buf_width
 *ÖMfcIn°->
buf_height
 * 3) >> 1;

478 
¨gs
.
gë_buf_addr
.
out_buf_size
 = 
yuv_size
;

479 
yuv_buf„r
 = ()
pMfcIn°
->yuv_buffer;

480 
run_ödex
 = 
pMfcIn°
->run_index;

481 
out_buf_size
 = 
¨gs
.
gë_buf_addr
.out_buf_size;

482 
d©abuf_vaddr
 = ()
	`s3c_mfc_gë_d©abuf_vút_addr
();

483 
d©abuf_∑ddr
 = ()
S3C_MFC_BASEADDR_DATA_BUF
;

484 
off£t
 = 
yuv_buf„r
 + 
run_ödex
 * 
out_buf_size
 - 
d©abuf_vaddr
;

486 #i‡(
S3C_MFC_ROTATE_ENABLE
 == 1)

487 i‡((
pMfcIn°
->
codec_mode
 !
VC1_DEC
Ë&& (pMfcIn°->
po°_rŸ©i⁄_mode
 & 0x0010)) {

488 
yuv_buff_˙t
 = 
pMfcIn°
->
yuv_buf„r_cou¡
;

489 
off£t
 = 
yuv_buf„r
 + 
yuv_buff_˙t
 * 
out_buf_size
 - 
d©abuf_vaddr
;

492 
¨gs
.
gë_buf_addr
.
out_buf_addr
 = 
d©abuf_∑ddr
 + 
off£t
;

493 
¨gs
.
gë_buf_addr
.
ªt_code
 = 
S3C_MFC_INST_RET_OK
;

495 
out
 = 
	`c›y_to_u£r
((
s3c_mfc_gë_buf_addr_¨g_t
 *)
¨g
,

496 &
¨gs
.
gë_buf_addr
, (
s3c_mfc_gë_buf_addr_¨g_t
));

498 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

501 
S3C_MFC_IOCTL_MFC_GET_MPEG4_ASP_PARAM
:

502 #i‡(
	`deföed
(
DIVX_ENABLE
) && (DIVX_ENABLE == 1))

504 
out
 = 
	`c›y_‰om_u£r
(&
¨gs
.
m≥g4_a•_∑øm
, (
s3c_mfc_gë_m≥g4a•_¨g_t
 *)
¨g
, \

505 (
s3c_mfc_gë_m≥g4a•_¨g_t
));

507 
ªt
 = 
S3C_MFC_INST_RET_OK
;

508 
¨gs
.
m≥g4_a•_∑øm
.
ªt_code
 = 
S3C_MFC_INST_RET_OK
;

509 
¨gs
.
m≥g4_a•_∑øm
.
mp4a•_v›_time_ªs
 = 
pMfcIn°
->
RET_DEC_SEQ_INIT_BAK_MP4ASP_VOP_TIME_RES
;

510 
¨gs
.
m≥g4_a•_∑øm
.
byã_c⁄sumed
 = 
pMfcIn°
->
RET_DEC_PIC_RUN_BAK_BYTE_CONSUMED
;

511 
¨gs
.
m≥g4_a•_∑øm
.
mp4a•_fcode
 = 
pMfcIn°
->
RET_DEC_PIC_RUN_BAK_MP4ASP_FCODE
;

512 
¨gs
.
m≥g4_a•_∑øm
.
mp4a•_time_ba£_œ°
 = 
pMfcIn°
->
RET_DEC_PIC_RUN_BAK_MP4ASP_TIME_BASE_LAST
;

513 
¨gs
.
m≥g4_a•_∑øm
.
mp4a•_n⁄b_time_œ°
 = 
pMfcIn°
->
RET_DEC_PIC_RUN_BAK_MP4ASP_NONB_TIME_LAST
;

514 
¨gs
.
m≥g4_a•_∑øm
.
mp4a•_åd
 = 
pMfcIn°
->
RET_DEC_PIC_RUN_BAK_MP4ASP_MP4ASP_TRD
;

516 
¨gs
.
m≥g4_a•_∑øm
.
mv_addr
 = (¨gs.m≥g4_a•_∑øm.
ö_u§_m≠≥d_addr
 + 
S3C_MFC_STREAM_BUF_SIZE
) \

517 + (
pMfcIn°
->
mv_mbyã_addr
 -ÖMfcIn°->
phys_addr_yuv_buf„r
);

518 
¨gs
.
m≥g4_a•_∑øm
.
mb_ty≥_addr
 =árgs.m≥g4_a•_∑øm.
mv_addr
 + 
S3C_MFC_MAX_MV_SIZE
;

519 
¨gs
.
m≥g4_a•_∑øm
.
mv_size
 = 
S3C_MFC_MAX_MV_SIZE
;

520 
¨gs
.
m≥g4_a•_∑øm
.
mb_ty≥_size
 = 
S3C_MFC_MAX_MBYTE_SIZE
;

522 
vú_mv_addr
 = ()((
pMfcIn°
->
°ªam_buf„r
 + 
S3C_MFC_STREAM_BUF_SIZE
) + \

523 (
pMfcIn°
->
mv_mbyã_addr
 -ÖMfcIn°->
phys_addr_yuv_buf„r
));

524 
vú_mb_ty≥_addr
 = 
vú_mv_addr
 + 
S3C_MFC_MAX_MV_SIZE
;

526 
out
 = 
	`c›y_to_u£r
((
s3c_mfc_gë_m≥g4a•_¨g_t
 *)
¨g
, &
¨gs
.
m≥g4_a•_∑øm
, \

527 (
s3c_mfc_gë_m≥g4a•_¨g_t
));

531 
S3C_MFC_IOCTL_MFC_GET_CONFIG
:

532 
	`muãx_lock
(&
s3c_mfc_muãx
);

534 
out
 = 
	`c›y_‰om_u£r
(&
¨gs
, (
s3c_mfc_¨gs_t
 *)
¨g
, (s3c_mfc_args_t));

536 
ªt
 = 
	`s3c_mfc_gë_c⁄fig_∑øms
(
pMfcIn°
, &
¨gs
);

538 
out
 = 
	`c›y_to_u£r
((
s3c_mfc_¨gs_t
 *)
¨g
, &
¨gs
, (s3c_mfc_args_t));

540 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

543 
S3C_MFC_IOCTL_MFC_SET_CONFIG
:

544 
	`muãx_lock
(&
s3c_mfc_muãx
);

546 
out
 = 
	`c›y_‰om_u£r
(&
¨gs
, (
s3c_mfc_¨gs_t
 *)
¨g
, (s3c_mfc_args_t));

548 
ªt
 = 
	`s3c_mfc_£t_c⁄fig_∑øms
(
pMfcIn°
, &
¨gs
);

550 
out
 = 
	`c›y_to_u£r
((
s3c_mfc_¨gs_t
 *)
¨g
, &
¨gs
, (s3c_mfc_args_t));

552 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

555 
S3C_MFC_IOCTL_VIRT_TO_PHYS
:

556 
ãmp
 = 
	`__vút_to_phys
((*)
¨g
);

557  ()
ãmp
;

561 
	`muãx_lock
(&
s3c_mfc_muãx
);

562 
	`mfc_debug
("ªque°ed io˘»comm™d i†nŸ deföed (io˘»cmd = 0x%x)\n", 
cmd
);

563 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

564  -
ENOIOCTLCMD
;

567 
ªt
) {

568 
S3C_MFC_INST_RET_OK
:

571  -
EPERM
;

573  -
EPERM
;

574 
	}
}

576 
	$s3c_mfc_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
)

577 { 
	`__D
("\n");

578 
size
 = 
vma
->
vm_íd
 - vma->
vm_°¨t
;

579 
maxSize
;

580 
∑geFømeNo
;

582 
∑geFømeNo
 = 
	`__phys_to_p‚
(
S3C_MFC_BASEADDR_DATA_BUF
);

584 
maxSize
 = 
S3C_MFC_DATA_BUF_SIZE
 + 
PAGE_SIZE
 - (S3C_MFC_DATA_BUF_SIZE % PAGE_SIZE);

586 i‡(
size
 > 
maxSize
) {

587  -
EINVAL
;

590 
vma
->
vm_Êags
 |
VM_RESERVED
 | 
VM_IO
;

596 i‡(
	`ªm≠_p‚_ønge
(
vma
, vma->
vm_°¨t
, 
∑geFømeNo
, 
size
, vma->
vm_∑ge_¥Ÿ
)) {

597 
	`mfc_îr
("failÅoÑemap\n");

598  -
EAGAIN
;

602 
	}
}

605 
fûe_›î©i⁄s
 
	gs3c_mfc_f›s
 = {

606 
ow√r
: 
THIS_MODULE
,

607 
›í
: 
s3c_mfc_›í
,

608 
ªÀa£
: 
s3c_mfc_ªÀa£
,

609 
io˘l
: 
s3c_mfc_io˘l
,

610 
ªad
: 
s3c_mfc_ªad
,

611 
wrôe
: 
s3c_mfc_wrôe
,

612 
mm≠
: 
s3c_mfc_mm≠
,

616 
miscdevi˚
 
	gs3c_mfc_miscdev
 = {

617 
mö‹
: 252,

618 
«me
: "s3c-mfc",

619 
f›s
: &
s3c_mfc_f›s


622 
BOOL
 
	$s3c_mfc_£tup_˛ock
()

623 { 
	`__D
("\n");

624 
mfc_˛k
;

627 
mfc_˛k
 = 
	`ªadl
(
S3C_CLK_DIV0
);

628 
mfc_˛k
 |= (1 << 28);

629 
	`__øw_wrôñ
(
mfc_˛k
, 
S3C_CLK_DIV0
);

631  
TRUE
;

633 
	}
}

635 
	$s3c_mfc_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

636 { 
	`__D
("\n");

637 
size
;

638 
ªt
;

639 
ªsour˚
 *
ªs
;

643 
s3c_mfc_h˛k
 = 
	`˛k_gë
(&
pdev
->
dev
, "hclk_mfc");

644 i‡(!
s3c_mfc_h˛k
 || 
	`IS_ERR
(s3c_mfc_hclk)) {

645 
	`mfc_îr
("failedÅo get mfc hclk source\n");

646  -
ENOENT
;

648 
	`˛k_íabÀ
(
s3c_mfc_h˛k
);

650 
s3c_mfc_s˛k
 = 
	`˛k_gë
(&
pdev
->
dev
, "sclk_mfc");

651 i‡(!
s3c_mfc_s˛k
 || 
	`IS_ERR
(s3c_mfc_sclk)) {

652 
	`mfc_îr
("failedÅo get mfc sclk source\n");

653  -
ENOENT
;

655 
	`˛k_íabÀ
(
s3c_mfc_s˛k
);

657 
s3c_mfc_p˛k
 = 
	`˛k_gë
(&
pdev
->
dev
, "pclk_mfc");

658 i‡(!
s3c_mfc_p˛k
 || 
	`IS_ERR
(s3c_mfc_pclk)) {

659 
	`mfc_îr
("failedÅo get mfcÖclk source\n");

660  -
ENOENT
;

662 
	`˛k_íabÀ
(
s3c_mfc_p˛k
);

664 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

665 i‡(
ªs
 =
NULL
) {

666 
	`mfc_îr
("failedÅo get memoryÑegionÑesouce\n");

667  -
ENOENT
;

670 
size
 = (
ªs
->
íd
-ªs->
°¨t
)+1;

671 
s3c_mfc_mem
 = 
	`ªque°_mem_ªgi⁄
(
ªs
->
°¨t
, 
size
, 
pdev
->
«me
);

672 i‡(
s3c_mfc_mem
 =
NULL
) {

673 
	`mfc_îr
("failedÅo get memoryÑegion\n");

674  -
ENOENT
;

678 
s3c_mfc_s‰_ba£_vút_addr
 = 
	`i‹em≠
(
ªs
->
°¨t
, 
size
);

679 i‡(
s3c_mfc_s‰_ba£_vút_addr
 == 0) {

680 
	`mfc_îr
("failedÅo ioremap()Ñegion\n");

681  -
EINVAL
;

684 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IRQ
, 0);

685 i‡(
ªs
 =
NULL
) {

686 
	`mfc_îr
("failedÅo get irqÑesource\n");

687  -
ENOENT
;

690 
ªt
 = 
	`ªque°_úq
(
ªs
->
°¨t
, 
s3c_mfc_úq
, 
IRQF_DISABLED
, 
pdev
->
«me
,Ödev);

691 i‡(
ªt
 != 0) {

692 
	`mfc_îr
("ÁûedÅÿö°Æ»úq (%d)\n", 
ªt
);

693  
ªt
;

696 
s3c_mfc_phys_buf„r
 = 
	`s3c_gë_medü_mem‹y
(
S3C_MDEV_MFC
);

703 
	`muãx_öô
(&
s3c_mfc_muãx
);

706 i‡(
	`s3c_mfc_£tup_˛ock
(Ë=
FALSE
)

707  -
ENODEV
;

712 i‡(
	`s3c_mfc_£tup_mem‹y
(Ë=
FALSE
)

713  -
ENOMEM
;

718 i‡(
	`s3c_mfc_öô_hw
(Ë=
FALSE
)

719  -
ENODEV
;

721 
ªt
 = 
	`misc_ªgi°î
(&
s3c_mfc_miscdev
);

723 
	`˛k_dißbÀ
(
s3c_mfc_h˛k
);

724 
	`˛k_dißbÀ
(
s3c_mfc_s˛k
);

725 
	`˛k_dißbÀ
(
s3c_mfc_p˛k
);

728 
	}
}

730 
	$s3c_mfc_ªmove
(
∂©f‹m_devi˚
 *
dev
)

731 { 
	`__D
("\n");

732 i‡(
s3c_mfc_mem
 !
NULL
) {

735 
	`ªÀa£_mem_ªgi⁄
(
s3c_mfc_mem
->
°¨t
,

736 
s3c_mfc_mem
->
íd
 - s3c_mfc_mem->
°¨t
 + 1);

737 
s3c_mfc_mem
 = 
NULL
;

740 
	`‰ì_úq
(
IRQ_MFC
, 
dev
);

742 
	`misc_dîegi°î
(&
s3c_mfc_miscdev
);

744 
	}
}

746 
	$s3c_mfc_su•íd
(
∂©f‹m_devi˚
 *
dev
, 
pm_mesßge_t
 
°©e
)

747 { 
	`__D
("\n");

749 
ö°_no
;

750 
is_mfc_⁄
 = 0;

751 
i
, 
ödex
 = 0;

753 
s3c_mfc_ö°_c⁄ãxt_t
 *
mfcö°_˘x
;

754 
dwMfcBa£
;

756 
	`muãx_lock
(&
s3c_mfc_muãx
);

758 
is_mfc_⁄
 = 0;

764 
ö°_no
 = 0; in°_nÿ< 
S3C_MFC_NUM_INSTANCES_MAX
; inst_no++) {

765 
mfcö°_˘x
 = 
	`s3c_mfc_ö°_gë_c⁄ãxt
(
ö°_no
);

766 i‡(
mfcö°_˘x
) {

767 
is_mfc_⁄
 = 1;

774 
	`s3c_mfc_ö°_pow_off_°©e
(
mfcö°_˘x
);

775 
	`mfc_îr
("mf¯su•íd %d-th in°™˚ i†övÆid©ed\n", 
ö°_no
);

780 i‡(
is_mfc_⁄
) {

781 
dwMfcBa£
 = ()
s3c_mfc_s‰_ba£_vút_addr
;

783 
i
 = 
S3C_MFC_SAVE_START_ADDR
; i <
S3C_MFC_SAVE_END_ADDR
; i += 4) {

784 
s3c_mfc_ßve
[
ödex
] = 
	`ªadl
(
dwMfcBa£
 + 
i
);

785 
ödex
++;

788 
	`s3c_mfc_¶ìp
();

793 
	`˛k_dißbÀ
(
s3c_mfc_h˛k
);

794 
	`˛k_dißbÀ
(
s3c_mfc_s˛k
);

795 
	`˛k_dißbÀ
(
s3c_mfc_p˛k
);

797 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

800 
	}
}

802 
	$s3c_mfc_ªsume
(
∂©f‹m_devi˚
 *
pdev
)

803 { 
	`__D
("\n");

805 
i
, 
ödex
 = 0;

806 
ö°_no
;

807 
is_mfc_⁄
 = 0;

808 
mfc_pwr
, 
dwMfcBa£
;

809 
domaö_v_ªady
;

811 
s3c_mfc_ö°_c⁄ãxt_t
 *
mfcö°_˘x
;

813 
	`muãx_lock
(&
s3c_mfc_muãx
);

815 
	`˛k_íabÀ
(
s3c_mfc_h˛k
);

816 
	`˛k_íabÀ
(
s3c_mfc_s˛k
);

817 
	`˛k_íabÀ
(
s3c_mfc_p˛k
);

820 
mfc_pwr
 = 
	`ªadl
(
S3C_NORMAL_CFG
);

821 
mfc_pwr
 |= (1 << 9);

822 
	`__øw_wrôñ
(
mfc_pwr
, 
S3C_NORMAL_CFG
);

826 
domaö_v_ªady
 = 
	`ªadl
(
S3C_BLK_PWR_STAT
);

827 
	`mfc_debug
("domaö vÑódy = 0x%X\n", 
domaö_v_ªady
);

828 
	`m¶ìp
(1);

829 } !(
domaö_v_ªady
 & (1 << 1)));

832 i‡(
	`s3c_mfc_£tup_˛ock
(Ë=
FALSE
)

833  -
ENODEV
;

836 
	`s3c_mfc_dow∆ﬂd_boŸ_fúmw¨e
();

842 
ö°_no
 = 0; in°_nÿ< 
S3C_MFC_NUM_INSTANCES_MAX
; inst_no++) {

843 
mfcö°_˘x
 = 
	`s3c_mfc_ö°_gë_c⁄ãxt
(
ö°_no
);

844 i‡(
mfcö°_˘x
) {

845 
is_mfc_⁄
 = 1;

851 
	`s3c_mfc_ö°_pow_⁄_°©e
(
mfcö°_˘x
);

852 
	`mfc_debug
("mf¯ªsumê%d-th in°™˚ i†vÆid©ed\n", 
ö°_no
);

856 i‡(
is_mfc_⁄
) {

858 
dwMfcBa£
 = ()
s3c_mfc_s‰_ba£_vút_addr
;

859 
i
 = 
S3C_MFC_SAVE_START_ADDR
; i <
S3C_MFC_SAVE_END_ADDR
; i += 4 ) {

860 
	`wrôñ
(
s3c_mfc_ßve
[
ödex
], 
dwMfcBa£
 + 
i
);

861 
ödex
++;

865 
	`s3c_mfc_wakeup
();

868 
	`muãx_u∆ock
(&
s3c_mfc_muãx
);

871 
	}
}

873 
∂©f‹m_drivî
 
	gs3c_mfc_drivî
 = {

874 .
¥obe
 = 
s3c_mfc_¥obe
,

875 .
	gªmove
 = 
s3c_mfc_ªmove
,

876 .
	gshutdown
 = 
NULL
,

877 .
	gsu•íd
 = 
s3c_mfc_su•íd
,

878 .
	gªsume
 = 
s3c_mfc_ªsume
,

879 .
	gdrivî
 = {

880 .
ow√r
 = 
THIS_MODULE
,

881 .
	g«me
 = "s3c-mfc",

886 
	gb™√r
[] 
	g__öôd©a
 = "S3C6400 MFC Driver, (c) 2007 Samsung Electronics\n";

888 
__öô
 
	$s3c_mfc_öô
()

889 { 
	`__D
("\n");

891 
	`¥ötk
(
b™√r
);

893 #ifde‡
CONFIG_S3C6400_PDFW


894 
	`pd_ªgi°î_dev
(&
s3c_mfc_pmdev
, "domain_v");

895 
	`mfc_öfo
("mf¯devid = %d\n", 
s3c_mfc_pmdev
.
devid
);

898 i‡(
	`∂©f‹m_drivî_ªgi°î
(&
s3c_mfc_drivî
) != 0) {

899 
	`mfc_îr
("failÅoÑegisterÖlatform device\n");

900  -
EPERM
;

903 
	`mfc_öfo
("%s", 
b™√r
);

906 
	}
}

908 
__exô
 
	$s3c_mfc_exô
()

909 { 
	`__D
("\n");

912 #ifde‡
CONFIG_S3C6400_PDFW


913 
	`pd_uƒegi°î_dev
(&
s3c_mfc_pmdev
);

916 
	`∂©f‹m_drivî_uƒegi°î
(&
s3c_mfc_drivî
);

917 
	`mfc_debug
("S3C64XX MFC driverÉxit.\n");

918 
	}
}

921 
moduÀ_öô
(
s3c_mfc_öô
);

922 
moduÀ_exô
(
s3c_mfc_exô
);

924 
MODULE_AUTHOR
("Jiun, Yu");

925 
MODULE_LICENSE
("GPL");

	@s3c_mfc.h

13 #i‚de‡
_S3C_MFC_H


14 
	#_S3C_MFC_H


	)

16 
	~<löux/waô.h
>

17 
	~<löux/öãºu±.h
>

19 
	#S3C_MFC_IOCTL_MFC_MPEG4_DEC_INIT
 (0x00800001)

	)

20 
	#S3C_MFC_IOCTL_MFC_MPEG4_ENC_INIT
 (0x00800002)

	)

21 
	#S3C_MFC_IOCTL_MFC_MPEG4_DEC_EXE
 (0x00800003)

	)

22 
	#S3C_MFC_IOCTL_MFC_MPEG4_ENC_EXE
 (0x00800004)

	)

24 
	#S3C_MFC_IOCTL_MFC_H264_DEC_INIT
 (0x00800005)

	)

25 
	#S3C_MFC_IOCTL_MFC_H264_ENC_INIT
 (0x00800006)

	)

26 
	#S3C_MFC_IOCTL_MFC_H264_DEC_EXE
 (0x00800007)

	)

27 
	#S3C_MFC_IOCTL_MFC_H264_ENC_EXE
 (0x00800008)

	)

29 
	#S3C_MFC_IOCTL_MFC_H263_DEC_INIT
 (0x00800009)

	)

30 
	#S3C_MFC_IOCTL_MFC_H263_ENC_INIT
 (0x0080000A)

	)

31 
	#S3C_MFC_IOCTL_MFC_H263_DEC_EXE
 (0x0080000B)

	)

32 
	#S3C_MFC_IOCTL_MFC_H263_ENC_EXE
 (0x0080000C)

	)

34 
	#S3C_MFC_IOCTL_MFC_VC1_DEC_INIT
 (0x0080000D)

	)

35 
	#S3C_MFC_IOCTL_MFC_VC1_DEC_EXE
 (0x0080000E)

	)

37 
	#S3C_MFC_IOCTL_MFC_GET_LINE_BUF_ADDR
 (0x0080000F)

	)

38 
	#S3C_MFC_IOCTL_MFC_GET_RING_BUF_ADDR
 (0x00800010)

	)

39 
	#S3C_MFC_IOCTL_MFC_GET_YUV_BUF_ADDR
 (0x00800011)

	)

40 
	#S3C_MFC_IOCTL_MFC_GET_POST_BUF_ADDR
 (0x00800012)

	)

41 
	#S3C_MFC_IOCTL_MFC_GET_PHY_FRAM_BUF_ADDR
 (0x00800013)

	)

42 
	#S3C_MFC_IOCTL_MFC_GET_CONFIG
 (0x00800016)

	)

43 
	#S3C_MFC_IOCTL_MFC_GET_MPEG4_ASP_PARAM
 (0x00800017)

	)

45 
	#S3C_MFC_IOCTL_MFC_SET_H263_MULTIPLE_SLICE
 (0x00800014)

	)

46 
	#S3C_MFC_IOCTL_MFC_SET_CONFIG
 (0x00800015)

	)

48 
	#S3C_MFC_IOCTL_MFC_SET_DISP_CONFIG
 (0x00800111)

	)

49 
	#S3C_MFC_IOCTL_MFC_GET_YUV_SIZE
 (0x00800112)

	)

50 
	#S3C_MFC_IOCTL_MFC_SET_PP_DISP_SIZE
 (0x00800113)

	)

51 
	#S3C_MFC_IOCTL_MFC_SET_DEC_INBUF_TYPE
 (0x00800114)

	)

53 
	#S3C_MFC_IOCTL_VIRT_TO_PHYS
 0x12345678

	)

55 #i‡(
deföed
(
DIVX_ENABLE
) && (DIVX_ENABLE == 1))

56 
	#S3C_MFC_IOCTL_CACHE_FLUSH_B_YUV
 (0x00800115)

	)

57 
	#S3C_MFC_IOCTL_MFC_GET_PHY_B_YUV_BUF_ADDR
 (0x00800116)

	)

58 
	#S3C_MFC_IOCTL_MFC_GET_B_YUV_BUF_ADDR
 (0x00800117)

	)

63 
	mrŸ©e
;

64 
	mdeblockíabÀ
;

65 } 
	ts3c_mfc_decode_›ti⁄s_t
;

67 
	#S3C_MFC_DRV_RET_OK
 (0)

	)

68 
	#S3C_MFC_DRV_RET_ERR_INVALID_PARAM
 (-1001)

	)

69 
	#S3C_MFC_DRV_RET_ERR_HANDLE_INVALIDATED
 (-1004)

	)

70 
	#S3C_MFC_DRV_RET_ERR_OTHERS
 (-9001)

	)

73 
	#S3C_MFC_MAX_MV_SIZE
 (45 * 36 * 16)

	)

75 
	#S3C_MFC_MAX_MBYTE_SIZE
 (45 * 36 * 1)

	)

78 
	#MFC_DEBUG
(
fmt
, ...) \

80 
	`¥ötk
(
KERN_DEBUG
 \

81 "%s: " 
fmt
, 
__func__
, ##
__VA_ARGS__
); \

82 } 0)

	)

84 
	#MFC_ERROR
(
fmt
, ...) \

86 
	`¥ötk
(
KERN_ERR
 \

87 "%s: " 
fmt
, 
__func__
, ##
__VA_ARGS__
); \

88 } 0)

	)

90 
	#MFC_NOTICE
(
fmt
, ...) \

92 
	`¥ötk
(
KERN_NOTICE
 \

93 "%s: " 
fmt
, 
__func__
, ##
__VA_ARGS__
); \

94 } 0)

	)

96 
	#MFC_INFO
(
fmt
, ...) \

98 
	`¥ötk
(
KERN_INFO
 \

99 
fmt
, ##
__VA_ARGS__
); \

100 } 0)

	)

102 
	#MFC_WARN
(
fmt
, ...) \

104 
	`¥ötk
(
KERN_WARNING
 \

105 
fmt
, ##
__VA_ARGS__
); \

106 } 0)

	)

109 #ifde‡
VIDEO_MFC_DEBUG


110 
	#mfc_debug
(
fmt
, ...Ë
	`MFC_DEBUG
(fmt, ##
__VA_ARGS__
)

	)

112 
	#mfc_debug
(
fmt
, ...)

	)

115 
	#mfc_îr
(
fmt
, ...Ë
	`MFC_ERROR
(fmt, ##
__VA_ARGS__
)

	)

116 
	#mfc_nŸi˚
(
fmt
, ...Ë
	`MFC_NOTICE
(fmt, ##
__VA_ARGS__
)

	)

117 
	#mfc_öfo
(
fmt
, ...Ë
	`MFC_INFO
(fmt, ##
__VA_ARGS__
)

	)

118 
	#mfc_w¨n
(
fmt
, ...Ë
	`MFC_WARN
(fmt, ##
__VA_ARGS__
)

	)

	@s3c_mfc10.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@s3c_mfc_base.h

13 #i‚de‡
_S3C_MFC_BASE_H


14 
	#_S3C_MFC_BASE_H


	)

18 
	#S3C_MFC_STREAM_ENDIAN_LITTLE
 (0<<0)

	)

19 
	#S3C_MFC_STREAM_ENDIAN_BIG
 (1<<0)

	)

20 
	#S3C_MFC_BUF_STATUS_FULL_EMPTY_CHECK_BIT
 (0<<1)

	)

21 
	#S3C_MFC_BUF_STATUS_NO_CHECK_BIT
 (1<<1)

	)

24 
	#S3C_MFC_YUV_MEM_ENDIAN_LITTLE
 (0<<0)

	)

25 
	#S3C_MFC_YUV_MEM_ENDIAN_BIG
 (1<<0)

	)

36 
	#S3C_MFC_MP4_DBK_DISABLE
 (0<<0)

	)

37 
	#S3C_MFC_MP4_DBK_ENABLE
 (1<<0)

	)

38 
	#S3C_MFC_REORDER_DISABLE
 (0<<1)

	)

39 
	#S3C_MFC_REORDER_ENABLE
 (1<<1)

	)

40 
	#S3C_MFC_FILEPLAY_ENABLE
 (1<<2)

	)

41 
	#S3C_MFC_FILEPLAY_DISABLE
 (0<<2)

	)

42 
	#S3C_MFC_DYNBUFALLOC_ENABLE
 (1<<3)

	)

43 
	#S3C_MFC_DYNBUFALLOC_DISABLE
 (0<<3)

	)

49 
	#S3C_MFC_MB_BIT_REPORT_DISABLE
 (0<<0)

	)

50 
	#S3C_MFC_MB_BIT_REPORT_ENABLE
 (1<<0)

	)

51 
	#S3C_MFC_SLICE_INFO_REPORT_DISABLE
 (0<<1)

	)

52 
	#S3C_MFC_SLICE_INFO_REPORT_ENABLE
 (1<<1)

	)

53 
	#S3C_MFC_AUD_DISABLE
 (0<<2)

	)

54 
	#S3C_MFC_AUD_ENABLE
 (1<<2)

	)

55 
	#S3C_MFC_MB_QP_REPORT_DISABLE
 (0<<3)

	)

56 
	#S3C_MFC_MB_QP_REPORT_ENBLE
 (1<<3)

	)

57 
	#S3C_MFC_CONST_QP_DISABLE
 (0<<5)

	)

58 
	#S3C_MFC_CONST_QP_ENBLE
 (1<<5)

	)

61 
	#S3C_MFC_MPEG4_ENCODE
 0

	)

62 
	#S3C_MFC_H263_ENCODE
 1

	)

63 
	#S3C_MFC_H264_ENCODE
 2

	)

66 
	#S3C_MFC_DATA_PART_DISABLE
 (0<<0)

	)

67 
	#S3C_MFC_DATA_PART_ENABLE
 (1<<0)

	)

70 
	#S3C_MFC_ANNEX_T_OFF
 (0<<0)

	)

71 
	#S3C_MFC_ANNEX_T_ON
 (1<<0)

	)

72 
	#S3C_MFC_ANNEX_K_OFF
 (0<<1)

	)

73 
	#S3C_MFC_ANNEX_K_ON
 (1<<1)

	)

74 
	#S3C_MFC_ANNEX_J_OFF
 (0<<2)

	)

75 
	#S3C_MFC_ANNEX_J_ON
 (1<<2)

	)

76 
	#S3C_MFC_ANNEX_I_OFF
 (0<<3)

	)

77 
	#S3C_MFC_ANNEX_I_ON
 (1<<3)

	)

80 
	#S3C_MFC_SLICE_MODE_ONE
 (0<<0)

	)

81 
	#S3C_MFC_SLICE_MODE_MULTIPLE
 (1<<0)

	)

84 
	#S3C_MFC_RC_DISABLE
 (0<<0Ë

	)

85 
	#S3C_MFC_RC_ENABLE
 (1<<0)

	)

86 
	#S3C_MFC_SKIP_DISABLE
 (1<<31)

	)

87 
	#S3C_MFC_SKIP_ENABLE
 (0<<31)

	)

90 
	#S3C_MFC_FMO_DISABLE
 (0<<0)

	)

91 
	#S3C_MFC_FMO_ENABLE
 (1<<0)

	)

94 
	#S3C_MFC_USER_QP_MAX_DISABLE
 (0<<0)

	)

95 
	#S3C_MFC_USER_QP_MAX_ENABLE
 (1<<0)

	)

96 
	#S3C_MFC_USE_GAMMA_DISABLE
 (0<<1)

	)

97 
	#S3C_MFC_USE_GAMMA_ENABLE
 (1<<1)

	)

100 
	e__MFC_CODEC_MODE
 {

101 
	mMP4_DEC
 = 0,

102 
	mMP4_ENC
 = 1,

103 
	mAVC_DEC
 = 2,

104 
	mAVC_ENC
 = 3,

105 
	mVC1_DEC
 = 4,

106 
	mH263_DEC
 = 5,

107 
	mH263_ENC
 = 6

108 } 
	ts3c_mfc_codec_mode_t
;

110 
	e__MFC_COMMAND
 {

111 
	mSEQ_INIT
 = 0x01,

112 
	mSEQ_END
 = 0x02,

113 
	mPIC_RUN
 = 0x03,

114 
	mSET_FRAME_BUF
 = 0x04,

115 
	mENC_HEADER
 = 0x05,

116 
	mENC_PARA_SET
 = 0x06,

117 
	mDEC_PARA_SET
 = 0x07,

118 
	mENC_PARAM_CHANGE
 = 0x09,

119 
	mSLEEP
 = 0x0A,

120 
	mWAKEUP
 = 0x0B,

121 
	mGET_FW_VER
 = 0x0F

122 } 
	ts3c_mfc_comm™d_t
;

	@s3c_mfc_bitproc_buf.c

1 
	#LOG_TAG
 "s3c_mfc_bô¥oc_buf.c"

	)

2 
	~"oßl.h
"

16 
	~<asm/io.h
>

17 
	~<löux/kî√l.h
>

19 
	~"s3c_mfc_ba£.h
"

20 
	~"s3c_mfc_bô¥oc_buf.h
"

21 
	~"s3c_mfc_c⁄fig.h
"

22 
	~"¥ism_s.h
"

23 
	~"s3c_mfc.h
"

25 vﬁ©ûê*
	gs3c_mfc_vút_bô¥oc_buff
 = 
NULL
;

26 
	gs3c_mfc_phys_bô¥oc_buff
 = 0;

29 
BOOL
 
	$s3c_mfc_memm≠_bô¥oc_buff
()

30 { 
	`__D
("\n");

31 
BOOL
 
ªt
 = 
FALSE
;

34 
s3c_mfc_vút_bô¥oc_buff
 = (vﬁ©ûê*)
	`i‹em≠_noˇche
(
S3C_MFC_BASEADDR_BITPROC_BUF
, 
S3C_MFC_BITPROC_BUF_SIZE
);

35 i‡(
s3c_mfc_vút_bô¥oc_buff
 =
NULL
) {

36 
	`mfc_îr
("failÅo mapping bitprocessor buffer\n");

37  
ªt
;

41 
s3c_mfc_phys_bô¥oc_buff
 = 
S3C_MFC_BASEADDR_BITPROC_BUF
;

43 
ªt
 = 
TRUE
;

45  
ªt
;

46 
	}
}

48 vﬁ©ûê*
	$s3c_mfc_gë_bô¥oc_buff_vút_addr
()

49 { 
	`__D
("\n");

50 vﬁ©ûê*
pBôProcBuf
;

52 
pBôProcBuf
 = 
s3c_mfc_vút_bô¥oc_buff
;

54  
pBôProcBuf
;

55 
	}
}

57 *
	$s3c_mfc_gë_∑øm_buff_vút_addr
()

58 { 
	`__D
("\n");

59 *
pP¨amBuf
;

61 
pP¨amBuf
 = (*)(
s3c_mfc_vút_bô¥oc_buff
 +

62 
S3C_MFC_CODE_BUF_SIZE
 + 
S3C_MFC_WORK_BUF_SIZE
);

64  
pP¨amBuf
;

65 
	}
}

67 
	$s3c_mfc_put_fúmw¨e_öto_codebuff
()

68 { 
	`__D
("\n");

69 
i
, 
j
;

70 
d©a
;

72 *
uAddrFúmw¨eCode
;

74 
uAddrFúmw¨eCode
 = (*)
s3c_mfc_vút_bô¥oc_buff
;

81 
i
 = 
j
 = 0 ; i < (
s3c_mfc_bô_code
) / (s3c_mfc_bit_code[0]); i += 2, j++) {

82 
d©a
 = (
s3c_mfc_bô_code
[
i
] << 16) | s3c_mfc_bit_code[i + 1];

84 *(
uAddrFúmw¨eCode
 + 
j
Ë
d©a
;

86 
	}
}

	@s3c_mfc_bitproc_buf.h

13 #i‚de‡
_S3C_MFC_BITPROC_BUF_H


14 
	#_S3C_MFC_BITPROC_BUF_H


	)

16 
	~"s3c_mfc_ty≥s.h
"

18 
BOOL
 
s3c_mfc_memm≠_bô¥oc_buff
();

19 vﬁ©ûê*
s3c_mfc_gë_bô¥oc_buff_vút_addr
();

20 *
s3c_mfc_gë_∑øm_buff_vút_addr
();

22 
s3c_mfc_put_fúmw¨e_öto_codebuff
();

	@s3c_mfc_config.h

13 #i‚de‡
_S3C_MFC_CONFIG_H


14 
	#_S3C_MFC_CONFIG_H


	)

16 
	~<asm/ty≥s.h
>

22 #i‚de‡
S3C_MFC_PHYS_BUFFER_SET


23 
dma_addr_t
 
s3c_mfc_phys_buf„r
;

26 
	#MFC_RESERVED_MEM_START
 
s3c_mfc_phys_buf„r


	)

32 
	#S3C_MFC_BASEADDR_BITPROC_BUF
 
MFC_RESERVED_MEM_START


	)

37 
	#S3C_MFC_BASEADDR_DATA_BUF
 (
MFC_RESERVED_MEM_START
 + 0x116000)

	)

40 
	#S3C_MFC_BASEADDR_POST_SFR
 0x77000000

	)

49 
	#S3C_MFC_CODE_BUF_SIZE
 81920

	)

52 
	#S3C_MFC_WORK_BUF_SIZE
 1048576

	)

56 
	#S3C_MFC_PARA_BUF_SIZE
 8192

	)

58 
	#S3C_MFC_BITPROC_BUF_SIZE
 \

59 (
S3C_MFC_CODE_BUF_SIZE
 + \

60 
S3C_MFC_PARA_BUF_SIZE
 + \

61 
S3C_MFC_WORK_BUF_SIZE
)

	)

67 
	#S3C_MFC_NUM_INSTANCES_MAX
 4

68 

	)

75 
	#S3C_MFC_ROTATE_ENABLE
 0

	)

82 
	#S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
 (614400)

	)

85 
	#S3C_MFC_LINE_BUF_SIZE
 (
S3C_MFC_NUM_INSTANCES_MAX
 * 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
)

	)

87 
	#S3C_MFC_YUV_BUF_SIZE
 (720*480*3*4)

	)

89 
	#S3C_MFC_STREAM_BUF_SIZE
 (
S3C_MFC_LINE_BUF_SIZE
)

	)

90 
	#S3C_MFC_DATA_BUF_SIZE
 (
S3C_MFC_STREAM_BUF_SIZE
 + 
S3C_MFC_YUV_BUF_SIZE
)

	)

	@s3c_mfc_databuf.c

1 
	#LOG_TAG
 "s3c_mfc_d©abuf.c"

	)

2 
	~"oßl.h
"

16 
	~<asm/io.h
>

17 
	~<löux/kî√l.h
>

19 
	~"s3c_mfc_ba£.h
"

20 
	~"s3c_mfc_ty≥s.h
"

21 
	~"s3c_mfc_d©abuf.h
"

22 
	~"s3c_mfc_c⁄fig.h
"

23 
	~"s3c_mfc.h
"

25 vﬁ©ûê*
	gs3c_mfc_vút_d©a_buf
 = 
NULL
;

26 
	gs3c_mfc_phys_d©a_buf
 = 0;

29 
BOOL
 
	$s3c_mfc_memm≠_d©abuf
()

30 { 
	`__D
("\n");

31 
BOOL
 
ªt
 = 
FALSE
;

33 
s3c_mfc_vút_d©a_buf
 = 
	`phys_to_vút
(
s3c_mfc_phys_buf„r
 + 
S3C_MFC_BITPROC_BUF_SIZE
);

34 i‡(
s3c_mfc_vút_d©a_buf
 =
NULL
) {

35 
	`mfc_îr
("failÅo mapping data buffer\n");

36  
ªt
;

39 
	`mfc_debug
("virtualáddress of data buffer = 0x%x\n", \

40 ()
s3c_mfc_vút_d©a_buf
);

44 
s3c_mfc_phys_d©a_buf
 = 
S3C_MFC_BASEADDR_DATA_BUF
;

46 
ªt
 = 
TRUE
;

48  
ªt
;

49 
	}
}

51 vﬁ©ûê*
	$s3c_mfc_gë_d©abuf_vút_addr
()

52 { 
	`__D
("\n");

53 vﬁ©ûê*
d©a_buf
;

55 
d©a_buf
 = 
s3c_mfc_vút_d©a_buf
;

57  
d©a_buf
;

58 
	}
}

60 vﬁ©ûê*
	$s3c_mfc_gë_yuvbuff_vút_addr
()

61 { 
	`__D
("\n");

62 vﬁ©ûê*
yuv_buff
;

64 
yuv_buff
 = 
s3c_mfc_vút_d©a_buf
 + 
S3C_MFC_STREAM_BUF_SIZE
;

66  
yuv_buff
;

67 
	}
}

69 
	$s3c_mfc_gë_d©abuf_phys_addr
()

70 { 
	`__D
("\n");

71  
s3c_mfc_phys_d©a_buf
;

72 
	}
}

74 
	$s3c_mfc_gë_yuvbuff_phys_addr
()

75 { 
	`__D
("\n");

76 
phys_yuv_buff
;

78 
phys_yuv_buff
 = 
s3c_mfc_phys_d©a_buf
 + 
S3C_MFC_STREAM_BUF_SIZE
;

80  
phys_yuv_buff
;

81 
	}
}

	@s3c_mfc_databuf.h

13 #i‚de‡
_S3C_MFC_DATABUF_H


14 
	#_S3C_MFC_DATABUF_H


	)

16 
	~"s3c_mfc_ty≥s.h
"

18 
BOOL
 
s3c_mfc_memm≠_d©abuf
();

20 vﬁ©ûê*
s3c_mfc_gë_d©abuf_vút_addr
();

21 vﬁ©ûê*
s3c_mfc_gë_yuvbuff_vút_addr
();

22 
s3c_mfc_gë_d©abuf_phys_addr
();

23 
s3c_mfc_gë_yuvbuff_phys_addr
();

	@s3c_mfc_init_hw.c

1 
	#LOG_TAG
 "s3c_mfc_öô_hw.c"

	)

2 
	~"oßl.h
"

17 
	~<löux/kî√l.h
>

19 
	~"s3c_mfc_ba£.h
"

20 
	~"s3c_mfc_s‰.h
"

21 
	~"s3c_mfc_bô¥oc_buf.h
"

22 
	~"s3c_mfc_d©abuf.h
"

23 
	~"s3c_mfc_ty≥s.h
"

24 
	~"s3c_mfc_c⁄fig.h
"

25 
	~"s3c_mfc_yuv_buf_m™agî.h
"

26 
	~"s3c_mfc.h
"

28 
BOOL
 
	$s3c_mfc_£tup_mem‹y
()

29 { 
	`__D
("\n");

30 
BOOL
 
ªt_bô
, 
ªt_d©
;

31 *
pD©aBuf
;

38 
ªt_bô
 = 
	`s3c_mfc_memm≠_bô¥oc_buff
();

39 i‡(
ªt_bô
 =
FALSE
) {

40 
	`mfc_îr
("failÅo mapping bitprocessor buffer memory\n");

41  
FALSE
;

44 
ªt_d©
 = 
	`s3c_mfc_memm≠_d©abuf
();

45 i‡(
ªt_d©
 =
FALSE
) {

46 
	`mfc_îr
("failÅo mapping data buffer memory \n");

47  
FALSE
;

51 
pD©aBuf
 = (*)
	`s3c_mfc_gë_d©abuf_vút_addr
();

52 
	`s3c_mfc_öô_yuvbuf_mgr
(
pD©aBuf
 + 
S3C_MFC_STREAM_BUF_SIZE
, 
S3C_MFC_YUV_BUF_SIZE
);

55  
TRUE
;

56 
	}
}

59 
BOOL
 
	$s3c_mfc_öô_hw
()

60 { 
	`__D
("\n");

64 
	`s3c_mfc_ª£t
();

69 
	`s3c_mfc_put_fúmw¨e_öto_codebuff
();

70 
	`s3c_mfc_dow∆ﬂd_boŸ_fúmw¨e
();

71 
	`mfc_debug
("downloading firmware into bitprocessor\n");

76 
	`s3c_mfc_°¨t_bô_¥o˚ss‹
();

82 
	`s3c_mfc_c⁄fig_s‰_bô¥oc_buf„r
();

91 
	`s3c_mfc_c⁄fig_s‰_˘æ_›ts
();

93 
	`s3c_mfc_gë_fúmw¨e_vî
();

95  
TRUE
;

96 
	}
}

	@s3c_mfc_init_hw.h

13 #i‚de‡
_S3C_MFC_HW_INIT_H


14 
	#_S3C_MFC_HW_INIT_H


	)

16 
	~"s3c_mfc_ty≥s.h
"

18 
BOOL
 
s3c_mfc_£tup_mem‹y
();

19 
BOOL
 
s3c_mfc_öô_hw
();

	@s3c_mfc_inst_pool.c

1 
	#LOG_TAG
 "s3c_mfc_ö°_poﬁ.c"

	)

2 
	~"oßl.h
"

17 
	~"s3c_mfc_c⁄fig.h
"

18 
	~"s3c_mfc_ö°_poﬁ.h
"

20 #i‡!
deföed
(
S3C_MFC_NUM_INSTANCES_MAX
)

23 #i‡((
S3C_MFC_NUM_INSTANCES_MAX
 <= 0) || (S3C_MFC_NUM_INSTANCES_MAX > 8))

27 
	gs3c_mfc_ö°_no
 = 0;

28 
	gs3c_mfc_ö°_°©us
[
S3C_MFC_NUM_INSTANCES_MAX
] = {0, };

29 
	gs3c_mfc_num_ö°_avaû
 = 
S3C_MFC_NUM_INSTANCES_MAX
;

31 
	$s3c_mfc_gë_avaû_ö°_poﬁ_num
()

32 { 
	`__D
("\n");

33  
s3c_mfc_num_ö°_avaû
;

34 
	}
}

36 
	$s3c_mfc_occupy_ö°_poﬁ
()

37 { 
	`__D
("\n");

38 
i
;

40 i‡(
s3c_mfc_num_ö°_avaû
 == 0)

43 
i
 = 0; i < 
	`ARRAY_SIZE
(
s3c_mfc_ö°_°©us
); i++) {

44 i‡(
s3c_mfc_ö°_°©us
[
s3c_mfc_ö°_no
] == 0) {

45 
s3c_mfc_num_ö°_avaû
--;

46 
s3c_mfc_ö°_°©us
[
s3c_mfc_ö°_no
] = 1;

47  
s3c_mfc_ö°_no
;

50 
s3c_mfc_ö°_no
 = (s3c_mfc_ö°_nÿ+ 1Ë% 
	`ARRAY_SIZE
(
s3c_mfc_ö°_°©us
);

54 
	}
}

56 
	$s3c_mfc_ªÀa£_ö°_poﬁ
(
ö°™˚_no
)

57 { 
	`__D
("\n");

58 i‡(
ö°™˚_no
 >
	`ARRAY_SIZE
(
s3c_mfc_ö°_°©us
) ||

59 
ö°™˚_no
 < 0) {

63 i‡(
s3c_mfc_ö°_°©us
[
ö°™˚_no
] == 0)

66 
s3c_mfc_num_ö°_avaû
++;

67 
s3c_mfc_ö°_°©us
[
ö°™˚_no
] = 0;

69  
ö°™˚_no
;

70 
	}
}

73 
	$s3c_mfc_occupy_Æl_ö°_poﬁ
()

74 { 
	`__D
("\n");

75 
i
;

77 i‡(
s3c_mfc_num_ö°_avaû
 == 0)

80 
i
 = 0; i < 
S3C_MFC_NUM_INSTANCES_MAX
; i++) {

81 i‡(
s3c_mfc_ö°_°©us
[
i
] == 0) {

82 
s3c_mfc_num_ö°_avaû
--;

83 
s3c_mfc_ö°_°©us
[
i
] = 1;

86 
	}
}

88 
	$s3c_mfc_ªÀa£_Æl_ö°_poﬁ
()

89 { 
	`__D
("\n");

90 
i
;

92 i‡(
s3c_mfc_num_ö°_avaû
 =
S3C_MFC_NUM_INSTANCES_MAX
)

95 
i
 = 0; i < 
S3C_MFC_NUM_INSTANCES_MAX
; i++) {

96 i‡(
s3c_mfc_ö°_°©us
[
i
] == 1) {

97 
s3c_mfc_num_ö°_avaû
++;

98 
s3c_mfc_ö°_°©us
[
i
] = 0;

101 
	}
}

	@s3c_mfc_inst_pool.h

13 #i‚de‡
_S3C_MFC_INST_POOL_H


14 
	#_S3C_MFC_INST_POOL_H


	)

16 
s3c_mfc_gë_avaû_ö°_poﬁ_num
();

18 
s3c_mfc_occupy_ö°_poﬁ
();

19 
s3c_mfc_ªÀa£_ö°_poﬁ
(
ö°™˚_no
);

21 
s3c_mfc_occupy_Æl_ö°_poﬁ
();

22 
s3c_mfc_ªÀa£_Æl_ö°_poﬁ
();

	@s3c_mfc_instance.c

1 
	#LOG_TAG
 "s3c_mfc_ö°™˚.c"

	)

2 
	~"oßl.h
"

16 
	~<asm/io.h
>

17 
	~<asm/uac˚ss.h
>

18 
	~<asm/ˇcheÊush.h
>

19 
	~<asm/mem‹y.h
>

21 
	~<löux/kî√l.h
>

22 
	~<löux/¶ab.h
>

23 
	~<löux/°rög.h
>

24 
	~<löux/dma-m≠pög.h
>

26 
	~"ªgs-mfc.h
"

28 
	~"s3c_mfc_ba£.h
"

29 
	~"s3c_mfc_ö°™˚.h
"

30 
	~"s3c_mfc_d©abuf.h
"

31 
	~"s3c_mfc_yuv_buf_m™agî.h
"

32 
	~"s3c_mfc_c⁄fig.h
"

33 
	~"s3c_mfc_s‰.h
"

34 
	~"s3c_mfc_bô¥oc_buf.h
"

35 
	~"s3c_mfc_ö°_poﬁ.h
"

36 
	~"s3c_mfc.h
"

39 
__iomem
 *
s3c_mfc_s‰_ba£_vút_addr
;

40 
s3c_mfc_ö°_c⁄ãxt_t
 
	g_mfcö°_˘x
[
S3C_MFC_NUM_INSTANCES_MAX
];

43 
s3c_mfc_ö°_c⁄ãxt_t
 *
	$s3c_mfc_ö°_gë_c⁄ãxt
(
ö°_no
)

44 { 
	`__D
("\n");

45 i‡((
ö°_no
 < 0Ë|| (ö°_nÿ>
S3C_MFC_NUM_INSTANCES_MAX
))

46  
NULL
;

48 i‡(
	`S3C_MFC_INST_STATE
(&(
_mfcö°_˘x
[
ö°_no
])Ë>
S3C_MFC_INST_STATE_CREATED
)

49  &(
_mfcö°_˘x
[
ö°_no
]);

51  
NULL
;

52 
	}
}

54 
	$s3c_mfc_gë_°ªam_buf„r_addr
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
)

55 { 
	`__D
("\n");

56 
˘x
->
°ªam_buf„r
 = (*)(
	`s3c_mfc_gë_d©abuf_vút_addr
() + \

57 (
˘x
->
ö°_no
 * 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
));

58 
˘x
->
phys_addr_°ªam_buf„r
 = ()(
	`s3c_mfc_gë_d©abuf_phys_addr
() + \

59 (
˘x
->
ö°_no
 * 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
));

60 
˘x
->
°ªam_buf„r_size
 = 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
;

62 
	`mfc_debug
("ctx->stream_bufferáddress 0x%08x\n",

63 ()
˘x
->
°ªam_buf„r
);

64 
	`mfc_debug
("ctx->phys_addr_stream_bufferáddress 0x%08x\n",

65 
˘x
->
phys_addr_°ªam_buf„r
);

66 
	}
}

68 
BOOL
 
	$s3c_mfc_gë_yuv_buf„r_addr
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, 
buf_size
)

69 { 
	`__D
("\n");

70 *
ö°™˚_yuv_buf„r
;

73 
ö°™˚_yuv_buf„r
 = 
	`s3c_mfc_commô_yuv_buf„r_mgr
(
˘x
->
ö°_no
, 
buf_size
);

74 i‡(
ö°™˚_yuv_buf„r
 =
NULL
) {

75 
	`mfc_îr
("failÅoállocate frame buffer\n");

76  
FALSE
;

79 
	`s3c_mfc_¥öt_commô_yuv_buf„r_öfo
();

81 
˘x
->
yuv_buf„r
 = 
ö°™˚_yuv_buf„r
;

82 
˘x
->
phys_addr_yuv_buf„r
 = 
S3C_MFC_BASEADDR_DATA_BUF
 + \

83 (()
ö°™˚_yuv_buf„r
 - ()
	`s3c_mfc_gë_d©abuf_vút_addr
());

84 
˘x
->
yuv_buf„r_size
 = 
buf_size
;

86 
	`mfc_debug
("˘x->ö°_nÿ: %d\n", 
˘x
->
ö°_no
);

87 
	`mfc_debug
("˘x->yuv_buf„∏: 0x%x\n", ()
˘x
->
yuv_buf„r
);

88 
	`mfc_debug
("˘x->phys_addr_yuv_buf„∏: 0x%x\n", 
˘x
->
phys_addr_yuv_buf„r
);

90  
TRUE
;

91 
	}
}

93 
	$s3c_mfc_ö°_gë_löe_buff
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, **
buf„r
, *
size
)

94 { 
	`__D
("\n");

95 i‡(
	`S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_DELETED
)) {

96 
	`mfc_îr
("mfc instance is deleted\n");

97  
S3C_MFC_INST_ERR_STATE_DELETED
;

100 *
buf„r
 = 
˘x
->
°ªam_buf„r
;

101 *
size
 = 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
;

103  
S3C_MFC_INST_RET_OK
;

104 
	}
}

106 
	$s3c_mfc_ö°_gë_yuv_buff
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, **
buf„r
, *
size
)

107 { 
	`__D
("\n");

109 i‡(
	`S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_DELETED
)) {

110 
	`mfc_îr
("mfc instance is deleted\n");

111  
S3C_MFC_INST_ERR_STATE_DELETED
;

113 i‡(
	`S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_CREATED
)) {

114 
	`mfc_îr
("mfc instance isÇot initialized\n");

115  
S3C_MFC_INST_ERR_STATE_CHK
;

118 i‡(
˘x
->
yuv_buf„r
 =
NULL
) {

119 
	`mfc_îr
("mfc frame buffer isÇot internallyállocated yet\n");

120  
S3C_MFC_INST_ERR_ETC
;

123 *
size
 = (
˘x
->
buf_width
 * ctx->
buf_height
 * 3) >> 1;

125 i‡(
˘x
->
run_ödex
 < 0)

126 *
buf„r
 = 
NULL
;

128 *
buf„r
 = 
˘x
->
yuv_buf„r
 + (˘x->
run_ödex
Ë* (*
size
);

129 #i‡(
S3C_MFC_ROTATE_ENABLE
 == 1)

130 i‡(
˘x
->
po°_rŸ©i⁄_mode
 & 0x0010)

131 *
buf„r
 = 
˘x
->
yuv_buf„r
 + (˘x->
yuv_buf„r_cou¡
Ë* (*
size
);

136  
S3C_MFC_INST_RET_OK
;

137 
	}
}

140 
	$s3c_mfc_ö°_gë_no
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
)

141 { 
	`__D
("\n");

142  
˘x
->
ö°_no
;

143 
	}
}

146 
BOOL
 
s3c_mfc_ö°_gë_°ªam_buff_rw_±rs
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, **
ªad_±r
, \

147 **
wrôe_±r
)

148 { 
__D
("\n");

149 
	gdiff_vú_phy
;

150 
	gªad_poöãr
 = 0;

151 
	gwrôe_poöãr
 = 0;

154 i‡(
S3C_MFC_INST_STATE
(
˘x
Ë< 
	gS3C_MFC_INST_STATE_CREATED
)

155  
	gFALSE
;

157 i‡(
S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_CREATED
)) {

162 *
	gªad_±r
 = 
˘x
->
°ªam_buf„r
;

163 *
	gwrôe_±r
 = 
˘x
->
°ªam_buf„r
;

166 
	gdiff_vú_phy
 = ()(
˘x
->
°ªam_buf„r
 - ctx->
phys_addr_°ªam_buf„r
);

168 
	g˘x
->
	gö°_no
) {

170 
ªad_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR0
);

171 
	gwrôe_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR0
);

174 
ªad_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR1
);

175 
	gwrôe_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR1
);

178 
ªad_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR2
);

179 
	gwrôe_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR2
);

182 
ªad_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR3
);

183 
	gwrôe_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR3
);

186 
ªad_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR4
);

187 
	gwrôe_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR4
);

190 
ªad_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR5
);

191 
	gwrôe_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR5
);

194 
ªad_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR6
);

195 
	gwrôe_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR6
);

198 
ªad_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR7
);

199 
	gwrôe_poöãr
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR7
);

203 *
	gªad_±r
 = (*)(
diff_vú_phy
 + 
ªad_poöãr
);

204 *
	gwrôe_±r
 = (*)(
diff_vú_phy
 + 
wrôe_poöãr
);

207  
	gTRUE
;

210 
	$s3c_mfc_ö°_£t_po°_rŸ©e
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, 
po°_rŸmode
)

211 { 
	`__D
("\n");

212 
ﬁd_po°_rŸmode
;

214 
ﬁd_po°_rŸmode
 = 
˘x
->
po°_rŸ©i⁄_mode
;

216 i‡(
po°_rŸmode
 & 0x0010) {

217 
˘x
->
po°_rŸ©i⁄_mode
 = 
po°_rŸmode
;

219 
˘x
->
po°_rŸ©i⁄_mode
 = 0;

222  
ﬁd_po°_rŸmode
;

223 
	}
}

225 
s3c_mfc_ö°_c⁄ãxt_t
 *
	$s3c_mfc_ö°_¸óã
()

226 { 
	`__D
("\n");

227 
ö°_no
;

228 
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
;

233 
ö°_no
 = 
	`s3c_mfc_occupy_ö°_poﬁ
();

234 i‡(
ö°_no
 == -1)

235  
NULL
;

237 
˘x
 = &(
_mfcö°_˘x
[
ö°_no
]);

238 
	`mem£t
(
˘x
, 0, (*ctx));

239 
˘x
->
ö°_no
 = inst_no;

240 
	`S3C_MFC_INST_STATE_TRANSITION
(
˘x
, 
S3C_MFC_INST_STATE_CREATED
);

242 
	`s3c_mfc_gë_°ªam_buf„r_addr
(
˘x
);

244 
	`mfc_debug
("°©ê%d\n", 
˘x
->
°©e_v¨
);

245  
˘x
;

246 
	}
}

249 
	$s3c_mfc_ö°_dñ
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
)

250 { 
	`__D
("\n");

252 i‡(
	`S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_DELETED
)) {

253 
	`mfc_îr
("mfc instance isálready deleted\n");

257 
	`s3c_mfc_ªÀa£_ö°_poﬁ
(
˘x
->
ö°_no
);

258 
	`s3c_mfc_‰ì_yuv_buf„r_mgr
(
˘x
->
ö°_no
);

260 
	`S3C_MFC_INST_STATE_TRANSITION
(
˘x
, 
S3C_MFC_INST_STATE_DELETED
);

261 
	}
}

264 
	$s3c_mfc_ö°_pow_off_°©e
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
)

265 { 
	`__D
("\n");

266 
	`S3C_MFC_INST_STATE_PWR_OFF_FLAG_SET
(
˘x
);

267 
	}
}

270 
	$s3c_mfc_ö°_pow_⁄_°©e
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
)

271 { 
	`__D
("\n");

272 
	`S3C_MFC_INST_STATE_PWR_OFF_FLAG_CLEAR
(
˘x
);

273 
	}
}

279 
	$s3c_mfc_ö°_öô_dec
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, 
s3c_mfc_codec_mode_t
 
codec_mode
, 
°rm_Àng
)

280 { 
	`__D
("\n");

281 
i
;

282 
yuv_buf_size
;

283 
‰ame_size
;

284 
‰ame_√ed_cou¡
;

285 *
∑øm_buf
;

289 i‡(!
	`S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_CREATED
)) {

290 
	`mfc_îr
("sequence init function was calledátán incorrectÖoint\n");

291  
S3C_MFC_INST_ERR_STATE_CHK
;

295 
˘x
->
codec_mode
 = codec_mode;

298 i‡(
°rm_Àng
 > 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
) {

299 
	`mfc_îr
("Input buffer size isÅoo smallÅo holdÅhe input stream.\n");

300  
S3C_MFC_INST_ERR_ETC
;

310 
	`mfc_debug
("°rm_Àng = %d\n", ()
°rm_Àng
);

312 
°rm_Àng
 = 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
;

314 
˘x
->
ö°_no
) {

316 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR0
);

317 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR0
);

320 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR1
);

321 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR1
);

324 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR2
);

325 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR2
);

328 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR3
);

329 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR3
);

332 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR4
);

333 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR4
);

336 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR5
);

337 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR5
);

340 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR6
);

341 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR6
);

344 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR7
);

345 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR7
);

354 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_SEQ_BIT_BUF_ADDR
);

355 
	`wrôñ
(
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
 / 1024, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_SEQ_BIT_BUF_SIZE
);

356 
	`wrôñ
(
S3C_MFC_FILEPLAY_ENABLE
 | 
S3C_MFC_DYNBUFALLOC_ENABLE
, 
s3c_mfc_s‰_ba£_vút_addr
 + \

357 
S3C_MFC_PARAM_DEC_SEQ_OPTION
);

358 
	`wrôñ
(0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_SEQ_START_BYTE
);

360 
	`mfc_debug
("˘x->ö°_nÿ%d\n", 
˘x
->
ö°_no
);

361 
	`mfc_debug
("˘x->codec_modê%d\n", 
˘x
->
codec_mode
);

362 
	`mfc_debug
("sequece bit buffer size = %d (kb)\n", \

363 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_SEQ_BIT_BUF_SIZE
));

365 
	`s3c_mfc_£t_eos
(0);

368 i‡(
	`s3c_mfc_issue_comm™d
(
˘x
->
ö°_no
, ctx->
codec_mode
, 
SEQ_INIT
Ë=
FALSE
) {

369 
	`mfc_îr
("sequence init failed\n");

370 
	`s3c_mfc_°ªam_íd
();

371  
S3C_MFC_INST_ERR_DEC_INIT_CMD_FAIL
;

374 
	`s3c_mfc_°ªam_íd
();

376 i‡(
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_SEQ_SUCCESS
Ë=
TRUE
) {

377 
	`mfc_debug
("RET_DEC_SEQ_SRC_SIZE = %d\n", \

378 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_SEQ_SRC_SIZE
));

379 
	`mfc_debug
("RET_DEC_SEQ_SRC_FRAME_RATE = %d\n", \

380 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_SEQ_SRC_FRAME_RATE
));

381 
	`mfc_debug
("RET_DEC_SEQ_FRAME_NEED_COUNT = %d\n", \

382 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_SEQ_FRAME_NEED_COUNT
));

383 
	`mfc_debug
("RET_DEC_SEQ_FRAME_DELAY = %d\n", \

384 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_SEQ_FRAME_DELAY
));

386 
	`mfc_îr
("sequece init failed = %d\n", \

387 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_SEQ_SUCCESS
));

388  
S3C_MFC_INST_ERR_DEC_INIT_CMD_FAIL
;

391 
‰ame_√ed_cou¡
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_SEQ_FRAME_NEED_COUNT
);

397 
˘x
->
height
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_SEQ_SRC_SIZE
) & 0x03FF;

398 
˘x
->
width
 = (
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_SEQ_SRC_SIZE
) >> 10) & 0x03FF;

405 i‡(
˘x
->
codec_mode
 =
VC1_DEC
) {

406 
	`mem˝y
(&(
˘x
->
height
), ctx->
°ªam_buf„r
 + 12, 4);

407 
	`mem˝y
(&(
˘x
->
width
), ctx->
°ªam_buf„r
 + 16, 4);

410 i‡((
˘x
->
width
 & 0x0F) == 0)

411 
˘x
->
buf_width
 = ctx->
width
;

413 
˘x
->
buf_width
 = (˘x->
width
 & 0xFFFFFFF0) + 16;

415 i‡((
˘x
->
height
 & 0x0F) == 0)

416 
˘x
->
buf_height
 = ctx->
height
;

418 
˘x
->
buf_height
 = (˘x->
height
 & 0xFFFFFFF0) + 16;

420 #i‡(
	`deföed
(
DIVX_ENABLE
) && (DIVX_ENABLE == 1))

421 
˘x
->
buf_width
 +2 * ctx->
∑ddög_size
;

422 
˘x
->
buf_height
 +2 * ctx->
∑ddög_size
;

423 
˘x
->
RET_DEC_SEQ_INIT_BAK_MP4ASP_VOP_TIME_RES
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_SEQ_TIME_RES
);

425 
	`mfc_debug
("width = %d, height = %d, buf_width = %d, buf_height = %d\n", \

426 
˘x
->
width
, ctx->
height
, ctx->
buf_width
, ctx->
buf_height
);

432 #i‡(
S3C_MFC_ROTATE_ENABLE
 == 1)

434 
yuv_buf_size
 = ((
˘x
->
buf_width
 * ctx->
buf_height
 * 3Ë>> 1Ë* (
‰ame_√ed_cou¡
 + 1);

436 
yuv_buf_size
 = ((
˘x
->
buf_width
 * ctx->
buf_height
 * 3Ë>> 1Ë* 
‰ame_√ed_cou¡
;

438 
yuv_buf_size
 += 60000;

439 i‡–
	`s3c_mfc_gë_yuv_buf„r_addr
(
˘x
, 
yuv_buf_size
Ë=
FALSE
 ) {

440 
	`mfc_îr
("mfc instance init failed (required frame buffer size = %d)\n", \

441 
yuv_buf_size
);

442  
S3C_MFC_INST_ERR_ETC
;

445 
˘x
->
yuv_buf„r_Æloˇãd
 = 1;

446 
˘x
->
yuv_buf„r_cou¡
 = 
‰ame_√ed_cou¡
;

447 
˘x
->
mv_mbyã_addr
 = ctx->
phys_addr_yuv_buf„r
 + (
yuv_buf_size
 - 60000);

453 
∑øm_buf
 = (*)
	`s3c_mfc_gë_∑øm_buff_vút_addr
();

454 
‰ame_size
 = 
˘x
->
buf_width
 * ctx->
buf_height
;

455 #i‡(
	`deföed
(
DIVX_ENABLE
) && (DIVX_ENABLE == 1))

457 
i
=0; i < 
‰ame_√ed_cou¡
; i++) {

458 *((*)(
∑øm_buf
 + 
i
 * 3 * 4)Ë
˘x
->
phys_addr_yuv_buf„r
 + i * ((
‰ame_size
 * 3) >> 1) + \

459 (
˘x
->
buf_width
)*˘x->
∑ddög_size
+ ctx->padding_size;

460 *((*)(
∑øm_buf
 + 
i
 * 3 * 4 + 4)Ë
˘x
->
phys_addr_yuv_buf„r
 + i * ((
‰ame_size
 * 3) >> 1) + \

461 
‰ame_size
 + ((
˘x
->
buf_width
Ë/ 2Ë* (˘x->
∑ddög_size
 / 2) + (ctx->padding_size / 2);

462 *((*)(
∑øm_buf
 + 
i
 * 3 * 4 + 8)Ë
˘x
->
phys_addr_yuv_buf„r
 + i * ((
‰ame_size
 * 3) >> 1) + \

463 
‰ame_size
 + (‰ame_sizê>> 2Ë+ ((
˘x
->
buf_width
Ë/ 2Ë* (˘x->
∑ddög_size
 / 2) + (ctx->padding_size / 2);

466 
i
=0; i < 
‰ame_√ed_cou¡
; i++) {

467 *((*)(
∑øm_buf
 + 
i
 * 3 * 4)Ë
˘x
->
phys_addr_yuv_buf„r
 + i * ((
‰ame_size
 * 3) >> 1);

468 *((*)(
∑øm_buf
 + 
i
 * 3 * 4 + 4)Ë
˘x
->
phys_addr_yuv_buf„r
 + i * ((
‰ame_size
 * 3) >> 1) + frame_size;

469 *((*)(
∑øm_buf
 + 
i
 * 3 * 4 + 8)Ë
˘x
->
phys_addr_yuv_buf„r
 + i * ((
‰ame_size
 * 3) >> 1) + \

470 
‰ame_size
 + (frame_size >> 2);

478 
	`wrôñ
(
‰ame_√ed_cou¡
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_SET_FRAME_BUF_NUM
);

479 
	`wrôñ
(
˘x
->
buf_width
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_SET_FRAME_BUF_STRIDE
);

481 
	`s3c_mfc_issue_comm™d
(
˘x
->
ö°_no
, ctx->
codec_mode
, 
SET_FRAME_BUF
);

489 
	`S3C_MFC_INST_STATE_TRANSITION
(
˘x
, 
S3C_MFC_INST_STATE_DEC_INITIALIZED
);

492  
S3C_MFC_INST_RET_OK
;

493 
	}
}

496 
	$s3c_mfc_ö°™˚_öô_íc
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, 
s3c_mfc_codec_mode_t
 
codec_mode
, 
s3c_mfc_íc_öfo_t
 *
íc_öfo
)

497 { 
	`__D
("\n");

498 
i
;

499 
yuv_buf„r_size
;

500 
‰ame_size
;

501 
num_mbs
;

502 
¶i˚s_mb
;

503 *
∑øm_buf
;

507 i‡((
íc_öfo
->
width
 & 0x0FË|| (íc_öfo->
height
 & 0x0F)) {

508 
	`mfc_îr
("sourceÖicture widthánd height must beá multiple of 16. width : %d, height : %d\n", \

509 
íc_öfo
->
width
,Énc_öfo->
height
);

511  
S3C_MFC_INST_ERR_INVALID_PARAM
;

514 i‡(
codec_mode
 < 0 || codec_mode > 6) {

515 
	`mfc_îr
("mfcÉncoder supports MPEG4, H.264ánd H.263\n");

516  
S3C_MFC_INST_ERR_INVALID_PARAM
;

519 i‡(
íc_öfo
->
g›_numbî
 > 60) {

520 
	`mfc_îr
("maximum g›Çumbî i†60. GOPÇumbî = %d\n", 
íc_öfo
->
g›_numbî
);

521  
S3C_MFC_INST_ERR_INVALID_PARAM
;

524 
˘x
->
width
 = 
íc_öfo
->width;

525 
˘x
->
height
 = 
íc_öfo
->height;

526 
˘x
->
‰ame_øã_ªsiduÆ
 = 
íc_öfo
->frame_rate_residual;

527 
˘x
->
‰ame_øã_divisi⁄
 = 
íc_öfo
->frame_rate_division;

528 
˘x
->
g›_numbî
 = 
íc_öfo
->gop_number;

529 
˘x
->
bôøã
 = 
íc_öfo
->bitrate;

535 
˘x
->
yuv_buf„r_cou¡
 = 2;

541 i‡((
˘x
->
width
 & 0x0F) == 0)

542 
˘x
->
buf_width
 = ctx->
width
;

544 
˘x
->
buf_width
 = (˘x->
width
 & 0xFFFFFFF0) + 16;

547 
˘x
->
codec_mode
 = codec_mode;

549 
	`mfc_debug
("˘x->ö°_nÿ%d\n", 
˘x
->
ö°_no
);

550 
	`mfc_debug
("˘x->codec_modê%d\n", 
˘x
->
codec_mode
);

556 
˘x
->
ö°_no
) {

558 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
, \

559 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR0
);

560 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR0
);

563 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
, \

564 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR1
);

565 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR1
);

568 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
, \

569 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR2
);

570 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR2
);

573 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
, \

574 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR3
);

575 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR3
);

578 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
, \

579 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR4
);

580 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR4
);

583 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
, \

584 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR5
);

585 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR5
);

588 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
, \

589 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR6
);

590 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR6
);

593 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
, \

594 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR7
);

595 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR7
);

599 
	`wrôñ
(0x1C, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_STRM_BUF_CTRL
);

606 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_BIT_BUF_ADDR
);

607 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_BIT_BUF_SIZE
);

608 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_OPTION
);

609 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_COD_STD
);

610 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_SRC_SIZE
);

611 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_SRC_F_RATE
);

612 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_MP4_PARA
);

613 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_263_PARA
);

614 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_264_PARA
);

615 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_SLICE_MODE
);

616 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_GOP_NUM
);

617 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_RC_PARA
);

618 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_RC_BUF_SIZE
);

619 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_INTRA_MB
);

620 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_FMO
);

621 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_INTRA_QP
);

622 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_ENC_SEQ_SUCCESS
);

623 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_RC_OPTION
);

624 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_RC_QP_MAX
);

625 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_RC_GAMMA
);

626 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_TMP_BUF1
);

627 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_TMP_BUF2
);

628 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_TMP_BUF3
);

629 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_TMP_BUF4
);

631 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_BIT_BUF_ADDR
);

632 
	`wrôñ
(
S3C_MFC_LINE_BUF_SIZE_PER_INSTANCE
 / 1024, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_BIT_BUF_SIZE
);

633 
	`wrôñ
(
S3C_MFC_MB_BIT_REPORT_DISABLE
 | 
S3C_MFC_SLICE_INFO_REPORT_DISABLE
 | 
S3C_MFC_AUD_DISABLE
 | \

634 
S3C_MFC_MB_QP_REPORT_DISABLE
 | 
S3C_MFC_CONST_QP_DISABLE
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_OPTION
);

635 
	`wrôñ
((
˘x
->
width
 << 10Ë| ctx->
height
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_SRC_SIZE
);

636 
	`wrôñ
((
˘x
->
‰ame_øã_divisi⁄
 << 16Ë| ctx->
‰ame_øã_ªsiduÆ
, \

637 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_SRC_F_RATE
);

638 
	`wrôñ
(
S3C_MFC_SLICE_MODE_ONE
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_SLICE_MODE
);

639 
	`wrôñ
(
˘x
->
g›_numbî
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_GOP_NUM
);

640 
	`wrôñ
(
S3C_MFC_RC_ENABLE
 | (
˘x
->
bôøã
 << 1Ë| (
SKIP_ENABLE
 << 31), \

641 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_RC_PARA
);

642 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_INTRA_MB
);

643 
	`wrôñ
(
FMO_DISABLE
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_FMO
);

644 
	`wrôñ
(
S3C_MFC_USE_GAMMA_DISABLE
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_RC_OPTION
);

646 
˘x
->
codec_mode
) {

647 
MP4_ENC
:

648 
	`wrôñ
(
S3C_MFC_MPEG4_ENCODE
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_COD_STD
);

649 
	`wrôñ
(
S3C_MFC_DATA_PART_DISABLE
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_MP4_PARA
);

652 
H263_ENC
:

653 
	`wrôñ
(
S3C_MFC_H263_ENCODE
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_COD_STD
);

654 
	`wrôñ
(
˘x
->
h263_™√x
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_263_PARA
);

656 i‡(
˘x
->
íc_num_¶i˚s
){

661 
num_mbs
 = (
íc_öfo
->
width
 >> 4Ë* (íc_öfo->
height
 >> 4);

662 
¶i˚s_mb
 = (
num_mbs
 / 
˘x
->
íc_num_¶i˚s
);

663 
	`wrôñ
(
S3C_MFC_SLICE_MODE_MULTIPLE
 | (1 << 1Ë| (
¶i˚s_mb
 << 2), \

664 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_SLICE_MODE
);

665 } i‡(
˘x
->
h263_™√x
 == 0) {

666 i‡(((
íc_öfo
->
width
 =704Ë&& (íc_öfo->
height
 == 576)) || \

667 ((
íc_öfo
->
width
 =352Ë&& (íc_öfo->
height
 == 288))|| \

668 ((
íc_öfo
->
width
 =176Ë&& (íc_öfo->
height
 == 144)) || \

669 ((
íc_öfo
->
width
 =128Ë&& (íc_öfo->
height
 == 96))) {

670 
	`mfc_debug
("ENC_SEQ_263_PARA = 0x%X\n", \

671 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_263_PARA
));

673 
	`mfc_îr
("h.263Éncoder supports 4cif, cif, qcifánd sub-qcif\n");

674 
	`mfc_îr
("whenáll Annex were off\n");

675  
S3C_MFC_INST_ERR_INVALID_PARAM
;

681 
AVC_ENC
:

682 
	`wrôñ
(
S3C_MFC_H264_ENCODE
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_COD_STD
);

683 
	`wrôñ
(~(0xFFFF), 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_264_PARA
);

684 i‡(
˘x
->
íc_num_¶i˚s
) {

689 
num_mbs
 = (
íc_öfo
->
width
 >> 4Ë* (íc_öfo->
height
 >> 4);

690 
¶i˚s_mb
 = (
num_mbs
 / 
˘x
->
íc_num_¶i˚s
);

691 
	`wrôñ
(
S3C_MFC_SLICE_MODE_MULTIPLE
 | (1 << 1Ë| (
¶i˚s_mb
<< 2), \

692 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_SLICE_MODE
);

698 
	`mfc_îr
("mfcÉncoder supports mpeg4, h.264ánd h.263\n");

699  
S3C_MFC_INST_ERR_INVALID_PARAM
;

702 
	`wrôñ
(
USER_QP_MAX_DISABLE
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_SEQ_RC_OPTION
);

705 
	`s3c_mfc_issue_comm™d
(
˘x
->
ö°_no
, ctx->
codec_mode
, 
SEQ_INIT
);

707 i‡(
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_ENC_SEQ_SUCCESS
Ë=
TRUE
) {

708 
	`mfc_debug
("encoding sequence init success\n");

710 
	`mfc_îr
("failÅoÉncoding sequence init\n");

711  
S3C_MFC_INST_ERR_ENC_INIT_CMD_FAIL
;

714 
yuv_buf„r_size
 = ((
˘x
->
width
 * ctx->
height
 * 3Ë>> 1Ë* (˘x->
yuv_buf„r_cou¡
 + 1);

715 i‡(
	`s3c_mfc_gë_yuv_buf„r_addr
(
˘x
, 
yuv_buf„r_size
Ë=
FALSE
) {

716 
	`mfc_îr
("failÅo Initialization of MFC instance\n");

717 
	`mfc_îr
("failÅo mfc instance inititialization (required frame buffer size = %d)\n", \

718 
yuv_buf„r_size
);

719  
S3C_MFC_INST_ERR_ETC
;

721 
˘x
->
yuv_buf„r_Æloˇãd
 = 1;

727 
∑øm_buf
 = (*)
	`s3c_mfc_gë_∑øm_buff_vút_addr
();

728 
‰ame_size
 = 
˘x
->
width
 * ctx->
height
;

729 
i
=0; i < 
˘x
->
yuv_buf„r_cou¡
; i++) {

730 *((*)(
∑øm_buf
 + 
i
 * 3 * 4)Ë
˘x
->
phys_addr_yuv_buf„r
 + (ò+ 1Ë* ((
‰ame_size
 * 3) >> 1);

731 *((*)(
∑øm_buf
 + 
i
 * 3 * 4 + 4)Ë
˘x
->
phys_addr_yuv_buf„r
 + (ò+ 1Ë* ((
‰ame_size
 * 3) >> 1) + \

732 
‰ame_size
;

733 *((*)(
∑øm_buf
 + 
i
 * 3 * 4 + 8)Ë
˘x
->
phys_addr_yuv_buf„r
 + (ò+ 1Ë* ((
‰ame_size
 * 3) >> 1) + \

734 
‰ame_size
 + (frame_size >> 2);

741 
	`wrôñ
(
˘x
->
yuv_buf„r_cou¡
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_SET_FRAME_BUF_NUM
);

742 
	`wrôñ
(
˘x
->
buf_width
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_SET_FRAME_BUF_STRIDE
);

744 
	`s3c_mfc_issue_comm™d
(
˘x
->
ö°_no
, ctx->
codec_mode
, 
SET_FRAME_BUF
);

750 
	`S3C_MFC_INST_STATE_TRANSITION
(
˘x
, 
S3C_MFC_INST_STATE_ENC_INITIALIZED
);

753  
S3C_MFC_INST_RET_OK
;

754 
	}
}

757 
	$s3c_mfc_ö°_dec
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, 
°rm_Àng
)

758 { 
	`__D
("\n");

759 #i‡(
S3C_MFC_ROTATE_ENABLE
 == 1)

760 
‰ame_size
;

762 
‰m_size
;

765 i‡(
	`S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_DELETED
)) {

766 
	`mfc_îr
("mfc instance is deleted\n");

767  
S3C_MFC_INST_ERR_STATE_DELETED
;

769 i‡(
	`S3C_MFC_INST_STATE_PWR_OFF_FLAG_CHECK
(
˘x
)) {

770 
	`mfc_îr
("mfc instance is in Power-Off state.\n");

771  
S3C_MFC_INST_ERR_STATE_POWER_OFF
;

773 i‡(
	`S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_CREATED
)) {

774 
	`mfc_îr
("mfc instance isÇot initialized\n");

775  
S3C_MFC_INST_ERR_STATE_CHK
;

783 i‡(
°rm_Àng
 > 0) {

784 
˘x
->
ö°_no
) {

786 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR0
);

787 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR0
);

790 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR1
);

791 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR1
);

794 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR2
);

795 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR2
);

798 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR3
);

799 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR3
);

802 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR4
);

803 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR4
);

806 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR5
);

807 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR5
);

810 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR6
);

811 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR6
);

814 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_RD_PTR7
);

815 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 + 
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR7
);

820 
	`wrôñ
(
˘x
->
po°_rŸ©i⁄_mode
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_PIC_RUN
);

822 #i‡(
S3C_MFC_ROTATE_ENABLE
 == 1)

823 i‡(
˘x
->
po°_rŸ©i⁄_mode
 & 0x0010) {

824 
dec_pic_rŸ_addr_y
;

826 
‰ame_size
 = 
˘x
->
buf_width
 * ctx->
buf_height
;

828 
dec_pic_rŸ_addr_y
 = 
˘x
->
phys_addr_yuv_buf„r
 + ctx->
yuv_buf„r_cou¡
 * ((
‰ame_size
 * 3) >> 1);

829 
	`wrôñ
(
dec_pic_rŸ_addr_y
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_PIC_ROT_ADDR_Y
);

830 
	`wrôñ
(
dec_pic_rŸ_addr_y
 + 
‰ame_size
, 
s3c_mfc_s‰_ba£_vút_addr
 + \

831 
S3C_MFC_PARAM_DEC_PIC_ROT_ADDR_CB
);

832 
	`wrôñ
(
dec_pic_rŸ_addr_y
 + 
‰ame_size
 + (frame_size >> 2), \

833 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_PIC_ROT_ADDR_CR
);

836 
˘x
->
po°_rŸ©i⁄_mode
 & 0x0003) {

839 
	`wrôñ
(
˘x
->
buf_width
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_PIC_ROT_STRIDE
);

845 
	`wrôñ
(
˘x
->
buf_height
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_PIC_ROT_STRIDE
);

853 
‰m_size
 = 
˘x
->
buf_width
 * ctx->
buf_height
;

854 
	`wrôñ
(0x7, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_PIC_OPTION
);

855 
	`wrôñ
(
˘x
->
mv_mbyã_addr
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_PIC_MV_ADDR
);

856 
	`wrôñ
(
˘x
->
mv_mbyã_addr
 + 25920, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_PIC_MBTYPE_ADDR
);

858 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 & 0xFFFFFFFC, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_PIC_BB_START
);

859 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
 & 0x00000003, \

860 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_PIC_START_BYTE
);

861 
	`wrôñ
(
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_PIC_CHUNK_SIZE
);

863 
	`wrôñ
(
°rm_Àng
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_DEC_PIC_RUN
);

864 
	`s3c_mfc_£t_eos
(1);

868 i‡(!
	`s3c_mfc_issue_comm™d
(
˘x
->
ö°_no
, ctx->
codec_mode
, 
PIC_RUN
)) {

869  
S3C_MFC_INST_ERR_DEC_PIC_RUN_CMD_FAIL
;

872 i‡(
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_PIC_SUCCESS
) != 1) {

873 
	`mfc_w¨n
("RET_DEC_PIC_SUCCESS isÇot value of 1(=SUCCESS) value is %d\n", \

874 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_PIC_SUCCESS
));

877 
˘x
->
run_ödex
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_PIC_IDX
);

879 i‡(
˘x
->
run_ödex
 > 30) {

880 i‡(
˘x
->
run_ödex
 == 0xFFFFFFFF) {

881 
	`mfc_w¨n
("end of stream\n");

882  
S3C_MFC_INST_ERR_DEC_EOS
;

883 } i‡(
˘x
->
run_ödex
 == 0xFFFFFFFD) {

884 
	`mfc_debug
("noÖictureÅo be displayed\n");

886 
	`mfc_îr
("ÁûÅÿdecodög,Ñë = %d\n", 
˘x
->
run_ödex
);

887  
S3C_MFC_INST_ERR_DEC_DECODE_FAIL_ETC
;

891 #i‡(
	`deföed
(
DIVX_ENABLE
) && (DIVX_ENABLE == 1))

892 
˘x
->
RET_DEC_PIC_RUN_BAK_BYTE_CONSUMED
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_PIC_BCNT
);

893 
˘x
->
RET_DEC_PIC_RUN_BAK_MP4ASP_FCODE
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_PIC_FCODE_FWD
);

894 
˘x
->
RET_DEC_PIC_RUN_BAK_MP4ASP_TIME_BASE_LAST
 = \

895 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_PIC_TIME_BASE_LAST
);

896 
˘x
->
RET_DEC_PIC_RUN_BAK_MP4ASP_NONB_TIME_LAST
 = \

897 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_PIC_NONB_TIME_LAST
);

898 
˘x
->
RET_DEC_PIC_RUN_BAK_MP4ASP_MP4ASP_TRD
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_PIC_TRD
);

905 
	`S3C_MFC_INST_STATE_TRANSITION
(
˘x
, 
S3C_MFC_INST_STATE_DEC_PIC_RUN_LINE_BUF
);

907  
S3C_MFC_INST_RET_OK
;

908 
	}
}

910 
	$s3c_mfc_ö°_íc
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, *
íc_d©a_size
, *
hódî_size
)

911 { 
	`__D
("\n");

912 
hdr_size
, 
hdr_size2
;

913 
size
;

914 
bôs_wr_±r_vÆue
 = 0;

915 *
hdr_buf_tmp
=
NULL
;

916 *
°¨t
;

919 i‡(!
	`S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_ENC_INITIALIZED
) && \

920 !
	`S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_ENC_PIC_RUN_LINE_BUF
)) {

921 
	`mfc_îr
("mfcÉncoder instance isÇot initialized orÇot usingÅheÜine buffer\n");

922  
S3C_MFC_INST_ERR_STATE_CHK
;

926 i‡(
	`S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_ENC_INITIALIZED
)) {

927 i‡(
˘x
->
codec_mode
 =
MP4_ENC
) {

929 
	`s3c_mfc_ö°_íc_hódî
(
˘x
, 0, 0, ctx->
phys_addr_°ªam_buf„r
, ctx->
°ªam_buf„r_size
, \

930 &
hdr_size
);

933 
hdr_buf_tmp
 = (*)
	`kmÆloc
(
hdr_size
, 
GFP_KERNEL
);

934 i‡(
hdr_buf_tmp
) {

935 
	`mem˝y
(
hdr_buf_tmp
, 
˘x
->
°ªam_buf„r
, 
hdr_size
);

937 
°¨t
 = 
˘x
->
°ªam_buf„r
;

938 
size
 = 
hdr_size
;

939 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_FROM_DEVICE
);

941  
S3C_MFC_INST_ERR_MEMORY_ALLOCATION_FAIL
;

943 } i‡(
˘x
->
codec_mode
 =
AVC_ENC
) {

945 
	`s3c_mfc_ö°_íc_hódî
(
˘x
, 0, 0, ctx->
phys_addr_°ªam_buf„r
, ctx->
°ªam_buf„r_size
, \

946 &
hdr_size
);

947 
	`s3c_mfc_ö°_íc_hódî
(
˘x
, 1, 0, ctx->
phys_addr_°ªam_buf„r
 + (
hdr_size
 + 3), \

948 
˘x
->
°ªam_buf„r_size
-(
hdr_size
+3), &
hdr_size2
);

951 
hdr_buf_tmp
 = (*)
	`kmÆloc
(
hdr_size
 + 3 + 
hdr_size2
, 
GFP_KERNEL
);

952 i‡(
hdr_buf_tmp
) {

953 
	`mem˝y
(
hdr_buf_tmp
, 
˘x
->
°ªam_buf„r
, 
hdr_size
);

955 
°¨t
 = 
˘x
->
°ªam_buf„r
;

956 
size
 = 
hdr_size
;

957 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_FROM_DEVICE
);

959 
	`mem˝y
(
hdr_buf_tmp
 + 
hdr_size
, (*)(()(
˘x
->
°ªam_buf„r
 + \

960 (
hdr_size
 + 3)Ë& 0xFFFFFFFC), 
hdr_size2
);

962 
°¨t
 = (*)(()(
˘x
->
°ªam_buf„r
 + (
hdr_size
 + 3)) & 0xFFFFFFFC);

963 
size
 = 
hdr_size2
;

964 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_FROM_DEVICE
);

966 
hdr_size
 +
hdr_size2
;

968  
S3C_MFC_INST_ERR_MEMORY_ALLOCATION_FAIL
;

974 i‡–(
˘x
->
codec_mode
 =
MP4_ENC
) &&

975 
	`S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_ENC_PIC_RUN_LINE_BUF
) &&

976 (
˘x
->
íc_ch™ge_‰amî©e
 == 1) ) {

979 
	`s3c_mfc_ö°_íc_hódî
(
˘x
, 0, 0, ctx->
phys_addr_°ªam_buf„r
, ctx->
°ªam_buf„r_size
, \

980 &
hdr_size
);

983 
hdr_buf_tmp
 = (*)
	`kmÆloc
(
hdr_size
, 
GFP_KERNEL
);

984 i‡(
hdr_buf_tmp
) {

985 
	`mem˝y
(
hdr_buf_tmp
, 
˘x
->
°ªam_buf„r
, 
hdr_size
);

987 
°¨t
 = 
˘x
->
°ªam_buf„r
;

988 
size
 = 
hdr_size
;

989 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_FROM_DEVICE
);

991  
S3C_MFC_INST_ERR_MEMORY_ALLOCATION_FAIL
;

995 i‡((
˘x
->
íc_pic_›ti⁄
 & 0x0F000000Ë&& (˘x->
codec_mode
 =
AVC_ENC
)) {

997 
	`s3c_mfc_ö°_íc_hódî
(
˘x
, 4, ((˘x->
íc_pic_›ti⁄
 & 0x0F000000) >> 24), \

998 
˘x
->
phys_addr_°ªam_buf„r
, ctx->
°ªam_buf„r_size
, &
hdr_size
);

1000 
hdr_buf_tmp
 = (*)
	`kmÆloc
(
hdr_size
, 
GFP_KERNEL
);

1001 i‡(
hdr_buf_tmp
) {

1002 
	`mem˝y
(
hdr_buf_tmp
, 
˘x
->
°ªam_buf„r
, 
hdr_size
);

1004 
°¨t
 = 
˘x
->
°ªam_buf„r
;

1005 
size
 = 
hdr_size
;

1006 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_FROM_DEVICE
);

1009  
S3C_MFC_INST_ERR_MEMORY_ALLOCATION_FAIL
;

1014 
	`wrôñ
(
˘x
->
phys_addr_yuv_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_PIC_SRC_ADDR_Y
);

1015 
	`wrôñ
(
˘x
->
phys_addr_yuv_buf„r
 + ctx->
buf_width
 * ctx->
height
, 
s3c_mfc_s‰_ba£_vút_addr
 + \

1016 
S3C_MFC_PARAM_ENC_PIC_SRC_ADDR_CB
);

1017 
	`wrôñ
(
˘x
->
phys_addr_yuv_buf„r
 + ((˘x->
buf_width
 * ctx->
height
 * 5) >> 2), \

1018 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_PIC_SRC_ADDR_CR
);

1019 
	`wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_PIC_ROT_MODE
);

1020 
	`wrôñ
((
˘x
->
íc_pic_›ti⁄
 & 0x0000FFFF), 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_PIC_OPTION
);

1021 
	`wrôñ
(
˘x
->
phys_addr_°ªam_buf„r
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_PIC_BB_START
);

1022 
	`wrôñ
(
˘x
->
°ªam_buf„r_size
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_PIC_BB_SIZE
);

1024 i‡(!
	`s3c_mfc_issue_comm™d
(
˘x
->
ö°_no
, ctx->
codec_mode
, 
PIC_RUN
)) {

1025  
S3C_MFC_INST_ERR_ENC_PIC_RUN_CMD_FAIL
;

1028 
˘x
->
íc_pic_›ti⁄
 = 0;

1029 
˘x
->
run_ödex
 = 0;

1030 
˘x
->
íc_ch™ge_‰amî©e
 = 0;

1032 
˘x
->
ö°_no
) {

1034 
bôs_wr_±r_vÆue
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR0
);

1037 
bôs_wr_±r_vÆue
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR1
);

1040 
bôs_wr_±r_vÆue
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR2
);

1043 
bôs_wr_±r_vÆue
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR3
);

1046 
bôs_wr_±r_vÆue
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR4
);

1049 
bôs_wr_±r_vÆue
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR5
);

1052 
bôs_wr_±r_vÆue
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR6
);

1055 
bôs_wr_±r_vÆue
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR7
);

1059 *
íc_d©a_size
 = 
bôs_wr_±r_vÆue
 - 
˘x
->
phys_addr_°ªam_buf„r
;

1060 *
hódî_size
 = 0;

1062 i‡(
hdr_buf_tmp
) {

1063 
	`memmove
(
˘x
->
°ªam_buf„r
 + 
hdr_size
, ctx->°ªam_buf„r, *
íc_d©a_size
);

1065 
°¨t
 = 
˘x
->
°ªam_buf„r
;

1066 
size
 = 
hdr_size
 + (*
íc_d©a_size
);

1067 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_TO_DEVICE
);

1069 
	`mem˝y
(
˘x
->
°ªam_buf„r
, 
hdr_buf_tmp
, 
hdr_size
);

1071 
°¨t
 = 
˘x
->
°ªam_buf„r
;

1072 
size
 = 
hdr_size
;

1073 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_TO_DEVICE
);

1075 
	`k‰ì
(
hdr_buf_tmp
);

1077 *
íc_d©a_size
 +
hdr_size
;

1078 *
hódî_size
 = 
hdr_size
;

1083 
	`S3C_MFC_INST_STATE_TRANSITION
(
˘x
, 
S3C_MFC_INST_STATE_ENC_PIC_RUN_LINE_BUF
);

1086  
S3C_MFC_INST_RET_OK
;

1087 
	}
}

1092 
s3c_mfc_ö°_íc_hódî
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, 
hdr_code
, 
hdr_num
, 
outbuf_physiˇl_addr
,\

1093 
outbuf_size
, *
hdr_size
)

1094 { 
__D
("\n");

1095 
	gbô_wr_±r_vÆue
 = 0;

1098 i‡(!
S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_ENC_INITIALIZED
) && \

1099 !
S3C_MFC_INST_STATE_CHECK
(
˘x
, 
S3C_MFC_INST_STATE_ENC_PIC_RUN_LINE_BUF
)) {

1100 
mfc_îr
("mfcÉncoder instance isÇot initialized orÇot usingÅheÜine buffer\n");

1101  
	gS3C_MFC_INST_ERR_STATE_CHK
;

1104 i‡((
	g˘x
->
	gcodec_mode
 !
MP4_ENC
Ë&& (
˘x
->
codec_mode
 !
AVC_ENC
)) {

1105  
S3C_MFC_INST_ERR_WRONG_CODEC_MODE
;

1109 
wrôñ
(
hdr_code
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_HEADER_CODE
);

1110 
wrôñ
(
outbuf_physiˇl_addr
 & 0xFFFFFFFC, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_HEADER_BB_START
);

1111 
wrôñ
(
outbuf_size
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_HEADER_BB_SIZE
);

1113 i‡(
	ghdr_code
 == 4)

1114 
wrôñ
(
hdr_num
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_HEADER_NUM
);

1116 i‡(!
s3c_mfc_issue_comm™d
(
˘x
->
ö°_no
, ctx->
codec_mode
, 
ENC_HEADER
)) {

1117  
	gS3C_MFC_INST_ERR_ENC_HEADER_CMD_FAIL
;

1120 
	g˘x
->
	gö°_no
) {

1122 
bô_wr_±r_vÆue
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR0
);

1125 
bô_wr_±r_vÆue
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR1
);

1128 
bô_wr_±r_vÆue
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR2
);

1131 
bô_wr_±r_vÆue
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR3
);

1134 
bô_wr_±r_vÆue
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR4
);

1137 
bô_wr_±r_vÆue
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR5
);

1140 
bô_wr_±r_vÆue
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR6
);

1143 
bô_wr_±r_vÆue
 = 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BIT_STR_WR_PTR7
);

1147 *
	ghdr_size
 = 
bô_wr_±r_vÆue
 - 
ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_HEADER_BB_START
);

1150  
	gS3C_MFC_INST_RET_OK
;

1154 
s3c_mfc_ö°_íc_∑øm_ch™ge
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, 
∑øm_ch™ge_íabÀ
, \

1155 
∑øm_ch™ge_vÆ
)

1156 { 
__D
("\n");

1157 
	gnum_mbs
;

1158 
	g¶i˚s_mb
;

1161 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_ENABLE
);

1162 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_GOP_NUM
);

1163 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_INTRA_QP
);

1164 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_BITRATE
);

1165 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_F_RATE
);

1166 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_INTRA_REFRESH
);

1167 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_SLICE_MODE
);

1168 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_HEC_MODE
);

1169 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_RESERVED0
);

1170 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_RESERVED1
);

1171 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_RESERVED2
);

1172 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_RESERVED3
);

1173 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_RESERVED4
);

1174 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_RESERVED5
);

1175 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_RESERVED6
);

1176 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_RESERVED7
);

1177 
wrôñ
(0x0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_ENC_CHANGE_SUCCESS
);

1178 
wrôñ
(
∑øm_ch™ge_íabÀ
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_ENABLE
);

1180 i‡(
	g∑øm_ch™ge_íabÀ
 == (1 << 0)) {

1181 i‡(
∑øm_ch™ge_vÆ
 > 60) {

1182 
mfc_îr
("mfcÉncoderÖarameter change value is invalid\n");

1183  
	gS3C_MFC_INST_ERR_ENC_PARAM_CHANGE_INVALID_VALUE
;

1185 
wrôñ
(
∑øm_ch™ge_vÆ
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_GOP_NUM
);

1186 } i‡(
	g∑øm_ch™ge_íabÀ
 == (1 << 1)) {

1187 i‡(((
˘x
->
codec_mode
 =
MP4_DEC
 || ctx->codec_modê=
H263_DEC
) && \

1188 (
∑øm_ch™ge_vÆ
 == 0 ||Öaram_change_val > 31)) \

1189 || (
˘x
->
codec_mode
 =
AVC_DEC
 && 
∑øm_ch™ge_vÆ
 > 51)) {

1190 
mfc_îr
("mfcÉncoderÖarameter change value is invalid\n");

1191  
	gS3C_MFC_INST_ERR_ENC_PARAM_CHANGE_INVALID_VALUE
;

1193 
wrôñ
(
∑øm_ch™ge_vÆ
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_INTRA_QP
);

1194 } i‡(
	g∑øm_ch™ge_íabÀ
 == (1 << 2)) {

1195 i‡(
∑øm_ch™ge_vÆ
 > 0x07FFF) {

1196 
mfc_îr
("mfcÉncoderÖarameter change value is invalid\n");

1197  
	gS3C_MFC_INST_ERR_ENC_PARAM_CHANGE_INVALID_VALUE
;

1199 
wrôñ
(
∑øm_ch™ge_vÆ
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_BITRATE
);

1200 } i‡(
	g∑øm_ch™ge_íabÀ
 == (1 << 3)) {

1201 
wrôñ
(
∑øm_ch™ge_vÆ
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_F_RATE
);

1202 
	g˘x
->
	gíc_ch™ge_‰amî©e
 = 1;

1203 } i‡(
	g∑øm_ch™ge_íabÀ
 == (1 << 4)) {

1204 i‡(
∑øm_ch™ge_vÆ
 > ((
˘x
->
width
 * ctx->
height
) >> 8)) {

1205 
mfc_îr
("mfcÉncoderÖarameter change value is invalid\n");

1206  
	gS3C_MFC_INST_ERR_ENC_PARAM_CHANGE_INVALID_VALUE
;

1208 
wrôñ
(
∑øm_ch™ge_vÆ
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_INTRA_REFRESH
);

1209 } i‡(
	g∑øm_ch™ge_íabÀ
 == (1 << 5)) {

1214 
num_mbs
 = (
˘x
->
width
 >> 4Ë* (˘x->
height
 >> 4);

1216 i‡(
	g∑øm_ch™ge_vÆ
 > 256 ||Ö¨am_ch™ge_vÆ > 
	gnum_mbs
) {

1217 
mfc_îr
("mfcÉncoderÖarameter change value is invalid\n");

1218  
	gS3C_MFC_INST_ERR_ENC_PARAM_CHANGE_INVALID_VALUE
;

1221 i‡(
	g∑øm_ch™ge_vÆ
 == 0) {

1222 
wrôñ
(
S3C_MFC_SLICE_MODE_ONE
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_SLICE_MODE
);

1224 
	g¶i˚s_mb
 = (
num_mbs
 / 
∑øm_ch™ge_vÆ
);

1225 
	g˘x
->
	gíc_num_¶i˚s
 = 
∑øm_ch™ge_vÆ
;

1227 
wrôñ
(
S3C_MFC_SLICE_MODE_MULTIPLE
 | (1 << 1Ë| (
¶i˚s_mb
<< 2), \

1228 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_ENC_CHANGE_SLICE_MODE
);

1232 i‡(!
s3c_mfc_issue_comm™d
(
˘x
->
ö°_no
, ctx->
codec_mode
, 
ENC_PARAM_CHANGE
)) {

1233  
	gS3C_MFC_INST_ERR_ENC_HEADER_CMD_FAIL
;

1237  
	gS3C_MFC_INST_RET_OK
;

	@s3c_mfc_instance.h

13 #i‚de‡
_S3C_MFC_INSTANCE_H


14 
	#_S3C_MFC_INSTANCE_H


	)

17 
	~"s3c_mfc_ba£.h
"

18 
	~"s3c_mfc_ty≥s.h
"

23 
	mS3C_MFC_INST_STATE_DELETED
 = 0,

24 
	mS3C_MFC_INST_STATE_CREATED
 = 10,

25 
	mS3C_MFC_INST_STATE_DEC_INITIALIZED
 = 20,

26 
	mS3C_MFC_INST_STATE_DEC_PIC_RUN_LINE_BUF
,

27 
	mS3C_MFC_INST_STATE_ENC_INITIALIZED
 = 30,

28 
	mS3C_MFC_INST_STATE_ENC_PIC_RUN_LINE_BUF
,

29 } 
	ts3c_mfc_ö°™˚_°©e_t
;

32 
	#S3C_MFC_INST_STATE_PWR_OFF_FLAG
 0x40000000

	)

33 
	#S3C_MFC_INST_STATE_BUF_FILL_REQ
 0x80000000

	)

35 
	#S3C_MFC_INST_STATE_TRANSITION
(
ö°_˘x
, 
°©e
Ë((ö°_˘x)->
°©e_v¨
 = (°©e))

	)

36 
	#S3C_MFC_INST_STATE
(
ö°_˘x
Ë((ö°_˘x)->
°©e_v¨
 & 0x0FFFFFFF)

	)

37 
	#S3C_MFC_INST_STATE_CHECK
(
ö°_˘x
, 
°©e
Ë(((ö°_˘x)->
°©e_v¨
 & 0x0FFFFFFFË=(°©e))

	)

39 
	#S3C_MFC_INST_STATE_PWR_OFF_FLAG_SET
(
ö°_˘x
Ë((ö°_˘x)->
°©e_v¨
 |
S3C_MFC_INST_STATE_PWR_OFF_FLAG
)

	)

40 
	#S3C_MFC_INST_STATE_PWR_OFF_FLAG_CLEAR
(
ö°_˘x
Ë((ö°_˘x)->
°©e_v¨
 &~
S3C_MFC_INST_STATE_PWR_OFF_FLAG
)

	)

41 
	#S3C_MFC_INST_STATE_PWR_OFF_FLAG_CHECK
(
ö°_˘x
Ë((ö°_˘x)->
°©e_v¨
 & 
S3C_MFC_INST_STATE_PWR_OFF_FLAG
)

	)

42 
	#S3C_MFC_INST_STATE_BUF_FILL_REQ_SET
(
ö°_˘x
Ë((ö°_˘x)->
°©e_v¨
 |
S3C_MFC_INST_STATE_BUF_FILL_REQ
)

	)

43 
	#S3C_MFC_INST_STATE_BUF_FILL_REQ_CLEAR
(
ö°_˘x
Ë((ö°_˘x)->
°©e_v¨
 &~
S3C_MFC_INST_STATE_BUF_FILL_REQ
)

	)

44 
	#S3C_MFC_INST_STATE_BUF_FILL_REQ_CHECK
(
ö°_˘x
Ë((ö°_˘x)->
°©e_v¨
 & 
S3C_MFC_INST_STATE_BUF_FILL_REQ
)

	)

49 
	mö°_no
;

51 
s3c_mfc_codec_mode_t
 
	mcodec_mode
;

53 *
	m°ªam_buf„r
;

54 
	mphys_addr_°ªam_buf„r
;

55 
	m°ªam_buf„r_size
;

57 *
	myuv_buf„r
;

58 
	mphys_addr_yuv_buf„r
;

59 
	myuv_buf„r_size
;

60 
	mmv_mbyã_addr
;

63 
	myuv_buf„r_Æloˇãd
;

65 
	mwidth
, 
	mheight
;

66 
	mbuf_width
, 
	mbuf_height
;

68 
	myuv_buf„r_cou¡
;

71 
	mpo°_rŸ©i⁄_mode
;

73 
	mdec_pic_›ti⁄
;

77 
	m‰ame_øã_ªsiduÆ
;

78 
	m‰ame_øã_divisi⁄
;

79 
	mg›_numbî
;

80 
	mbôøã
;

83 
	mh263_™√x
;

84 
	míc_num_¶i˚s
;

87 
	míc_pic_›ti⁄
;

90 
	míc_ch™ge_‰amî©e
;

91 
	m‰ame_num
;

92 
	mrun_ödex
;

94 
s3c_mfc_ö°™˚_°©e_t
 
	m°©e_v¨
;

96 #i‡(
deföed
(
DIVX_ENABLE
) && (DIVX_ENABLE == 1))

98 
	m∑ddög_size
;

105 
	mRET_DEC_SEQ_INIT_BAK_MP4ASP_VOP_TIME_RES
;

106 
	mRET_DEC_PIC_RUN_BAK_BYTE_CONSUMED
;

107 
	mRET_DEC_PIC_RUN_BAK_MP4ASP_FCODE
;

108 
	mRET_DEC_PIC_RUN_BAK_MP4ASP_TIME_BASE_LAST
;

109 
	mRET_DEC_PIC_RUN_BAK_MP4ASP_NONB_TIME_LAST
;

110 
	mRET_DEC_PIC_RUN_BAK_MP4ASP_MP4ASP_TRD
;

112 } 
	ts3c_mfc_ö°_c⁄ãxt_t
;

116 
	mwidth
;

117 
	mheight
;

118 
	m‰ame_øã_ªsiduÆ
;

119 
	m‰ame_øã_divisi⁄
;

120 
	mg›_numbî
;

121 
	mbôøã
;

122 } 
	ts3c_mfc_íc_öfo_t
;

134 
s3c_mfc_ö°_c⁄ãxt_t
 *
s3c_mfc_ö°_gë_c⁄ãxt
(
ö°_no
);

135 
s3c_mfc_ö°_gë_no
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
);

136 
BOOL
 
s3c_mfc_ö°_gë_°ªam_buff_rw_±rs
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, **
ªad_±r
, **
wrôe_±r
);

138 
s3c_mfc_ö°_c⁄ãxt_t
 *
s3c_mfc_ö°_¸óã
();

139 
s3c_mfc_ö°_dñ
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
);

141 
s3c_mfc_ö°_pow_off_°©e
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
);

142 
s3c_mfc_ö°_pow_⁄_°©e
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
);

144 
s3c_mfc_ö°_öô_dec
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, 
s3c_mfc_codec_mode_t
 
codec_mode
, 
°rm_Àng
);

145 
s3c_mfc_ö°_dec
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, 
¨g
);

147 
s3c_mfc_ö°™˚_öô_íc
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, 
s3c_mfc_codec_mode_t
 
codec_mode
, 
s3c_mfc_íc_öfo_t
 *
íc_öfo
);

148 
s3c_mfc_ö°_íc
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, *
íc_d©a_size
, *
hódî_size
);

149 
s3c_mfc_ö°_íc_hódî
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, 
hdr_code
, 
hdr_num
, 
outbuf_physiˇl_addr
, 
outbuf_size
, *
hdr_size
);

150 
s3c_mfc_ö°_íc_∑øm_ch™ge
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, 
∑øm_ch™ge_íabÀ
, 
∑øm_ch™ge_vÆ
);

152 
s3c_mfc_ö°_£t_po°_rŸ©e
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, 
po°_rŸmode
);

154 
s3c_mfc_ö°_gë_löe_buff
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, **
buf„r
, *
size
);

155 
s3c_mfc_ö°_gë_yuv_buff
(
s3c_mfc_ö°_c⁄ãxt_t
 *
˘x
, **
buf„r
, *
size
);

157 
	#S3C_MFC_INST_RET_OK
 (0)

	)

159 
	#S3C_MFC_INST_ERR_INVALID_PARAM
 (-1001)

	)

160 
	#S3C_MFC_INST_ERR_STATE_CHK
 (-1002)

	)

161 
	#S3C_MFC_INST_ERR_STATE_DELETED
 (-1003)

	)

162 
	#S3C_MFC_INST_ERR_STATE_POWER_OFF
 (-1004)

	)

163 
	#S3C_MFC_INST_ERR_WRONG_CODEC_MODE
 (-1005)

	)

165 
	#S3C_MFC_INST_ERR_DEC_INIT_CMD_FAIL
 (-2001)

	)

166 
	#S3C_MFC_INST_ERR_DEC_PIC_RUN_CMD_FAIL
 (-2002)

	)

167 
	#S3C_MFC_INST_ERR_DEC_DECODE_FAIL_ETC
 (-2011)

	)

168 
	#S3C_MFC_INST_ERR_DEC_INVALID_STRM
 (-2012)

	)

169 
	#S3C_MFC_INST_ERR_DEC_EOS
 (-2013)

	)

170 
	#S3C_MFC_INST_ERR_DEC_BUF_FILL_SIZE_WRONG
 (-2014)

	)

172 
	#S3C_MFC_INST_ERR_ENC_INIT_CMD_FAIL
 (-3001)

	)

173 
	#S3C_MFC_INST_ERR_ENC_PIC_RUN_CMD_FAIL
 (-3002)

	)

174 
	#S3C_MFC_INST_ERR_ENC_HEADER_CMD_FAIL
 (-3003)

	)

175 
	#S3C_MFC_INST_ERR_ENC_PARAM_CHANGE_INVALID_VALUE
 (-3011)

	)

177 
	#S3C_MFC_INST_ERR_MEMORY_ALLOCATION_FAIL
 (-4001)

	)

179 
	#S3C_MFC_INST_ERR_ETC
 (-9001)

	)

	@s3c_mfc_intr_noti.h

13 #i‚de‡
_S3C_MFC_INTR_NOTI_H


14 
	#_S3C_MFC_INTR_NOTI_H


	)

16 
	#S3C_MFC_INTR_NOTI_TIMEOUT
 1000

	)

21 
	#S3C_MFC_INTR_ENABLE_ALL
 0xCCFF

	)

22 
	#S3C_MFC_INTR_ENABLE_RESET
 0xC00E

	)

27 
	#S3C_MFC_INTR_REASON_NULL
 0x0000

	)

28 
	#S3C_MFC_INTR_REASON_BUFFER_EMPTY
 0xC000

	)

29 
	#S3C_MFC_INTR_REASON_INTRNOTI_TIMEOUT
 (-99)

	)

	@s3c_mfc_params.h

13 #i‚de‡
_S3C_MFC_PARAMS_H


14 
	#_S3C_MFC_PARAMS_H


	)

17 
	mªt_code
;

18 
	mö_width
;

19 
	mö_height
;

20 
	mö_bôøã
;

21 
	mö_g›Num
;

22 
	mö_‰ameR©eRes
;

23 
	mö_‰ameR©eDiv
;

24 
	mö_öåaqp
;

25 
	mö_qpmax
;

26 
	mö_gamma
;

27 } 
	ts3c_mfc_íc_öô_¨g_t
;

30 
	mªt_code
;

31 
	mout_ícoded_size
;

32 
	mout_hódî_size
;

33 } 
	ts3c_mfc_íc_exe_¨g_t
;

36 
	mªt_code
;

37 
	mö_°rmSize
;

38 
	mout_width
;

39 
	mout_height
;

40 
	mout_buf_width
;

41 
	mout_buf_height
;

42 } 
	ts3c_mfc_dec_öô_¨g_t
;

45 
	mªt_code
;

46 
	mö_°rmSize
;

47 } 
	ts3c_mfc_dec_exe_¨g_t
;

50 
	mªt_code
;

51 
	mö_u§_d©a
;

52 
	mö_u§_d©a2
;

53 
	mout_buf_addr
;

54 
	mout_buf_size
;

55 } 
	ts3c_mfc_gë_buf_addr_¨g_t
;

58 
	mªt_code
;

59 
	mö_c⁄fig_∑øm
;

60 
	mö_c⁄fig_∑øm2
;

61 
	mout_c⁄fig_vÆue
[2];

63 } 
	ts3c_mfc_gë_c⁄fig_¨g_t
;

66 
	mªt_code
;

67 
	mö_c⁄fig_∑øm
;

68 
	mö_c⁄fig_vÆue
[3];

70 
	mout_c⁄fig_vÆue_ﬁd
[2];

71 } 
	ts3c_mfc_£t_c⁄fig_¨g_t
;

74 
	mö_u§_m≠≥d_addr
;

75 
	mªt_code
;

76 
	mmv_addr
;

77 
	mmb_ty≥_addr
;

78 
	mmv_size
;

79 
	mmb_ty≥_size
;

80 
	mmp4a•_v›_time_ªs
;

81 
	mbyã_c⁄sumed
;

82 
	mmp4a•_fcode
;

83 
	mmp4a•_time_ba£_œ°
;

84 
	mmp4a•_n⁄b_time_œ°
;

85 
	mmp4a•_åd
;

86 } 
	ts3c_mfc_gë_m≥g4a•_¨g_t
;

90 
s3c_mfc_íc_öô_¨g_t
 
	míc_öô
;

91 
s3c_mfc_íc_exe_¨g_t
 
	míc_exe
;

92 
s3c_mfc_dec_öô_¨g_t
 
	mdec_öô
;

93 
s3c_mfc_dec_exe_¨g_t
 
	mdec_exe
;

94 
s3c_mfc_gë_buf_addr_¨g_t
 
	mgë_buf_addr
;

95 
s3c_mfc_gë_c⁄fig_¨g_t
 
	mgë_c⁄fig
;

96 
s3c_mfc_£t_c⁄fig_¨g_t
 
	m£t_c⁄fig
;

97 
s3c_mfc_gë_m≥g4a•_¨g_t
 
	mm≥g4_a•_∑øm
;

98 } 
	ts3c_mfc_¨gs_t
;

101 
	#S3C_MFC_GET_CONFIG_DEC_YUV_NEED_COUNT
 (0x0AA0C001)

	)

102 
	#S3C_MFC_GET_CONFIG_DEC_MP4ASP_MV
 (0x0AA0C002)

	)

103 
	#S3C_MFC_GET_CONFIG_DEC_MP4ASP_MBTYPE
 (0x0AA0C003)

	)

105 #i‡(
deföed
(
DIVX_ENABLE
) && (DIVX_ENABLE == 1))

106 
	#S3C_MFC_GET_CONFIG_DEC_MP4ASP_FCODE
 (0x0AA0C011)

	)

107 
	#S3C_MFC_GET_CONFIG_DEC_MP4ASP_VOP_TIME_RES
 (0x0AA0C012)

	)

108 
	#S3C_MFC_GET_CONFIG_DEC_MP4ASP_TIME_BASE_LAST
 (0x0AA0C013)

	)

109 
	#S3C_MFC_GET_CONFIG_DEC_MP4ASP_NONB_TIME_LAST
 (0x0AA0C014)

	)

110 
	#S3C_MFC_GET_CONFIG_DEC_MP4ASP_TRD
 (0x0AA0C015)

	)

111 
	#S3C_MFC_GET_CONFIG_DEC_BYTE_CONSUMED
 (0x0AA0C016)

	)

114 
	#S3C_MFC_SET_CONFIG_DEC_ROTATE
 (0x0ABDE001)

	)

115 
	#S3C_MFC_SET_CONFIG_DEC_OPTION
 (0x0ABDE002)

	)

117 
	#S3C_MFC_SET_CONFIG_ENC_H263_PARAM
 (0x0ABDC001)

	)

118 
	#S3C_MFC_SET_CONFIG_ENC_SLICE_MODE
 (0x0ABDC002)

	)

119 
	#S3C_MFC_SET_CONFIG_ENC_PARAM_CHANGE
 (0x0ABDC003)

	)

120 
	#S3C_MFC_SET_CONFIG_ENC_CUR_PIC_OPT
 (0x0ABDC004)

	)

122 
	#S3C_MFC_SET_CACHE_CLEAN
 (0x0ABDD001)

	)

123 
	#S3C_MFC_SET_CACHE_INVALIDATE
 (0x0ABDD002)

	)

124 
	#S3C_MFC_SET_CACHE_CLEAN_INVALIDATE
 (0x0ABDD003)

	)

126 
	#S3C_MFC_SET_PADDING_SIZE
 (0x0ABDE003)

	)

128 
	#S3C_ENC_PARAM_GOP_NUM
 (0x7000A001)

	)

129 
	#S3C_ENC_PARAM_INTRA_QP
 (0x7000A002)

	)

130 
	#S3C_ENC_PARAM_BITRATE
 (0x7000A003)

	)

131 
	#S3C_ENC_PARAM_F_RATE
 (0x7000A004)

	)

132 
	#S3C_ENC_PARAM_INTRA_REF
 (0x7000A005)

	)

133 
	#S3C_ENC_PARAM_SLICE_MODE
 (0x7000A006)

	)

135 
	#S3C_ENC_PIC_OPT_IDR
 (0x7000B001)

	)

136 
	#S3C_ENC_PIC_OPT_SKIP
 (0x7000B002)

	)

137 
	#S3C_ENC_PIC_OPT_RECOVERY
 (0x7000B003)

	)

139 
	#S3C_MFC_DEC_PIC_OPT_MP4ASP
 (0x7000C001)

	)

	@s3c_mfc_set_config.c

1 
	#LOG_TAG
 "s3c_mfc_£t_c⁄fig.c"

	)

2 
	~"oßl.h
"

16 
	~<löux/dma-m≠pög.h
>

17 
	~<asm/ˇcheÊush.h
>

18 
	~<asm/mem‹y.h
>

19 
	~<löux/kî√l.h
>

21 
	~"s3c_mfc_∑øms.h
"

22 
	~"s3c_mfc_ö°™˚.h
"

23 
	~"s3c_mfc_c⁄fig.h
"

24 
	~"s3c_mfc_s‰.h
"

25 
	~"s3c_mfc.h
"

28 
	$s3c_mfc_gë_c⁄fig_∑øms
(
s3c_mfc_ö°_c⁄ãxt_t
 *
mfc_ö°
, 
s3c_mfc_¨gs_t
 *
¨gs
 )

29 { 
	`__D
("\n");

30 
ªt
;

33 
¨gs
->
gë_c⁄fig
.
ö_c⁄fig_∑øm
) {

34 
S3C_MFC_GET_CONFIG_DEC_YUV_NEED_COUNT
:

35 
¨gs
->
gë_c⁄fig
.
out_c⁄fig_vÆue
[0] = 
mfc_ö°
->
yuv_buf„r_cou¡
;

36 
ªt
 = 
S3C_MFC_INST_RET_OK
;

40 
S3C_MFC_GET_CONFIG_DEC_MP4ASP_MV
:

41 
S3C_MFC_GET_CONFIG_DEC_MP4ASP_MBTYPE
:

43 
ªt
 = 
S3C_MFC_INST_RET_OK
;

47 #i‡(
	`deföed
(
DIVX_ENABLE
) && (DIVX_ENABLE == 1))

48 
S3C_MFC_GET_CONFIG_DEC_BYTE_CONSUMED
:

49 
¨gs
->
gë_c⁄fig
.
out_c⁄fig_vÆue
[0] = ()
mfc_ö°
->
RET_DEC_PIC_RUN_BAK_BYTE_CONSUMED
;

50 
	`mfc_debug
("S3C_MFC_GET_CONFIG_DEC_BYTE_CONSUMED = %d\n", \

51 ()
mfc_ö°
->
RET_DEC_PIC_RUN_BAK_BYTE_CONSUMED
);

52 
ªt
 = 
S3C_MFC_INST_RET_OK
;

55 
S3C_MFC_GET_CONFIG_DEC_MP4ASP_FCODE
:

56 
¨gs
->
gë_c⁄fig
.
out_c⁄fig_vÆue
[0] = ()
mfc_ö°
->
RET_DEC_PIC_RUN_BAK_MP4ASP_FCODE
;

57 
ªt
 = 
S3C_MFC_INST_RET_OK
;

60 
S3C_MFC_GET_CONFIG_DEC_MP4ASP_VOP_TIME_RES
:

61 
¨gs
->
gë_c⁄fig
.
out_c⁄fig_vÆue
[0] = ()
mfc_ö°
->
RET_DEC_SEQ_INIT_BAK_MP4ASP_VOP_TIME_RES
;

62 
ªt
 = 
S3C_MFC_INST_RET_OK
;

65 
S3C_MFC_GET_CONFIG_DEC_MP4ASP_TIME_BASE_LAST
:

66 
¨gs
->
gë_c⁄fig
.
out_c⁄fig_vÆue
[0] = ()
mfc_ö°
->
RET_DEC_PIC_RUN_BAK_MP4ASP_TIME_BASE_LAST
;

67 
ªt
 = 
S3C_MFC_INST_RET_OK
;

70 
S3C_MFC_GET_CONFIG_DEC_MP4ASP_NONB_TIME_LAST
:

71 
¨gs
->
gë_c⁄fig
.
out_c⁄fig_vÆue
[0] = ()
mfc_ö°
->
RET_DEC_PIC_RUN_BAK_MP4ASP_NONB_TIME_LAST
;

72 
ªt
 = 
S3C_MFC_INST_RET_OK
;

75 
S3C_MFC_GET_CONFIG_DEC_MP4ASP_TRD
:

76 
¨gs
->
gë_c⁄fig
.
out_c⁄fig_vÆue
[0] = ()
mfc_ö°
->
RET_DEC_PIC_RUN_BAK_MP4ASP_MP4ASP_TRD
;

77 
ªt
 = 
S3C_MFC_INST_RET_OK
;

82 
ªt
 = -1;

87 
¨gs
->
gë_c⁄fig
.
ªt_code
 = 
ªt
;

89  
S3C_MFC_INST_RET_OK
;

90 
	}
}

93 
	$s3c_mfc_£t_c⁄fig_∑øms
(
s3c_mfc_ö°_c⁄ãxt_t
 *
mfc_ö°
, 
s3c_mfc_¨gs_t
 *
¨gs
)

94 { 
	`__D
("\n");

95 
ªt
, 
size
;

96 
∑øm_ch™ge_íabÀ
 = 0, 
∑øm_ch™ge_vÆ
;

97 *
°¨t
;

98 
off£t
;

100 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_∑øm
) {

101 
S3C_MFC_SET_CONFIG_DEC_ROTATE
:

102 #i‡(
S3C_MFC_ROTATE_ENABLE
 == 1)

103 
¨gs
->
£t_c⁄fig
.
out_c⁄fig_vÆue_ﬁd
[0]

104 
	`s3c_mfc_ö°_£t_po°_rŸ©e
(
mfc_ö°
, 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[0]);

106 
	`mfc_îr
("S3C_MFC_IOCTL_MFC_SET_CONFIG with S3C_MFC_SET_CONFIG_DEC_ROTATE isÇot supported\n");

107 
	`mfc_îr
("please check if S3C_MFC_ROTATE_ENABLE is definedás 1 in MfcConfig.h file\n");

109 
ªt
 = 
S3C_MFC_INST_RET_OK
;

112 
S3C_MFC_SET_CONFIG_ENC_H263_PARAM
:

113 
¨gs
->
£t_c⁄fig
.
out_c⁄fig_vÆue_ﬁd
[0] = 
mfc_ö°
->
h263_™√x
;

114 
mfc_ö°
->
h263_™√x
 = 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[0];

115 
	`mfc_debug
("∑ømëî = 0x%x\n", 
mfc_ö°
->
h263_™√x
);

116 
ªt
 = 
S3C_MFC_INST_RET_OK
;

119 
S3C_MFC_SET_CONFIG_ENC_SLICE_MODE
:

120 i‡(
mfc_ö°
->
íc_num_¶i˚s
) {

121 
¨gs
->
£t_c⁄fig
.
out_c⁄fig_vÆue_ﬁd
[0] = 1;

122 
¨gs
->
£t_c⁄fig
.
out_c⁄fig_vÆue_ﬁd
[1] = 
mfc_ö°
->
íc_num_¶i˚s
;

124 
¨gs
->
£t_c⁄fig
.
out_c⁄fig_vÆue_ﬁd
[0] = 0;

125 
¨gs
->
£t_c⁄fig
.
out_c⁄fig_vÆue_ﬁd
[1] = 0;

128 i‡(
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[0])

129 
mfc_ö°
->
íc_num_¶i˚s
 = 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[1];

131 
mfc_ö°
->
íc_num_¶i˚s
 = 0;

133 
ªt
 = 
S3C_MFC_INST_RET_OK
;

136 
S3C_MFC_SET_CONFIG_ENC_PARAM_CHANGE
:

138 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[0]) {

139 
S3C_ENC_PARAM_GOP_NUM
:

140 
∑øm_ch™ge_íabÀ
 = (1 << 0);

143 
S3C_ENC_PARAM_INTRA_QP
:

144 
∑øm_ch™ge_íabÀ
 = (1 << 1);

147 
S3C_ENC_PARAM_BITRATE
:

148 
∑øm_ch™ge_íabÀ
 = (1 << 2);

151 
S3C_ENC_PARAM_F_RATE
:

152 
∑øm_ch™ge_íabÀ
 = (1 << 3);

155 
S3C_ENC_PARAM_INTRA_REF
:

156 
∑øm_ch™ge_íabÀ
 = (1 << 4);

159 
S3C_ENC_PARAM_SLICE_MODE
:

160 
∑øm_ch™ge_íabÀ
 = (1 << 5);

167 
∑øm_ch™ge_vÆ
 = 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[1];

168 
ªt
 = 
	`s3c_mfc_ö°_íc_∑øm_ch™ge
(
mfc_ö°
, 
∑øm_ch™ge_íabÀ
, 
∑øm_ch™ge_vÆ
);

172 
S3C_MFC_SET_CONFIG_ENC_CUR_PIC_OPT
:

174 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[0]) {

175 
S3C_ENC_PIC_OPT_IDR
:

176 
mfc_ö°
->
íc_pic_›ti⁄
 ^(
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[1] << 1);

179 
S3C_ENC_PIC_OPT_SKIP
:

180 
mfc_ö°
->
íc_pic_›ti⁄
 ^(
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[1] << 0);

183 
S3C_ENC_PIC_OPT_RECOVERY
:

184 
mfc_ö°
->
íc_pic_›ti⁄
 ^(
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[1] << 24);

191 
ªt
 = 
S3C_MFC_INST_RET_OK
;

194 
S3C_MFC_SET_CACHE_CLEAN
:

200 
off£t
 = 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[0] -árgs->set_config.in_config_value[2];

201 
°¨t
 = 
mfc_ö°
->
°ªam_buf„r
 + 
off£t
;

202 
size
 = 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[1];

203 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_TO_DEVICE
);

215 
ªt
 = 
S3C_MFC_INST_RET_OK
;

218 
S3C_MFC_SET_CACHE_INVALIDATE
:

224 
off£t
 = 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[0] -árgs->set_config.in_config_value[2];

225 
°¨t
 = 
mfc_ö°
->
°ªam_buf„r
 + 
off£t
;

226 
size
 = 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[1];

227 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_FROM_DEVICE
);

239 
ªt
 = 
S3C_MFC_INST_RET_OK
;

242 
S3C_MFC_SET_CACHE_CLEAN_INVALIDATE
:

248 
off£t
 = 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[0] -árgs->set_config.in_config_value[2];

249 
°¨t
 = 
mfc_ö°
->
°ªam_buf„r
 + 
off£t
;

250 
size
 = 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[1];

251 
	`dma_ˇche_maöt
(
°¨t
, 
size
, 
DMA_BIDIRECTIONAL
);

263 
ªt
 = 
S3C_MFC_INST_RET_OK
;

266 #i‡(
	`deföed
(
DIVX_ENABLE
) && (DIVX_ENABLE == 1))

267 
S3C_MFC_SET_PADDING_SIZE
:

268 
	`mfc_debug
("padding size = %d\n", \

269 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[0]);

270 
mfc_ö°
->
∑ddög_size
 = 
¨gs
->
£t_c⁄fig
.
ö_c⁄fig_vÆue
[0];

271 
ªt
 = 
S3C_MFC_INST_RET_OK
;

276 
ªt
 = -1;

280 
¨gs
->
£t_c⁄fig
.
ªt_code
 = 
ªt
;

282  
S3C_MFC_INST_RET_OK
;

283 
	}
}

	@s3c_mfc_sfr.c

1 
	#LOG_TAG
 "s3c_mfc_s‰.c"

	)

2 
	~"oßl.h
"

3 
	~"s3c.h
"

18 
	~<löux/dñay.h
>

19 
	~<löux/kî√l.h
>

20 
	~<löux/waô.h
>

21 
	~<asm/io.h
>

22 
	~"ªgs-mfc.h
"

24 
	~"s3c_mfc_s‰.h
"

25 
	~"s3c_mfc_c⁄fig.h
"

26 
	~"¥ism_s.h
"

27 
	~"s3c_mfc_öå_nŸi.h
"

28 
	~"s3c_mfc.h
"

30 
waô_queue_hód_t
 
s3c_mfc_waô_queue
;

31 
s3c_mfc_öå_ty≥
;

32 
__iomem
 *
s3c_mfc_s‰_ba£_vút_addr
;

35 
	$s3c_mfc_¶ìp
()

38 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BUSY_FLAG
) != 0)

39 
	`udñay
(1);

42 
	`wrôñ
(0x01, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BUSY_FLAG
);

43 
	`wrôñ
(0x0A, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_RUN_CMD
);

45 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BUSY_FLAG
) != 0)

46 
	`udñay
(1);

49 
	}
}

51 
	$s3c_mfc_wakeup
()

54 
	`wrôñ
(0x01, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BUSY_FLAG
);

55 
	`wrôñ
(0x01, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_CODE_RUN
);

57 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BUSY_FLAG
) != 0)

58 
	`udñay
(1);

61 
	`wrôñ
(0x01, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BUSY_FLAG
);

62 
	`wrôñ
(0x0B, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_RUN_CMD
);

64 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BUSY_FLAG
) != 0)

65 
	`udñay
(1);

68 
	}
}

71 *
	$s3c_mfc_gë_cmd_°rög
(
s3c_mfc_comm™d_t
 
mfc_cmd
)

73 ()
mfc_cmd
) {

74 
SEQ_INIT
:

77 
SEQ_END
:

80 
PIC_RUN
:

83 
SET_FRAME_BUF
:

86 
ENC_HEADER
:

89 
ENC_PARA_SET
:

92 
DEC_PARA_SET
:

95 
GET_FW_VER
:

101 
	}
}

103 
	$s3c_mfc_waô_f‹_ªady
()

105 
i
;

107 
i
 = 0; i < 1000; i++) {

108 i‡(
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BUSY_FLAG
) == 0) {

109  
TRUE
;

111 
	`udñay
(100);

114 
	`mfc_debug
("timeout in waiting forÅhe bitprocessorávailable\n");

116  
FALSE
;

117 
	}
}

120 
	$s3c_mfc_gë_fúmw¨e_vî
()

122 
¥d_no
, 
vî_no
;

124 
	`s3c_mfc_waô_f‹_ªady
();

126 
	`wrôñ
(
GET_FW_VER
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_RUN_CMD
);

128 
	`mfc_debug
("GET_FW_VER command was issued\n");

130 
	`s3c_mfc_waô_f‹_ªady
();

132 
¥d_no
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_SEQ_SUCCESS
) >> 16;

133 
vî_no
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_SEQ_SUCCESS
) & 0x00FFFF;

135 
	`mfc_debug
("GET_FW_VER => 0x%x, 0x%x\n", 
¥d_no
, 
vî_no
);

136 
	`mfc_debug
("BUSY_FLAG => %d\n", \

137 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BUSY_FLAG
));

139  
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARAM_RET_DEC_SEQ_SUCCESS
);

140 
	}
}

143 
BOOL
 
	$s3c_mfc_issue_comm™d
(
ö°_no
, 
s3c_mfc_codec_mode_t
 
codec_mode
, 
s3c_mfc_comm™d_t
 
mfc_cmd
)

145 
öå_ªas⁄
;

147 
	`wrôñ
(
ö°_no
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_RUN_INDEX
);

149 i‡(
codec_mode
 =
H263_DEC
) {

150 
	`wrôñ
(
MP4_DEC
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_RUN_COD_STD
);

151 } i‡(
codec_mode
 =
H263_ENC
) {

152 
	`wrôñ
(
MP4_ENC
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_RUN_COD_STD
);

154 
	`wrôñ
(
codec_mode
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_RUN_COD_STD
);

157 
mfc_cmd
) {

158 
PIC_RUN
:

159 
SEQ_INIT
:

160 
SEQ_END
:

161 
	`wrôñ
(
mfc_cmd
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_RUN_CMD
);

163 if(
	`öãºu±ibÀ_¶ìp_⁄_timeout
(&
s3c_mfc_waô_queue
, 500) == 0) {

164 
	`s3c_mfc_°ªam_íd
();

165  
FALSE
;

168 
öå_ªas⁄
 = 
s3c_mfc_öå_ty≥
;

170 i‡(
öå_ªas⁄
 =
S3C_MFC_INTR_REASON_INTRNOTI_TIMEOUT
) {

171 
	`mfc_îr
("command = %s, WaitInterruptNotificationÑeturns TIMEOUT\n", \

172 
	`s3c_mfc_gë_cmd_°rög
(
mfc_cmd
));

173  
FALSE
;

175 i‡(
öå_ªas⁄
 & 
S3C_MFC_INTR_REASON_BUFFER_EMPTY
) {

176 
	`mfc_îr
("command = %s, BUFFER EMPTY interrupt wasÑaised\n", \

177 
	`s3c_mfc_gë_cmd_°rög
(
mfc_cmd
));

178  
FALSE
;

183 i‡(
	`s3c_mfc_waô_f‹_ªady
(Ë=
FALSE
) {

184 
	`mfc_îr
("command = %s, bitprocessor is busy before issuingÅhe command\n", \

185 
	`s3c_mfc_gë_cmd_°rög
(
mfc_cmd
));

186  
FALSE
;

189 
	`wrôñ
(
mfc_cmd
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_RUN_CMD
);

190 
	`s3c_mfc_waô_f‹_ªady
();

194  
TRUE
;

195 
	}
}

199 
	$s3c_mfc_ª£t
()

201 
	`wrôñ
(0x00, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_SFR_SW_RESET_ADDR
);

202 
	`wrôñ
(0x01, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_SFR_SW_RESET_ADDR
);

205 
	`wrôñ
(
S3C_MFC_INTR_ENABLE_RESET
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_INT_ENABLE
);

206 
	`wrôñ
(
S3C_MFC_INTR_REASON_NULL
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_INT_REASON
);

207 
	`wrôñ
(0x1, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BITS_INT_CLEAR
);

208 
	}
}

215 
	$s3c_mfc_˛ór_öå
()

217 
	`wrôñ
(0x1, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_BITS_INT_CLEAR
);

218 
	`wrôñ
(
S3C_MFC_INTR_REASON_NULL
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_INT_REASON
);

219 
	}
}

222 
	$s3c_mfc_öå_ªas⁄
()

224  
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_INT_REASON
);

225 
	}
}

232 
	$s3c_mfc_£t_eos
(
buf„r_mode
)

234 i‡(
buf„r_mode
 == 1) {

235 
	`wrôñ
(1 << 1, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_DEC_FUNC_CTRL
);

237 
	`wrôñ
(1, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_DEC_FUNC_CTRL
);

239 
	}
}

241 
	$s3c_mfc_°ªam_íd
()

243 
	`wrôñ
(0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_DEC_FUNC_CTRL
);

244 
	}
}

246 
	$s3c_mfc_dow∆ﬂd_boŸ_fúmw¨e
()

248 
i
;

249 
d©a
;

252 
i
 = 0; i < 512; i++) {

253 
d©a
 = 
s3c_mfc_bô_code
[
i
];

254 
	`wrôñ
(((
i
<<16Ë| 
d©a
), 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_CODE_DN_LOAD
);

257 
	}
}

259 
	$s3c_mfc_°¨t_bô_¥o˚ss‹
()

261 
	`wrôñ
(0x01, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_CODE_RUN
);

262 
	}
}

265 
	$s3c_mfc_°›_bô_¥o˚ss‹
()

267 
	`wrôñ
(0x00, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_CODE_RUN
);

268 
	}
}

270 
	$s3c_mfc_c⁄fig_s‰_bô¥oc_buf„r
()

272 
code
;

278 
	`wrôñ
(
S3C_MFC_BASEADDR_BITPROC_BUF
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_CODE_BUF_ADDR
);

285 
code
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_CODE_BUF_ADDR
);

286 
	`wrôñ
(
code
 + 
S3C_MFC_CODE_BUF_SIZE
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_WORK_BUF_ADDR
);

292 
code
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_WORK_BUF_ADDR
);

293 
	`wrôñ
(
code
 + 
S3C_MFC_WORK_BUF_SIZE
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_PARA_BUF_ADDR
);

294 
	}
}

296 
	$s3c_mfc_c⁄fig_s‰_˘æ_›ts
()

298 
uRegD©a
;

301 
uRegD©a
 = 
	`ªadl
(
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_STRM_BUF_CTRL
);

302 
	`wrôñ
((
uRegD©a
 & ~(0x03)Ë| 
S3C_MFC_BUF_STATUS_FULL_EMPTY_CHECK_BIT
 | 
S3C_MFC_STREAM_ENDIAN_LITTLE
, \

303 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_STRM_BUF_CTRL
);

306 
	`wrôñ
(
S3C_MFC_YUV_MEM_ENDIAN_LITTLE
, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_FRME_BUF_CTRL
);

310 
	`wrôñ
(0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_DEC_FUNC_CTRL
);

313 
	`wrôñ
(0, 
s3c_mfc_s‰_ba£_vút_addr
 + 
S3C_MFC_WORK_BUF_CTRL
);

314 
	}
}

	@s3c_mfc_sfr.h

13 #i‚de‡
_S3C_MFC_SFR_H


14 
	#_S3C_MFC_SFR_H


	)

16 
	~"s3c_mfc_ty≥s.h
"

17 
	~"s3c_mfc_ba£.h
"

19 
s3c_mfc_¶ìp
();

20 
s3c_mfc_wakeup
();

21 
BOOL
 
s3c_mfc_issue_comm™d
(
ö°_no
, 
s3c_mfc_codec_mode_t
 
codec_mode
, 
s3c_mfc_comm™d_t
 
mfc_cmd
);

22 
s3c_mfc_gë_fúmw¨e_vî
();

24 
s3c_mfc_ª£t
();

25 
s3c_mfc_˛ór_öå
();

26 
s3c_mfc_öå_ªas⁄
();

27 
s3c_mfc_£t_eos
(
buf„r_mode
);

28 
s3c_mfc_°ªam_íd
();

29 
s3c_mfc_dow∆ﬂd_boŸ_fúmw¨e
();

30 
s3c_mfc_°¨t_bô_¥o˚ss‹
();

31 
s3c_mfc_°›_bô_¥o˚ss‹
();

32 
s3c_mfc_c⁄fig_s‰_bô¥oc_buf„r
();

33 
s3c_mfc_c⁄fig_s‰_˘æ_›ts
();

	@s3c_mfc_types.h

13 #i‚de‡
_S3C_MFC_TYPES_H


14 
	#_S3C_MFC_TYPES_H


	)

16 
	~<löux/ty≥s.h
>

18 íum {
	mFALSE
, 
	mTRUE
} 
	tBOOL
;

	@s3c_mfc_yuv_buf_manager.c

1 
	#LOG_TAG
 "s3c_mfc_yuv_buf_m™agî.c"

	)

2 
	~"oßl.h
"

17 
	~<löux/¶ab.h
>

18 
	~<löux/kî√l.h
>

20 
	~"s3c_mfc_yuv_buf_m™agî.h
"

21 
	~"s3c_mfc_ty≥s.h
"

22 
	~"s3c_mfc.h
"

28 
	#S3C_MFC_BUF_SEGMENT_SIZE
 1024

	)

32 *
	mpBa£Addr
;

33 
	midx_commô
;

34 } 
	ts3c_mfc_£gmít_öfo_t
;

38 
	mödex_ba£_£g
;

39 
	mnum_£gs
;

40 } 
	ts3c_mfc_commô_öfo_t
;

43 
s3c_mfc_£gmít_öfo_t
 *
	gs3c_mfc_£gmít_öfo
 = 
NULL
;

44 
s3c_mfc_commô_öfo_t
 *
	gs3c_mfc_commô_öfo
 = 
NULL
;

46 *
	gs3c_mfc_buf„r_ba£
 = 
NULL
;

47 
	gs3c_mfc_buf„r_size
 = 0;

48 
	gs3c_mfc_num_£gmíts
 = 0;

63 
BOOL
 
	$s3c_mfc_öô_yuvbuf_mgr
(*
buf„r_ba£
, 
buf„r_size
)

64 { 
	`__D
("\n");

65 
i
;

67 i‡(
buf„r_ba£
 =
NULL
 || 
buf„r_size
 == 0)

68  
FALSE
;

70 i‡((
s3c_mfc_buf„r_ba£
 !
NULL
Ë&& (
s3c_mfc_buf„r_size
 != 0)) {

71 i‡((
buf„r_ba£
 =
s3c_mfc_buf„r_ba£
Ë&& (
buf„r_size
 =
s3c_mfc_buf„r_size
))

72  
TRUE
;

74 
	`s3c_mfc_yuv_buf„r_mgr_föÆ
();

77 
s3c_mfc_buf„r_ba£
 = 
buf„r_ba£
;

78 
s3c_mfc_buf„r_size
 = 
buf„r_size
;

79 
s3c_mfc_num_£gmíts
 = 
buf„r_size
 / 
S3C_MFC_BUF_SEGMENT_SIZE
;

81 
s3c_mfc_£gmít_öfo
 = (
s3c_mfc_£gmít_öfo_t
 *)
	`kmÆloc
(
s3c_mfc_num_£gmíts
 * (s3c_mfc_segment_info_t), \

82 
GFP_KERNEL
);

83 
i
 = 0; i < 
s3c_mfc_num_£gmíts
; i++) {

84 
s3c_mfc_£gmít_öfo
[
i
].
pBa£Addr
 = 
buf„r_ba£
 + (ò* 
S3C_MFC_BUF_SEGMENT_SIZE
);

85 
s3c_mfc_£gmít_öfo
[
i
].
idx_commô
 = 0;

88 
s3c_mfc_commô_öfo
 = (
s3c_mfc_commô_öfo_t
 *)
	`kmÆloc
(
s3c_mfc_num_£gmíts
 * (s3c_mfc_commit_info_t), \

89 
GFP_KERNEL
);

90 
i
 = 0; i < 
s3c_mfc_num_£gmíts
; i++) {

91 
s3c_mfc_commô_öfo
[
i
].
ödex_ba£_£g
 = -1;

92 
s3c_mfc_commô_öfo
[
i
].
num_£gs
 = 0;

95  
TRUE
;

96 
	}
}

99 
	$s3c_mfc_yuv_buf„r_mgr_föÆ
()

100 { 
	`__D
("\n");

101 i‡(
s3c_mfc_£gmít_öfo
 !
NULL
) {

102 
	`k‰ì
(
s3c_mfc_£gmít_öfo
);

103 
s3c_mfc_£gmít_öfo
 = 
NULL
;

106 i‡(
s3c_mfc_commô_öfo
 !
NULL
) {

107 
	`k‰ì
(
s3c_mfc_commô_öfo
);

108 
s3c_mfc_commô_öfo
 = 
NULL
;

111 
s3c_mfc_buf„r_ba£
 = 
NULL
;

112 
s3c_mfc_buf„r_size
 = 0;

113 
s3c_mfc_num_£gmíts
 = 0;

114 
	}
}

128 *
	$s3c_mfc_commô_yuv_buf„r_mgr
(
idx_commô
, 
commô_size
)

129 { 
	`__D
("\n");

130 
i
, 
j
;

131 
num_yuv_buf_£g
;

133 i‡(
s3c_mfc_£gmít_öfo
 =
NULL
 || 
s3c_mfc_commô_öfo
 == NULL) {

134  
NULL
;

138 i‡(
idx_commô
 < 0 || idx_commô >
s3c_mfc_num_£gmíts
)

139  
NULL
;

140 i‡(
commô_size
 <0 || commô_sizê> 
s3c_mfc_buf„r_size
)

141  
NULL
;

143 i‡(
s3c_mfc_commô_öfo
[
idx_commô
].
ödex_ba£_£g
 != -1)

144  
NULL
;

147 i‡((
commô_size
 % 
S3C_MFC_BUF_SEGMENT_SIZE
) == 0)

148 
num_yuv_buf_£g
 = 
commô_size
 / 
S3C_MFC_BUF_SEGMENT_SIZE
;

150 
num_yuv_buf_£g
 = (
commô_size
 / 
S3C_MFC_BUF_SEGMENT_SIZE
) + 1;

152 
i
=0; i<(
s3c_mfc_num_£gmíts
 - 
num_yuv_buf_£g
); i++) {

153 i‡(
s3c_mfc_£gmít_öfo
[
i
].
idx_commô
 != 0)

156 
j
=0; j<
num_yuv_buf_£g
; j++) {

157 i‡(
s3c_mfc_£gmít_öfo
[
i
+
j
].
idx_commô
 != 0)

161 i‡(
j
 =
num_yuv_buf_£g
) {

163 
j
=0; j<
num_yuv_buf_£g
; j++) {

164 
s3c_mfc_£gmít_öfo
[
i
+
j
].
idx_commô
 = 1;

167 
s3c_mfc_commô_öfo
[
idx_commô
].
ödex_ba£_£g
 = 
i
;

168 
s3c_mfc_commô_öfo
[
idx_commô
].
num_£gs
 = 
num_yuv_buf_£g
;

170  
s3c_mfc_£gmít_öfo
[
i
].
pBa£Addr
;

172 
i
 = i + 
j
 - 1;

176  
NULL
;

177 
	}
}

190 
	$s3c_mfc_‰ì_yuv_buf„r_mgr
(
idx_commô
)

191 { 
	`__D
("\n");

192 
i
;

193 
ödex_ba£_£g
;

194 
num_yuv_buf_£g
;

196 i‡(
s3c_mfc_£gmít_öfo
 =
NULL
 || 
s3c_mfc_commô_öfo
 == NULL)

199 i‡(
idx_commô
 < 0 || idx_commô >
s3c_mfc_num_£gmíts
)

202 i‡(
s3c_mfc_commô_öfo
[
idx_commô
].
ödex_ba£_£g
 == -1)

206 
ödex_ba£_£g
 = 
s3c_mfc_commô_öfo
[
idx_commô
].index_base_seg;

207 
num_yuv_buf_£g

s3c_mfc_commô_öfo
[
idx_commô
].
num_£gs
;

209 
i
 = 0; i < 
num_yuv_buf_£g
; i++) {

210 
s3c_mfc_£gmít_öfo
[
ödex_ba£_£g
 + 
i
].
idx_commô
 = 0;

214 
s3c_mfc_commô_öfo
[
idx_commô
].
ödex_ba£_£g
 = -1;

215 
s3c_mfc_commô_öfo
[
idx_commô
].
num_£gs
 = 0;

217 
	}
}

230 *
	$s3c_mfc_gë_yuv_buf„r
(
idx_commô
)

231 { 
	`__D
("\n");

232 
ödex_ba£_£g
;

234 i‡(
s3c_mfc_£gmít_öfo
 =
NULL
 || 
s3c_mfc_commô_öfo
 == NULL)

235  
NULL
;

237 i‡(
idx_commô
 < 0 || idx_commô >
s3c_mfc_num_£gmíts
)

238  
NULL
;

240 i‡(
s3c_mfc_commô_öfo
[
idx_commô
].
ödex_ba£_£g
 == -1)

241  
NULL
;

243 
ödex_ba£_£g
 = 
s3c_mfc_commô_öfo
[
idx_commô
].index_base_seg;

245  
s3c_mfc_£gmít_öfo
[
ödex_ba£_£g
].
pBa£Addr
;

246 
	}
}

260 
	$s3c_mfc_gë_yuv_buf„r_size
(
idx_commô
)

261 { 
	`__D
("\n");

262 i‡(
s3c_mfc_£gmít_öfo
 =
NULL
 || 
s3c_mfc_commô_öfo
 == NULL)

265 i‡(
idx_commô
 < 0 || idx_commô >
s3c_mfc_num_£gmíts
)

268 i‡(
s3c_mfc_commô_öfo
[
idx_commô
].
ödex_ba£_£g
 == -1)

271  (
s3c_mfc_commô_öfo
[
idx_commô
].
num_£gs
 * 
S3C_MFC_BUF_SEGMENT_SIZE
);

272 
	}
}

284 
	$s3c_mfc_¥öt_commô_yuv_buf„r_öfo
()

285 { 
	`__D
("\n");

286 
i
;

288 i‡(
s3c_mfc_£gmít_öfo
 =
NULL
 || 
s3c_mfc_commô_öfo
 == NULL) {

289 
	`mfc_îr
("fram buffer manager isÇot initialized\n");

294 
i
 = 0; i < 
s3c_mfc_num_£gmíts
; i++) {

295 i‡(
s3c_mfc_commô_öfo
[
i
].
ödex_ba£_£g
 != -1) {

296 
	`mfc_debug
("commit index = %03d, base segment index = %d\n", \

297 
i
, 
s3c_mfc_commô_öfo
[i].
ödex_ba£_£g
);

298 
	`mfc_debug
("commit index = %03d,Çumber of segment = %d\n", \

299 
i
, 
s3c_mfc_commô_öfo
[i].
num_£gs
);

302 
	}
}

	@s3c_mfc_yuv_buf_manager.h

13 #i‚de‡
_S3C_MFC_YUV_BUF_MANAGER_H


14 
	#_S3C_MFC_YUV_BUF_MANAGER_H


	)

16 
	~"s3c_mfc_ty≥s.h
"

18 
BOOL
 
s3c_mfc_öô_yuvbuf_mgr
(*
pBufBa£
, 
nBufSize
);

19 
s3c_mfc_yuv_buf„r_mgr_föÆ
();

21 *
s3c_mfc_commô_yuv_buf„r_mgr
(
idx_commô
, 
commô_size
);

22 
s3c_mfc_‰ì_yuv_buf„r_mgr
(
idx_commô
);

24 *
s3c_mfc_gë_yuv_buf„r
(
idx_commô
);

25 
s3c_mfc_gë_yuv_buf„r_size
(
idx_commô
);

27 
s3c_mfc_¥öt_commô_yuv_buf„r_öfo
();

	@/usr/include/asm/setup.h

1 #i‚de‡
_ASM_X86_SETUP_H


2 
	#_ASM_X86_SETUP_H


	)

4 
	#COMMAND_LINE_SIZE
 2048

	)

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 #i‚de‡
__ASSEMBLY__


6 
	tumode_t
;

13 
__sig√d__
 
	t__s8
;

14 
	t__u8
;

16 
__sig√d__
 
	t__s16
;

17 
	t__u16
;

19 
__sig√d__
 
	t__s32
;

20 
	t__u32
;

22 #ifde‡
__i386__


23 #ifde‡
__GNUC__


24 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

25 
__exãnsi⁄__
 
	t__u64
;

28 
__sig√d__
 
	t__s64
;

29 
	t__u64
;

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

9 
	#SI_LOAD_SHIFT
 16

	)

10 
	ssysöfo
 {

11 
	mu±ime
;

12 
	mlﬂds
[3];

13 
	mtŸÆøm
;

14 
	m‰ìøm
;

15 
	msh¨edøm
;

16 
	mbuf„ºam
;

17 
	mtŸÆsw≠
;

18 
	m‰ìsw≠
;

19 
	m¥ocs
;

20 
	m∑d
;

21 
	mtŸÆhigh
;

22 
	m‰ìhigh
;

23 
	mmem_unô
;

24 
	m_f
[20-2*()-()];

28 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()([1 - 2*!!(c⁄dôi⁄)]))

	)

34 
	#BUILD_BUG_ON_ZERO
(
e
Ë(([1 - 2 * !!”)]Ë- 1)

	)

37 
	#__FUNCTION__
 (
__func__
)

	)

40 #ifde‡
CONFIG_NUMA


41 
	#NUMA_BUILD
 1

	)

43 
	#NUMA_BUILD
 0

	)

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

5 
	~<löux/posix_ty≥s.h
>

6 
	~<asm/ty≥s.h
>

8 #i‚de‡
__KERNEL_STRICT_NAMES


10 
__u32
 
	t__kî√l_dev_t
;

12 
__kî√l_fd_£t
 
	tfd_£t
;

13 
__kî√l_dev_t
 
	tdev_t
;

14 
__kî√l_öo_t
 
	töo_t
;

15 
__kî√l_mode_t
 
	tmode_t
;

16 
__kî√l_∆ök_t
 
	t∆ök_t
;

17 
__kî√l_off_t
 
	toff_t
;

18 
__kî√l_pid_t
 
	tpid_t
;

19 
__kî√l_daddr_t
 
	tdaddr_t
;

20 
__kî√l_key_t
 
	tkey_t
;

21 
__kî√l_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

22 
__kî√l_timî_t
 
	ttimî_t
;

23 
__kî√l_˛ockid_t
 
	t˛ockid_t
;

24 
__kî√l_mqd_t
 
	tmqd_t
;

26 
__kî√l_uid_t
 
	tuid_t
;

27 
__kî√l_gid_t
 
	tgid_t
;

29 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

30 
__kî√l_loff_t
 
	tloff_t
;

37 #i‚de‡
_SIZE_T


38 
	#_SIZE_T


	)

39 
__kî√l_size_t
 
	tsize_t
;

42 #i‚de‡
_SSIZE_T


43 
	#_SSIZE_T


	)

44 
__kî√l_ssize_t
 
	tssize_t
;

47 #i‚de‡
_PTRDIFF_T


48 
	#_PTRDIFF_T


	)

49 
__kî√l_±rdiff_t
 
	t±rdiff_t
;

52 #i‚de‡
_TIME_T


53 
	#_TIME_T


	)

54 
__kî√l_time_t
 
	ttime_t
;

57 #i‚de‡
_CLOCK_T


58 
	#_CLOCK_T


	)

59 
__kî√l_˛ock_t
 
	t˛ock_t
;

62 #i‚de‡
_CADDR_T


63 
	#_CADDR_T


	)

64 
__kî√l_ˇddr_t
 
	tˇddr_t
;

68 
	tu_ch¨
;

69 
	tu_sh‹t
;

70 
	tu_öt
;

71 
	tu_l⁄g
;

74 
	tunch¨
;

75 
	tush‹t
;

76 
	tuöt
;

77 
	tul⁄g
;

79 #i‚de‡
__BIT_TYPES_DEFINED__


80 
	#__BIT_TYPES_DEFINED__


	)

82 
__u8
 
	tu_öt8_t
;

83 
__s8
 
	töt8_t
;

84 
__u16
 
	tu_öt16_t
;

85 
__s16
 
	töt16_t
;

86 
__u32
 
	tu_öt32_t
;

87 
__s32
 
	töt32_t
;

91 
__u8
 
	tuöt8_t
;

92 
__u16
 
	tuöt16_t
;

93 
__u32
 
	tuöt32_t
;

95 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

96 
__u64
 
	tuöt64_t
;

97 
__u64
 
	tu_öt64_t
;

98 
__s64
 
	töt64_t
;

102 
	#Æig√d_u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

103 
	#Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

104 
	#Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

112 #ifde‡
CONFIG_LBD


113 
u64
 
	t£˘‹_t
;

115 
	t£˘‹_t
;

121 #ifde‡
CONFIG_LSF


122 
u64
 
	tblk˙t_t
;

124 
	tblk˙t_t
;

131 #i‚de‡
pgoff_t


132 
	#pgoff_t
 

	)

142 #ifde‡
__CHECKER__


143 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

145 
	#__bôwi£__


	)

147 #ifde‡
__CHECK_ENDIAN__


148 
	#__bôwi£
 
__bôwi£__


	)

150 
	#__bôwi£


	)

153 
__u16
 
	t__bôwi£
 
	t__À16
;

154 
__u16
 
	t__bôwi£
 
	t__be16
;

155 
__u32
 
	t__bôwi£
 
	t__À32
;

156 
__u32
 
	t__bôwi£
 
	t__be32
;

157 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

158 
__u64
 
	t__bôwi£
 
	t__À64
;

159 
__u64
 
	t__bôwi£
 
	t__be64
;

161 
__u16
 
	t__bôwi£
 
	t__sum16
;

162 
__u32
 
	t__bôwi£
 
	t__wsum
;

165 
	su°©
 {

166 
__kî√l_daddr_t
 
	mf_t‰ì
;

167 
__kî√l_öo_t
 
	mf_töode
;

168 
	mf_‚ame
[6];

169 
	mf_Âack
[6];

	@/usr/include/linux/wait.h

1 #i‚de‡
_LINUX_WAIT_H


2 
	#_LINUX_WAIT_H


	)

4 
	#WNOHANG
 0x00000001

	)

5 
	#WUNTRACED
 0x00000002

	)

6 
	#WSTOPPED
 
WUNTRACED


	)

7 
	#WEXITED
 0x00000004

	)

8 
	#WCONTINUED
 0x00000008

	)

9 
	#WNOWAIT
 0x01000000

	)

11 
	#__WNOTHREAD
 0x20000000

	)

12 
	#__WALL
 0x40000000

	)

13 
	#__WCLONE
 0x80000000

	)

16 
	#P_ALL
 0

	)

17 
	#P_PID
 1

	)

18 
	#P_PGID
 2

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 
__BEGIN_NAMESPACE_STD


38 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

39 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

43 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

45 
__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


51 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

52 
__c
, 
size_t
 
__n
)

53 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

57 
__BEGIN_NAMESPACE_STD


59 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

62 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

63 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

66 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

67 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

68 
__END_NAMESPACE_STD


70 #ifde‡
__USE_GNU


73 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

74 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 
__BEGIN_NAMESPACE_STD


84 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

85 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

87 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

88 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

89 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

92 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

93 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

95 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

96 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

99 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

100 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

102 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

106 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

109 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

110 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

111 
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
__END_NAMESPACE_STD


114 #ifde‡
__USE_GNU


118 
	~<xloˇÀ.h
>

121 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

124 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

125 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

128 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


130 *
	$°rdup
 (
__c⁄°
 *
__s
)

131 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

137 #i‡
deföed
 
__USE_GNU


138 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

139 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

142 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


144 
	#°rdu∑
(
s
) \

145 (
__exãnsi⁄__
 \

147 
__c⁄°
 *
__ﬁd
 = (
s
); \

148 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

149 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

150 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

151 
	}
}))

	)

154 
	#°∫du∑
(
s
, 
n
) \

155 (
__exãnsi⁄__
 \

157 
__c⁄°
 *
__ﬁd
 = (
s
); \

158 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

159 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

160 
__√w
[
__Àn
] = '\0'; \

161 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

162 }))

	)

165 
__BEGIN_NAMESPACE_STD


167 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

168 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

170 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

171 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

172 
__END_NAMESPACE_STD


174 #ifde‡
__USE_GNU


177 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

178 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

181 
__BEGIN_NAMESPACE_STD


184 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

185 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

188 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

189 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

191 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

192 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

194 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

195 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

199 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

200 
__THROW
 
	`__n⁄nuŒ
 ((2));

201 
__END_NAMESPACE_STD


205 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

207 **
__ª°ri˘
 
__ßve_±r
)

208 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

209 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


210 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

211 **
__ª°ri˘
 
__ßve_±r
)

212 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

215 #ifde‡
__USE_GNU


217 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

218 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

221 #ifde‡
__USE_GNU


225 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

226 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

231 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

232 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

233 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

234 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

235 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

240 
__BEGIN_NAMESPACE_STD


242 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

243 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__END_NAMESPACE_STD


246 #ifdef 
__USE_GNU


249 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

250 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

254 
__BEGIN_NAMESPACE_STD


256 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

257 
__END_NAMESPACE_STD


258 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


266 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


269 #ifde‡
__REDIRECT_NTH


270 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

271 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

272 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

274 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

275 
__THROW
 
	`__n⁄nuŒ
 ((2));

276 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

281 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

282 
__THROW
 
	`__n⁄nuŒ
 ((2));

286 #ifde‡
__USE_GNU


288 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #ifde‡
__USE_BSD


298 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

299 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

302 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

306 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

309 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

310 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

313 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

314 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

318 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifdef 
__USE_GNU


323 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

324 #ifde‡
__GNUC__


325 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

326 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

331 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

332 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

336 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

339 #ifdef 
__USE_GNU


342 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

343 
__loˇÀ_t
 
__loc
)

344 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

346 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

347 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

348 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

351 #ifdef 
__USE_BSD


354 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

356 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

359 #ifdef 
__USE_GNU


361 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

362 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

368 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

370 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

376 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

379 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

383 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

386 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

388 #i‚de‡
ba£«me


393 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

398 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

399 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

400 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


420 
	~<bôs/°rög.h
>

423 
	~<bôs/°rög2.h
>

426 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


428 
	~<bôs/°rög3.h
>

432 
__END_DECLS


	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 ? (((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)) \

1170 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1173 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1174 
__STRING_INLINE
 *

1175 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1177 *
__ªsu…
;

1178 i‡(
__s
 =
NULL
)

1179 
__s
 = *
__√xç
;

1180 *
__s
 =
__£p
)

1181 ++
__s
;

1182 
__ªsu…
 = 
NULL
;

1183 i‡(*
__s
 != '\0')

1185 
__ªsu…
 = 
__s
++;

1186 *
__s
 != '\0')

1187 i‡(*
__s
++ =
__£p
)

1189 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1194  
__ªsu…
;

1195 
	}
}

1196 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1197 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1202 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1203 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1205 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1206 
	#__°r£p
(
s
, 
ªje˘
) \

1207 
__exãnsi⁄__
 \

1208 ({ 
__r0
, 
__r1
, 
__r2
; \

1209 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1210 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1211 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1212 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1213 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1214 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1215 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1216 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1217 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1218 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1220 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1223 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1224 
__STRING_INLINE
 *

1225 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1227 *
__ªtvÆ
 = *
__s
;

1228 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1229 *(*
__s
)++ = '\0';

1230  
__ªtvÆ
;

1231 
	}
}

1233 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1234 
__STRING_INLINE
 *

1235 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1237 *
__ªtvÆ
 = *
__s
;

1238 i‡(
__ªtvÆ
 !
NULL
)

1240 *
__˝
 = 
__ªtvÆ
;

1243 i‡(*
__˝
 == '\0')

1245 
__˝
 = 
NULL
;

1248 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1250 *
__˝
++ = '\0';

1253 ++
__˝
;

1255 *
__s
 = 
__˝
;

1257  
__ªtvÆ
;

1258 
	}
}

1260 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1261 
__ªje˘3
);

1262 
__STRING_INLINE
 *

1263 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1265 *
__ªtvÆ
 = *
__s
;

1266 i‡(
__ªtvÆ
 !
NULL
)

1268 *
__˝
 = 
__ªtvÆ
;

1271 i‡(*
__˝
 == '\0')

1273 
__˝
 = 
NULL
;

1276 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1278 *
__˝
++ = '\0';

1281 ++
__˝
;

1283 *
__s
 = 
__˝
;

1285  
__ªtvÆ
;

1286 
	}
}

1287 #ifde‡
__USE_BSD


1288 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1295 #ifde‡
__USE_MISC


1297 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1298 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1299 
	~<°dlib.h
>

1302 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1304 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1305 
	#__°rdup
(
s
) \

1306 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1307 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1308 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1309 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1310 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1311 i‡(
__ªtvÆ
 !
NULL
) \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1313 
__ªtvÆ
; 
	}
})) \

1314 : 
	`__°rdup
 (
s
)))

	)

1316 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1317 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1321 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1323 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1324 
__THROW
 
__©åibuã_mÆloc__
;

1325 
	#__°∫dup
(
s
, 
n
) \

1326 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1327 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1328 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1329 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1330 
size_t
 
__n
 = (
n
); \

1331 *
__ªtvÆ
; \

1332 i‡(
__n
 < 
__Àn
) \

1333 
__Àn
 = 
__n
 + 1; \

1334 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1335 i‡(
__ªtvÆ
 !
NULL
) \

1337 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1338 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1339 
__Àn
 - 1); \

1341 
__ªtvÆ
; 
	}
})) \

1342 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1344 #ifde‡
__USE_GNU


1345 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1351 #i‚de‡
_FORCE_INLINES


1352 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0)

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

91 
size_t
 
__Àn
))

93 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

94 
	}
}

96 
__exã∫_Æways_ölöe
 

97 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

99 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

100 
	}
}

103 
__exã∫_Æways_ölöe
 *

104 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

106  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

107 
	}
}

109 #ifde‡
__USE_GNU


110 
__exã∫_Æways_ölöe
 *

111 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

113  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

114 
	}
}

118 
__exã∫_Æways_ölöe
 *

119 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

120 
size_t
 
__Àn
))

122  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

123 
	}
}

126 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

127 
size_t
 
__de°Àn
Ë
__THROW
;

128 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

129 
__c⁄°
 *
__§c
,

130 
size_t
 
__n
), 
°≤˝y
);

132 
__exã∫_Æways_ölöe
 *

133 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

135 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

136 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

137  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

138  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

139 
	}
}

142 
__exã∫_Æways_ölöe
 *

143 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

145  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

146 
	}
}

149 
__exã∫_Æways_ölöe
 *

150 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

151 
size_t
 
__Àn
))

153  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

154 
	}
}

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

93 #unde‡
__USE_ISOC99


94 #unde‡
__USE_ISOC95


95 #unde‡
__USE_POSIX


96 #unde‡
__USE_POSIX2


97 #unde‡
__USE_POSIX199309


98 #unde‡
__USE_POSIX199506


99 #unde‡
__USE_XOPEN


100 #unde‡
__USE_XOPEN_EXTENDED


101 #unde‡
__USE_UNIX98


102 #unde‡
__USE_XOPEN2K


103 #unde‡
__USE_LARGEFILE


104 #unde‡
__USE_LARGEFILE64


105 #unde‡
__USE_FILE_OFFSET64


106 #unde‡
__USE_BSD


107 #unde‡
__USE_SVID


108 #unde‡
__USE_MISC


109 #unde‡
__USE_ATFILE


110 #unde‡
__USE_GNU


111 #unde‡
__USE_REENTRANT


112 #unde‡
__USE_FORTIFY_LEVEL


113 #unde‡
__FAVOR_BSD


114 #unde‡
__KERNEL_STRICT_NAMES


118 #i‚de‡
_LOOSE_KERNEL_NAMES


119 
	#__KERNEL_STRICT_NAMES


	)

123 
	#__USE_ANSI
 1

	)

132 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


133 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

134 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

136 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

141 #i‡
deföed
 
_BSD_SOURCE
 && \

142 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

143 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

144 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

145 
	#__FAVOR_BSD
 1

	)

149 #ifde‡
_GNU_SOURCE


150 #unde‡
_ISOC99_SOURCE


151 
	#_ISOC99_SOURCE
 1

	)

152 #unde‡
_POSIX_SOURCE


153 
	#_POSIX_SOURCE
 1

	)

154 #unde‡
_POSIX_C_SOURCE


155 
	#_POSIX_C_SOURCE
 200112L

	)

156 #unde‡
_XOPEN_SOURCE


157 
	#_XOPEN_SOURCE
 600

	)

158 #unde‡
_XOPEN_SOURCE_EXTENDED


159 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

160 #unde‡
_LARGEFILE64_SOURCE


161 
	#_LARGEFILE64_SOURCE
 1

	)

162 #unde‡
_BSD_SOURCE


163 
	#_BSD_SOURCE
 1

	)

164 #unde‡
_SVID_SOURCE


165 
	#_SVID_SOURCE
 1

	)

166 #unde‡
_ATFILE_SOURCE


167 
	#_ATFILE_SOURCE
 1

	)

172 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

173 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

174 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

175 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

176 
	#_BSD_SOURCE
 1

	)

177 
	#_SVID_SOURCE
 1

	)

184 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

185 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

186 
	#__USE_ISOC99
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

192 
	#__USE_ISOC95
 1

	)

197 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

198 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

199 
	#_POSIX_SOURCE
 1

	)

200 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

201 
	#_POSIX_C_SOURCE
 2

	)

202 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

203 
	#_POSIX_C_SOURCE
 199506L

	)

205 
	#_POSIX_C_SOURCE
 200112L

	)

209 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


210 
	#__USE_POSIX
 1

	)

213 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


214 
	#__USE_POSIX2
 1

	)

217 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

218 
	#__USE_POSIX199309
 1

	)

221 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

222 
	#__USE_POSIX199506
 1

	)

225 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

226 
	#__USE_XOPEN2K
 1

	)

229 #ifdef 
_XOPEN_SOURCE


230 
	#__USE_XOPEN
 1

	)

231 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

232 
	#__USE_XOPEN_EXTENDED
 1

	)

233 
	#__USE_UNIX98
 1

	)

234 #unde‡
_LARGEFILE_SOURCE


235 
	#_LARGEFILE_SOURCE
 1

	)

236 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #ifde‡
_XOPEN_SOURCE_EXTENDED


243 
	#__USE_XOPEN_EXTENDED
 1

	)

248 #ifde‡
_LARGEFILE_SOURCE


249 
	#__USE_LARGEFILE
 1

	)

252 #ifde‡
_LARGEFILE64_SOURCE


253 
	#__USE_LARGEFILE64
 1

	)

256 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

257 
	#__USE_FILE_OFFSET64
 1

	)

260 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


261 
	#__USE_MISC
 1

	)

264 #ifdef 
_BSD_SOURCE


265 
	#__USE_BSD
 1

	)

268 #ifdef 
_SVID_SOURCE


269 
	#__USE_SVID
 1

	)

272 #ifdef 
_ATFILE_SOURCE


273 
	#__USE_ATFILE
 1

	)

276 #ifdef 
_GNU_SOURCE


277 
	#__USE_GNU
 1

	)

280 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


281 
	#__USE_REENTRANT
 1

	)

284 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

285 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

286 #i‡
_FORTIFY_SOURCE
 > 1

287 
	#__USE_FORTIFY_LEVEL
 2

	)

289 
	#__USE_FORTIFY_LEVEL
 1

	)

292 
	#__USE_FORTIFY_LEVEL
 0

	)

296 
	#__STDC_IEC_559__
 1

	)

297 
	#__STDC_IEC_559_COMPLEX__
 1

	)

300 
	#__STDC_ISO_10646__
 200009L

	)

308 #unde‡
__GNU_LIBRARY__


309 
	#__GNU_LIBRARY__
 6

	)

313 
	#__GLIBC__
 2

	)

314 
	#__GLIBC_MINOR__
 7

	)

316 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

317 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

320 #i‡
deföed
 
__GNUC__
 \

321 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

322 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

323 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

324 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

328 #i‚de‡
__ASSEMBLER__


329 #i‚de‡
_SYS_CDEFS_H


330 
	~<sys/cdefs.h
>

335 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


336 
	#__USE_LARGEFILE
 1

	)

337 
	#__USE_LARGEFILE64
 1

	)

343 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

344 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

345 && 
deföed
 
	g__exã∫_ölöe


346 
	#__USE_EXTERN_INLINES
 1

	)

354 
	~<gnu/°ubs.h
>

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

5 #unde‡
NULL


6 #i‡
deföed
(
__˝lu•lus
)

7 
	#NULL
 0

	)

9 
	#NULL
 ((*)0)

	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

53 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

518 
__END_NAMESPACE_STD


520 #ifdef 
__USE_MISC


523 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

524 
__THROW
 
	`__n⁄nuŒ
 ((1));

527 
__BEGIN_NAMESPACE_STD


531 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

532 
__END_NAMESPACE_STD


534 #ifde‡
__USE_ISOC99


535 
__BEGIN_NAMESPACE_C99


538 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

539 
__END_NAMESPACE_C99


543 
__BEGIN_NAMESPACE_STD


545 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

546 
__END_NAMESPACE_STD


550 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

551 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

553 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


557 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

560 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


563 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

564 
__THROW
 
	`__n⁄nuŒ
 ((2));

567 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

570 #ifdef 
__USE_MISC


574 
	$˛óªnv
 (Ë
__THROW
;

578 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


583 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

593 #i‚de‡
__USE_FILE_OFFSET64


594 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

596 #ifde‡
__REDIRECT


597 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

598 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

600 
	#mk°emp
 
mk°emp64


	)

603 #ifde‡
__USE_LARGEFILE64


604 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

608 #ifde‡
__USE_BSD


614 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__USE_GNU


624 #i‚de‡
__USE_FILE_OFFSET64


625 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

627 #ifde‡
__REDIRECT


628 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

629 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

631 
	#mko°emp
 
mko°emp64


	)

634 #ifde‡
__USE_LARGEFILE64


635 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 
__BEGIN_NAMESPACE_STD


645 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

646 
__END_NAMESPACE_STD


649 #ifdef 
__USE_GNU


652 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

653 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


662 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

663 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

668 #i‚de‡
__COMPAR_FN_T


669 
	#__COMPAR_FN_T


	)

670 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

672 #ifdef 
__USE_GNU


673 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

677 
__BEGIN_NAMESPACE_STD


680 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

681 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

682 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

686 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

687 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

691 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

692 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

693 
__END_NAMESPACE_STD


695 #ifde‡
__USE_ISOC99


696 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

697 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

701 
__BEGIN_NAMESPACE_STD


705 
div_t
 
	$div
 (
__numî
, 
__díom
)

706 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

707 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

708 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

709 
__END_NAMESPACE_STD


711 #ifde‡
__USE_ISOC99


712 
__BEGIN_NAMESPACE_C99


713 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

714 
__díom
)

715 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

716 
__END_NAMESPACE_C99


720 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


727 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

728 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

733 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

734 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

739 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

740 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

743 #ifde‡
__USE_MISC


745 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

746 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

747 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

748 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

749 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

750 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

751 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

752 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

757 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

758 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

759 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

760 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

761 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

762 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

764 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

765 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

766 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

767 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

768 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

769 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

770 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

771 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

776 
__BEGIN_NAMESPACE_STD


779 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

782 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

783 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

786 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

790 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

791 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

793 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

794 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

795 
__THROW
;

796 
__END_NAMESPACE_STD


799 #ifde‡
__USE_SVID


804 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

808 #ifde‡
__USE_XOPEN_EXTENDED


815 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

816 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

817 **
__ª°ri˘
 
__vÆuï
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

822 #ifde‡
__USE_XOPEN


824 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_XOPEN2K


832 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

835 #ifde‡
__USE_XOPEN


840 
	$gø¡±
 (
__fd
Ë
__THROW
;

844 
	$u∆ock±
 (
__fd
Ë
__THROW
;

849 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

852 #ifde‡
__USE_GNU


856 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

857 
__THROW
 
	`__n⁄nuŒ
 ((2));

860 
	`gë±
 ();

863 #ifde‡
__USE_BSD


867 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


874 
	~<bôs/°dlib.h
>

876 #ifde‡
__LDBL_COMPAT


877 
	~<bôs/°dlib-ldbl.h
>

881 #unde‡
__√ed_mÆloc_™d_ˇŒoc


883 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

312 #i‡
__GNUC_PREREQ
 (4,3)

313 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

314 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

321 #i‡!
__GNUC_PREREQ
 (2,8)

322 
	#__exãnsi⁄__


	)

326 #i‡!
__GNUC_PREREQ
 (2,92)

327 
	#__ª°ri˘


	)

333 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


334 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

336 #ifde‡
__GNUC__


337 
	#__ª°ri˘_¨r


	)

339 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

340 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

343 
	#__ª°ri˘_¨r


	)

348 
	~<bôs/w‹dsize.h
>

350 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


351 
	#__LDBL_COMPAT
 1

	)

352 #ifde‡
__REDIRECT


353 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

354 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

355 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

356 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

357 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

358 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

359 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

360 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

361 
	#__LDBL_REDIR_DECL
(
«me
) \

362 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

363 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

364 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

365 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

366 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

369 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

372 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

373 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

374 
	#__LDBL_REDIR_DECL
(
«me
)

	)

375 #ifde‡
__REDIRECT


376 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

377 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

378 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

24 #i‚def 
_TIME_H


26 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

27 ! 
deföed
 
	g__√ed_time•ec
)

28 
	#_TIME_H
 1

	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 #ifdef 
_TIME_H


37 
	#__√ed_size_t


	)

38 
	#__√ed_NULL


	)

39 
	~<°ddef.h
>

43 
	~<bôs/time.h
>

46 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


47 #i‚de‡
CLK_TCK


48 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

54 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

55 
	#__˛ock_t_deföed
 1

	)

57 
	~<bôs/ty≥s.h
>

59 
__BEGIN_NAMESPACE_STD


61 
__˛ock_t
 
	t˛ock_t
;

62 
	g__END_NAMESPACE_STD


63 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


64 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

68 #unde‡
__√ed_˛ock_t


70 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

71 
	#__time_t_deföed
 1

	)

73 
	~<bôs/ty≥s.h
>

75 
__BEGIN_NAMESPACE_STD


77 
__time_t
 
	ttime_t
;

78 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


80 
	$__USING_NAMESPACE_STD
(
time_t
)

84 #unde‡
__√ed_time_t


86 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

87 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

88 
	#__˛ockid_t_deföed
 1

	)

90 
	~<bôs/ty≥s.h
>

93 
__˛ockid_t
 
	t˛ockid_t
;

96 #unde‡
__˛ockid_time_t


98 #i‡!
deföed
 
__timî_t_deföed
 && \

99 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

100 
	#__timî_t_deföed
 1

	)

102 
	~<bôs/ty≥s.h
>

105 
__timî_t
 
	ttimî_t
;

108 #unde‡
__√ed_timî_t


111 #i‡!
deföed
 
__time•ec_deföed
 && \

112 ((
deföed
 
_TIME_H
 && \

113 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

114 
deföed
 
__√ed_time•ec
)

115 
	#__time•ec_deföed
 1

	)

117 
	~<bôs/ty≥s.h
>

121 
	stime•ec


123 
__time_t
 
tv_£c
;

124 
tv_n£c
;

128 #unde‡
__√ed_time•ec


131 #ifdef 
_TIME_H


132 
__BEGIN_NAMESPACE_STD


134 
	stm


136 
tm_£c
;

137 
tm_mö
;

138 
tm_hour
;

139 
tm_mday
;

140 
tm_m⁄
;

141 
tm_yór
;

142 
tm_wday
;

143 
tm_yday
;

144 
tm_isd°
;

146 #ifdef 
__USE_BSD


147 
tm_gmtoff
;

148 
__c⁄°
 *
tm_z⁄e
;

150 
__tm_gmtoff
;

151 
__c⁄°
 *
__tm_z⁄e
;

154 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


156 
	$__USING_NAMESPACE_STD
(
tm
)

160 #ifde‡
__USE_POSIX199309


162 
	sôimî•ec


164 
time•ec
 
ô_öãrvÆ
;

165 
time•ec
 
ô_vÆue
;

169 
sigevít
;

173 #ifde‡
__USE_XOPEN2K


174 #i‚de‡
__pid_t_deföed


175 
__pid_t
 
	tpid_t
;

176 
	#__pid_t_deföed


	)

181 
__BEGIN_NAMESPACE_STD


184 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

187 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

190 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

191 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

194 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

200 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

201 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

202 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

203 
__END_NAMESPACE_STD


205 #ifde‡
__USE_XOPEN


208 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

209 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

210 
__THROW
;

213 #ifde‡
__USE_GNU


216 
	~<xloˇÀ.h
>

218 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

219 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

220 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

221 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

224 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

225 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 
__BEGIN_NAMESPACE_STD


232 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

236 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
__END_NAMESPACE_STD


239 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


242 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

243 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

247 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

248 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

251 
__BEGIN_NAMESPACE_STD


254 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

257 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

258 
__END_NAMESPACE_STD


260 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


265 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

266 *
__ª°ri˘
 
__buf
Ë
__THROW
;

269 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

270 *
__ª°ri˘
 
__buf
Ë
__THROW
;

275 *
__tz«me
[2];

276 
__daylight
;

277 
__timez⁄e
;

280 #ifdef 
__USE_POSIX


282 *
tz«me
[2];

286 
	$tz£t
 (Ë
__THROW
;

289 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


290 
daylight
;

291 
timez⁄e
;

294 #ifde‡
__USE_SVID


297 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

303 
	#__i¶óp
(
yór
) \

304 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

307 #ifde‡
__USE_MISC


312 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

315 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

318 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifde‡
__USE_POSIX199309


327 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

328 
time•ec
 *
__ªmaöög
);

332 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

335 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

338 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

339 
__THROW
;

341 #ifde‡
__USE_XOPEN2K


346 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

347 
__c⁄°
 
time•ec
 *
__ªq
,

348 
time•ec
 *
__ªm
);

351 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

356 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

357 
sigevít
 *
__ª°ri˘
 
__evp
,

358 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

361 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

364 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

365 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

366 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

369 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

370 
__THROW
;

373 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

377 #ifde‡
__USE_XOPEN_EXTENDED


389 
gëd©e_îr
;

398 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

401 #ifde‡
__USE_GNU


412 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

413 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

416 
__END_DECLS


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


26 
	#__FD_ZERO
(
s
) \

28 
__i
; \

29 
fd_£t
 *
__¨r
 = (
s
); \

30 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

31 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

32 } 0)

	)

33 
	#__FD_SET
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] |
	`__FDMASK
(d))

	)

34 
	#__FD_CLR
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] &~
	`__FDMASK
(d))

	)

35 
	#__FD_ISSET
(
d
, 
s
Ë((
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] & 
	`__FDMASK
(d)Ë!0)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@
1
.
1
/usr/include
66
1474
bootmem.c
media.h
prism_s.h
prism_s_v137.c
regs-clock.h
regs-mfc.h
s3c_mfc.c
s3c_mfc.h
s3c_mfc10.mod.c
s3c_mfc_base.h
s3c_mfc_bitproc_buf.c
s3c_mfc_bitproc_buf.h
s3c_mfc_config.h
s3c_mfc_databuf.c
s3c_mfc_databuf.h
s3c_mfc_init_hw.c
s3c_mfc_init_hw.h
s3c_mfc_inst_pool.c
s3c_mfc_inst_pool.h
s3c_mfc_instance.c
s3c_mfc_instance.h
s3c_mfc_intr_noti.h
s3c_mfc_params.h
s3c_mfc_set_config.c
s3c_mfc_sfr.c
s3c_mfc_sfr.h
s3c_mfc_types.h
s3c_mfc_yuv_buf_manager.c
s3c_mfc_yuv_buf_manager.h
/usr/include/asm/setup.h
/usr/include/asm/types.h
/usr/include/linux/kernel.h
/usr/include/linux/string.h
/usr/include/linux/types.h
/usr/include/linux/wait.h
/usr/include/linux/posix_types.h
/usr/include/string.h
/usr/include/asm/posix_types.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/features.h
/usr/include/linux/stddef.h
/usr/include/xlocale.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/stdlib.h
/usr/include/sys/cdefs.h
/usr/include/alloca.h
/usr/include/bits/endian.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/typesizes.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs-32.h
/usr/include/sys/types.h
/usr/include/bits/pthreadtypes.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
