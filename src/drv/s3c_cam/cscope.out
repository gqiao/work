cscope 15 /work/prj/teclong/src/drv/s3c_cam               0000310100
	@osal.h

1 #i‡!
deföed
 
_OSAL_H_
 && deföed 
__KERNEL__


2 
	#_OSAL_H_


	)

4 
	~<löux/öô.h
>

5 
	~<löux/moduÀ.h
>

6 
	~<löux/moduÀ∑øm.h
>

7 
	~<löux/ty≥s.h
>

8 
	~<löux/timî.h
>

9 
	~<löux/kî√l.h
>

10 
	~<löux/fs.h
>

11 
	~<löux/∂©f‹m_devi˚.h
>

12 
	~<löux/öãºu±.h
>

13 
	~<löux/˛k.h
>

14 
	~<löux/dñay.h
>

15 
	~<asm/uac˚ss.h
>

16 
	~<löux/î∫o.h
>

17 
	~<asm/div64.h
>

18 
	~<löux/mm.h
>

19 
	~<löux/ây.h
>

20 
	~<asm/io.h
>

21 
	~<asm/úq.h
>

22 
	~<löux/úq.h
>

23 
	~<asm/h¨dw¨e.h
>

24 
	~<asm/uac˚ss.h
>

25 
	~<asm/¨ch/m≠.h
>

26 
	~<löux/miscdevi˚.h
>

27 
	~<löux/vîsi⁄.h
>

28 
	~<löux/maj‹.h
>

29 
	~<löux/¶ab.h
>

30 
	~<löux/pﬁl.h
>

31 
	~<löux/sig«l.h
>

32 
	~<löux/i›‹t.h
>

33 
	~<löux/sched.h
>

34 
	~<löux/kmod.h
>

35 
	~<löux/vmÆloc.h
>

36 
	~<asm/∑ge.h
>

37 
	~<asm/£m≠h‹e.h
>

38 
	~<löux/videodev.h
>

39 
	~<löux/videodev2.h
>

40 
	~<medü/v4l2-dev.h
>

43 #i‡
LINUX_VERSION_CODE
 =
KERNEL_VERSION
(2,6,16)

44 
	~<löux/c⁄fig.h
>

45 
	~<asm/¨ch/ªgi°îs.h
>

48 #ifde‡
LOG_TAG


49 
	#__E
(
fmt
, 
¨gs
...Ë({ 
	`¥ötk
(
KERN_ERR
 "E/%-10†-> %3d: %s(): " fmt, 
LOG_TAG
, 
__LINE__
, 
__FUNCTION__
, ##árgs);})

	)

50 
	#__W
(
fmt
, 
¨gs
...Ë({ 
	`¥ötk
(
KERN_ERR
 "W/%-10†-> %3d: %s(): " fmt, 
LOG_TAG
, 
__LINE__
, 
__FUNCTION__
, ##árgs);})

	)

51 
	#__I
(
fmt
, 
¨gs
...Ë({ 
	`¥ötk
(
KERN_ERR
 "I/%-10†-> %3d: %s(): " fmt, 
LOG_TAG
, 
__LINE__
, 
__FUNCTION__
, ##árgs);})

	)

53 #ifde‡
__DEBUG


54 
	#__D
(
fmt
, 
¨gs
...Ë({ 
	`¥ötk
(
KERN_ERR
 "D/%-10†-> %3d: %s(): " fmt, 
LOG_TAG
, 
__LINE__
, 
__FUNCTION__
, ##árgs);})

	)

57 
	#__D
(
fmt
, 
¨gs
...)

	)

62 
	#__D
(
fmt
, 
¨gs
...)

	)

63 
	#__E
(
fmt
, 
¨gs
...)

	)

64 
	#__W
(
fmt
, 
¨gs
...)

	)

65 
	#__I
(
fmt
, 
¨gs
...)

	)

	@s3c.h

1 #i‚de‡
__HAL_S3C_H__


2 
	#__HAL_S3C_H__


	)

4 
	~<löux/öô.h
>

5 
	~<löux/moduÀ.h
>

6 
	~<löux/moduÀ∑øm.h
>

7 
	~<löux/ty≥s.h
>

8 
	~<löux/timî.h
>

9 
	~<löux/kî√l.h
>

10 
	~<löux/fs.h
>

11 
	~<löux/∂©f‹m_devi˚.h
>

12 
	~<löux/öãºu±.h
>

13 
	~<löux/˛k.h
>

14 
	~<löux/dñay.h
>

15 
	~<asm/uac˚ss.h
>

16 
	~<löux/î∫o.h
>

17 
	~<asm/div64.h
>

18 
	~<löux/mm.h
>

19 
	~<löux/ây.h
>

20 
	~<asm/io.h
>

21 
	~<asm/úq.h
>

22 
	~<asm/h¨dw¨e.h
>

23 
	~<asm/uac˚ss.h
>

24 
	~<asm/¨ch/m≠.h
>

25 
	~<löux/miscdevi˚.h
>

26 
	~<löux/vîsi⁄.h
>

27 vﬁ©ûê
	tu32
 
	tv32
;

30 
v32
 
	mAPLL_SEL
 :1,

31 
	mMPLL_SEL
 :1,

32 
	mEPLL_SEL
 :1,

33 
	mRESERVED
 :1,

34 
	mMFCCLK_SEL
 :1,

35 
	mUHOST_SEL
 :2,

36 
	mAUDIO0_SEL
 :3,

37 
	mAUDIO1_SEL
 :3,

38 
	mUART_SEL
 :1,

39 
	mSPI0_SEL
 :2,

40 
	mSPI1_SEL
 :2,

41 
	mMMC0_SEL
 :2,

42 
	mMMC1_SEL
 :2,

43 
	mMMC2_SEL
 :2,

44 
	mIRDA_SEL
 :2,

45 
	mLCD_SEL
 :2,

46 
	mSCALER_SEL
 :2,

47 
	mDAC27_SEL
 :1,

48 
	mTV27_SEL
 :1;

49 }
	ts3c_˛k_§c_t
;

53 
v32
 
	mInYCbCrF‹m©_LSB
 :1,

54 
	mInRGBF‹m©
 :1,

55 
	mINTERLEAVE
 :1,

56 
	mInRGB
 :1,

57 
	mOutRGBF‹m©
 :1,

58 
	mIRQ_Levñ
 :1,

59 
	mPOSTINT
 :1,

60 
	mINTEN
 :1,

61 
	mSRC420
 :1,

62 
	mª£rved1
 :1,

63 
	mWide_N¨row
 :2,

64 
	mI¡îœ˚
 :1,

65 
	mLCDP©hE«bÀ
 :1,

66 
	mAutoLﬂdE«bÀ
 :1,

67 
	mInYCbCrF‹m©_MSB
 :1,

68 
	mR2YSñ
 :1,

69 
	mDST420
 :1,

70 
	mOutRGB
 :1,

71 
	mOutYCbCrF‹m©
 :2,

72 
	mCLKSEL_F
 :2,

73 
	mCLKDIR
 :1,

74 
	mCLKVAL_F
 :6,

75 
	mCLKVALUP
 :1,

76 
	mExtFIFOIn
 :1;

77 }
	mMODE
;

80 
v32
 
	mPªSˇÀ_H_R©io
 :7,

81 
	mPªSˇÀ_V_R©io
 :7,

82 
	mª£rved1
 :18;

83 }
	mPªSˇÀ_R©io
;

86 
v32
 
	mPªSˇÀ_DSTWidth
 :12,

87 
	mPªSˇÀ_DSTHeight
 :12,

88 
	mª£rved1
 :8;

89 }
	mPªSˇÀImgSize
;

92 
v32
 
	mSRCWidth
 :12,

93 
	mSRCHeight
 :12,

94 
	mª£rved1
 :8;

95 }
	mSRCImgSize
;

97 
v32
 
	mMaöSˇÀ_H_R©io
;

98 
v32
 
	mMaöSˇÀ_V_R©io
;

101 
v32
 
	mDSTWidth
 :12,

102 
	mDSTHeight
 :12,

103 
	mª£rved1
 :8;

104 } 
	mDSTImgSize
;

106 
v32
 
	mPªSˇÀ_SHFa˘‹
;

107 
v32
 
	mADDRSèπ_Y
;

108 
v32
 
	mADDRSèπ_Cb
;

109 
v32
 
	mADDRSèπ_Cr
;

110 
v32
 
	mADDRSèπ_RGB
;

111 
v32
 
	mADDREnd_Y
;

112 
v32
 
	mADDREnd_Cb
;

113 
v32
 
	mADDREnd_Cr
;

114 
v32
 
	mADDREnd_RGB
;

115 
v32
 
	mOff£t_Y
;

116 
v32
 
	mOff£t_Cb
;

117 
v32
 
	mOff£t_Cr
;

118 
v32
 
	mOff£t_RGB
;

119 
v32
 
	mª£rved1
;

120 
v32
 
	mNxtADDRSèπ_Y
;

121 
v32
 
	mNxtADDRSèπ_Cb
;

122 
v32
 
	mNxtADDRSèπ_Cr
;

123 
v32
 
	mNxtADDRSèπ_RGB
;

124 
v32
 
	mNxtADDREnd_Y
;

125 
v32
 
	mNxtADDREnd_Cb
;

126 
v32
 
	mNxtADDREnd_Cr
;

127 
v32
 
	mNxtADDREnd_RGB
;

128 
v32
 
	mADDRSèπ_oCb
;

129 
v32
 
	mADDRSèπ_oCr
;

130 
v32
 
	mADDREnd_oCb
;

131 
v32
 
	mADDREnd_oCr
;

132 
v32
 
	mOff£t_oCb
;

133 
v32
 
	mOff£t_oCr
;

134 
v32
 
	mNxtADDRSèπ_oCb
;

135 
v32
 
	mNxtADDRSèπ_oCr
;

136 
v32
 
	mNxtADDREnd_oCb
;

137 
v32
 
	mNxtADDREnd_oCr
;

140 
v32
 
	mª£rved1
 : 31,

141 
	míabÀ
 : 1;

142 }
	mPOSTENVID
;

145 
v32
 
	mh¨dw¨e_åiggî
 : 3,

146 
	mBC_SEL
 : 1,

147 
	mADDR_CH_DIS
 : 1,

148 
	mFIFO_OUT_PATH
 : 2,

149 
	mª£rved
 : 25;

150 }
	mMODE_2
;

152 } 
	ts3c_tvsˇÀr_t
;

156 
v32
 
	mTVONOFF
 : 1,

157 
	mª£rved1
 : 3,

158 
	mTVOUTFMT
 : 3,

159 
	mª£rved2
 : 1,

160 
	mTVOUTTYPE
 : 1,

161 
	mª£rved3
 : 3,

162 
	mINTSètus
 : 1,

163 
	mª£rved4
 : 3,

164 
	mINTFIFOUR
 : 1,

165 
	mª£rved5
 : 15;

166 }
	mTVCTRL
;

169 
v32
 
	mVOFBPD
 : 8,

170 
	mª£rved1
 : 8,

171 
	mVEFBPD
 : 9,

172 
	mª£rved2
 : 7;

173 }
	mVBPORCH
;

175 
v32
 
	mHBPD
 : 11,

176 
	mª£rved1
 : 5,

177 
	mHSPW
 : 8,

178 
	mª£rved2
 : 8;

179 }
	mHBPORCH
;

181 
v32
 
	mHEOV
 : 5,

182 
	mª£rved1
 : 3,

183 
	mDTOff£t
 : 3,

184 
	mª£rved2
 : 5,

185 
	mHACTWöCíCTRL
 : 8,

186 
	mVACTWöCíCTRL
 : 6,

187 
	mª£rved3
 : 2;

188 }
	mHEnhOff£t
;

190 
v32
 
	mVDWSP
 : 9,

191 
	mª£rved1
 : 7,

192 
	mVDWS
 : 9,

193 
	mª£rved2
 : 7;

194 }
	mVDemoWöSize
;

196 
v32
 
	mHDWSP
 : 11,

197 
	mª£rved1
 : 5,

198 
	mHDWEP
 : 11,

199 
	mª£rved2
 : 5;

200 }
	mHDemoWöSize
;

203 
v32
 
	mImageWidth
 : 11,

204 
	mª£rved1
 : 5,

205 
	mImageHeight
 : 10,

206 
	mª£rved2
 : 6;

207 }
	mInImageSize
;

208 
v32
 
	mPEDCTRL
;

210 
v32
 
	mCBW
 : 2,

211 
	mª£rved1
 : 2,

212 
	mYBW
 : 3,

213 
	mª£rved2
 : 25;

214 }
	mYCFûãrBW
;

216 
v32
 
	mHUECTRL
;

218 
v32
 
	mFscCTRL
;

221 
v32
 
	mFscDTOM™uÆ
 : 31,

222 
	mFscMEn
 : 1;

223 }
	mFscDTOM™CTRL
;

225 
v32
 
	mª£rved1
;

227 
v32
 
	mBGYOFS
 : 4,

228 
	mBGCS
 : 3,

229 
	mª£rved1
 : 1,

230 
	mSME
 : 1;

231 }
	mBGCTRL
;

234 
v32
 
	mBGVS
 : 8,

235 
	mBGVL
 : 8,

236 
	mBGHS
 : 8,

237 
	mBGHL
 : 8;

238 }
	mBGHVAVCTRL
;

240 
v32
 
	mª£rved2
[2];

243 
v32
 
	mCONTRAST
 : 8,

244 
	mª£rved1
 : 8,

245 
	mBRIGHT
 : 8;

246 }
	mC⁄åaBright
;

249 
v32
 
	mCBGAIN
 : 8,

250 
	mª£rved1
 : 8,

251 
	mCRGAIN
 : 8;

252 }
	mCbCrGaöCTRL
;

255 
v32
 
	mBSGn
 : 2,

256 
	mª£rved1
 : 6,

257 
	mWStOff
 : 1,

258 
	mª£rved2
 : 3,

259 
	mBStOff
 : 1,

260 
	mª£rved3
 : 3,

261 
	mFªshEn
 : 1,

262 
	mª£rved4
 : 7,

263 
	mMVDemo
 : 1;

264 }
	mDemoWöCTRL
;

267 
v32
 
	mFTCAS
 : 8,

268 
	mª£rved1
 : 8,

269 
	mFTCAC
 : 8;

270 }
	mFTCA
;

272 
v32
 
	mª£rved3
;

274 
v32
 
	mBGaö
 : 4,

275 
	mWGaö
 : 4;

276 }
	mBWGAIN
;

278 
v32
 
	mª£rved4
;

280 
v32
 
	mDShpGn
 : 6,

281 
	mª£rved1
 : 2,

282 
	mDShpF0
 : 2,

283 
	mª£rved2
 : 2,

284 
	mSDhC‹
 : 3,

285 
	mª£rved3
 : 5,

286 
	mSHARPT
 : 8;

287 }
	mSh¨pCTRL
;

290 
v32
 
	mDCTRAN
 : 3,

291 
	mª£rved1
 : 5,

292 
	mGamMode
 : 2,

293 
	mRe£rved2
 : 2,

294 
	mGamEn
 : 1;

295 }
	mGammaCTRL
;

298 
v32
 
	mFdr°
 : 1,

299 
	mª£rved1
 : 3,

300 
	mPhÆt
 : 1;

301 }
	mFscAuxCTRL
;

303 
v32
 
	mSyncSizeCTRL
;

306 
v32
 
	mBuSt
 : 10,

307 
	mª£rved1
 : 6,

308 
	mBuEnd
 : 10;

309 }
	mBur°CTRL
;

311 
v32
 
	mMa¸oBur°CTRL
;

314 
v32
 
	mAv⁄St
 : 10,

315 
	mª£rved1
 : 6,

316 
	mAv⁄End
 : 10;

317 }
	mA˘VidPoCTRL
;

319 
v32
 
	mEncCTRL
;

322 
v32
 
	mMuãOnOff
 : 1,

323 
	mª£rved1
 : 7,

324 
	mMuãY
 : 8,

325 
	mMuãCb
 : 8,

326 
	mMuãCr
 : 8;

327 }
	mMuãCTRL
;

328 } 
	ts3c_tvíc_t
;

335 
v32
 
	mSrcVsize_CAM
 :13,

336 
	mª£rved1
 :1,

337 
	mOrdî422_CAM
 :2,

338 
	mSrcHsize_CAM
 :13,

339 
	mª£rved2
 :1,

340 
	mUVOff£t
 :1,

341 
	mITU601_656n
 :1;

342 } 
	mCISRCFMT
;

345 
v32
 
	mWöVîOf°
 :11,

346 
	mª£rved1
 :1,

347 
	mCÃOvPrFiCr
 :1,

348 
	mCÃOvPrFiCb
 :1,

349 
	mCÃOvCoFiCr
 :1,

350 
	mCÃOvCoFiCb
 :1,

351 
	mWöH‹Of°
 :11,

352 
	mCÃOvPrFiY
 :1,

353 
	mCÃOvRLB_Pr
 :1,

354 
	mª£rved2
 :1,

355 
	mCÃOvCoFiY
 :1,

356 
	mWöOfsEn
 :1;

357 } 
	mCIWDOFST
;

361 
v32
 
	mCam_I¡îÁ˚
 :1,

362 
	mInvPﬁFIELD
 :1,

363 
	mFIELDMODE
 :1,

364 
	mª£rved1
 :15,

365 
	mIRQ_CLR_p
 :1,

366 
	mIRQ_CLR_c
 :1,

367 
	mIRQ_Levñ
 :1,

368 
	mHªf_mask
 :1,

369 
	mIRQ_Ov„n
 :1,

370 
	mª£rved2
 :1,

371 
	mInvPﬁHREF
 :1,

372 
	mInvPﬁVSYNC
 :1,

373 
	mInvPﬁPCLK
 :1,

374 
	mTe°P©ã∫
 :2,

375 
	mª£rved3
 :1,

376 
	mCamR°
 :1,

377 
	mSwR°
 :1;

378 } 
	mCIGCTRL
;

381 
v32
 
	mª£rved1
[2];

385 
v32
 
	mWöVîOf°2
 :11,

386 
	mª£rved1
 :5,

387 
	mWöH‹Of°2
 :11;

388 } 
	mCIWDOFST2
;

394 
v32
 
	mCICOYSA
[4];

400 
v32
 
	mCICOCBSA
[4];

406 
v32
 
	mCICOCRSA
[4];

410 
v32
 
	mT¨gëVsize_Co
 :13,

411 
	mª£rved1
 :1,

412 
	mFlùMd_Co
 :2,

413 
	mT¨gëHsize_Co
 :13,

414 
	mOutF‹m©_Co
 :2;

415 } 
	mCICOTRGFMT
;

419 
v32
 
	mOrdî422_Co
 :2,

420 
	mLa°IRQEn_Co
 :1,

421 
	mRe£rved1
 :1,

422 
	mCbur°2_Co
 :5,

423 
	mCbur°1_Co
 :5,

424 
	mYbur°2_Co
 :5,

425 
	mYbur°1_Co
 :5;

426 } 
	mCICOCTRL
;

430 
v32
 
	mPªVîR©io_Co
 :7,

431 
	mª£rved1
 :9,

432 
	mPªH‹R©io_Co
 :7,

433 
	mª£rved2
 :5,

434 
	mSHÁ˘‹_Co
 :4;

435 } 
	mCICOSCPRERATIO
;

439 
v32
 
	mPªD°Height_Co
 :12,

440 
	mª£rved1
 :4,

441 
	mPªD°Width_Co
 :12;

442 } 
	mCICOSCPREDST
;

446 
v32
 
	mMaöVîR©io_Co
 :9,

447 
	mO√2O√_Co
 :1,

448 
	mExt_RGB_Co
 :1,

449 
	mOutRGB_FMT_Co
 :2,

450 
	mInRGB_FMT_Co
 :2,

451 
	mCoSˇÀrSèπ
 :1,

452 
	mMaöH‹R©io_Co
 :9,

453 
	mI¡îœ˚_Co
 :1,

454 
	mLCDP©hEn_Co
 :1,

455 
	mCSCY2R_c
 :1,

456 
	mCSCR2Y_c
 :1,

457 
	mSˇÀUp_V_Co
 :1,

458 
	mSˇÀUp_H_Co
 :1,

459 
	mSˇÀrBy∑ss_Co
 :1;

460 } 
	mCICOSCCTRL
;

463 
v32
 
	mCICOTAREA
;

466 
v32
 
	mª£rved2
;

470 
v32
 
	mª£rved1
 :17,

471 
	mFømeEnd_Co
 :1,

472 
	mª£rved2
 :2,

473 
	mVSYNC_A
 :1,

474 
	mImgC±En_CoSC
 :1,

475 
	mImgC±En
 :1,

476 
	mFlùMd_Co
 :2,

477 
	mWöOf°En_Co
 :1,

478 
	mFømeC¡_Co
 :2,

479 
	mVSYNC
 :1,

480 
	mOvFiCr_Co
 :1,

481 
	mOvFiCb_Co
 :1,

482 
	mOvFiY_Co
 :1;

483 } 
	mCICOSTATUS
;

486 
v32
 
	mª£rved3
;

491 
v32
 
	mCIPRYSA
[4];

496 
v32
 
	mCIPRCBSA
[4];

501 
v32
 
	mCIPRCRSA
[4];

505 
v32
 
	mT¨gëVsize_Pr
 :13,

506 
	mRŸ90_Pr
 :1,

507 
	mFlùMd_Pr
 :2,

508 
	mT¨gëHsize_Pr
 :13,

509 
	mOutF‹m©_Pr
 :2;

510 } 
	mCIPRTRGFMT
;

514 
v32
 
	mOrdî422_Pr
 :2,

515 
	mLa°IRQEn_Pr
 :1,

516 
	mª£rved1
 :1,

517 
	mCbur°2_Pr
 :5,

518 
	mCbur°1_Pr
 :5,

519 
	mYbur°2_Pr
 :5,

520 
	mYbur°1_Pr
 :5;

521 } 
	mCIPRCTRL
;

525 
v32
 
	mPªVîR©io_Pr
 :7,

526 
	mª£rved1
 :9,

527 
	mPªH‹R©io_Pr
 :7,

528 
	mª£rved2
 :5,

529 
	mSHÁ˘‹_Pr
 :4;

530 } 
	mCIPRSCPRERATIO
;

534 
v32
 
	mPªD°Height_Pr
 :12,

535 
	mª£rved1
 :4,

536 
	mPªD°Width_Pr
 :12;

537 } 
	mCIPRSCPREDST
;

541 
v32
 
	mMaöVîR©io_Pr
 :9,

542 
	mO√2O√_Pr
 :1,

543 
	mExt_RGB_Pr
 :1,

544 
	mOutRGB_FMT_Pr
 :2,

545 
	mInRGB_FMT_Pr
 :2,

546 
	mPrSˇÀrSèπ
 :1,

547 
	mMaöH‹R©io_Pr
 :9,

548 
	mI¡îœ˚_Pr
 :1,

549 
	mLCDP©hEn_Pr
 :1,

550 
	mCSCY2R_Pr
 :1,

551 
	mCSCR2Y_Pr
 :1,

552 
	mSˇÀUp_V_Pr
 :1,

553 
	mSˇÀUp_H_Pr
 :1,

554 
	mSˇÀrBy∑ss_Pr
 :1;

555 } 
	mCIPRSCCTRL
;

558 
v32
 
	mCIPRTAREA
;

561 
v32
 
	mª£rved5
;

565 
v32
 
	mª£rved1
 :19,

566 
	mFømeEnd_Pr
 :1,

567 
	mOvRLB_Pr
 :1,

568 
	mImgC±En_PrSC
 :1,

569 
	mª£rved2
 :1,

570 
	mFlùMd_Pr
 :2,

571 
	mª£rved3
 :1,

572 
	mFømeC¡_Pr
 :2,

573 
	mª£rved4
 :1,

574 
	mOvFiCr_Pr
 :1,

575 
	mOvFiCb_Pr
 :1,

576 
	mOvFiY_Pr
 :1;

577 } 
	mCIPRSTATUS
;

580 
v32
 
	mª£rved6
;

584 
v32
 
	mª£rved1
 :10,

585 
	mC±_FrC¡
 :8,

586 
	mC±_FrMod
 :1,

587 
	mC±_FrPå
 :5,

588 
	mC±_FrEn_¥
 :1,

589 
	mC±_FrEn_Co
 :2,

590 
	mª£rved2
 :2,

591 
	mImgC±En_PrSc
 :1,

592 
	mImgC±En_CoSc
 :1,

593 
	mImgC±En
 :1;

594 } 
	mCIIMGCPT
;

597 
v32
 
	mCICPTSEQ
;

600 
v32
 
	mª£rved7
[2];

604 
v32
 
	mPAT_Cr
 :8,

605 
	mª£rved1
 :5,

606 
	mPAT_Cb
 :8,

607 
	mª£rved2
 :5,

608 
	mFIN
 :3,

609 
	mIE_AFTER_SC
 :1,

610 
	mIE_ON_Co
 :1,

611 
	mIE_ON_Pr
 :1;

612 } 
	mCIIMGEFF
;

615 
v32
 
	mMSCOY0SA
;

618 
v32
 
	mMSCOCB0SA
;

621 
v32
 
	mMSCOCR0SA
;

624 
v32
 
	mMSCOY0END
;

627 
v32
 
	mMSCOCB0END
;

630 
v32
 
	mMSCOCR0END
;

633 
v32
 
	mMSCOYOFF
;

636 
v32
 
	mMSCOCBOFF
;

639 
v32
 
	mMSCOCROFF
;

643 
v32
 
	mMSCOWIDTH
 :12,

644 
	mª£rved1
 :4,

645 
	mMSCOHEIGHT
 :12,

646 
	mª£rved2
 :2,

647 
	mADDR_CH_DIS
 :1,

648 
	mAutoLﬂdE«bÀ
 :1;

649 } 
	mMSCOWIDTH
;

653 
v32
 
	mENVID_M_C
 :1,

654 
	mInF‹m©_M_C
 :2,

655 
	mSEL_DMA_CAM_C
 :1,

656 
	mOrdî422_M_C
 :2,

657 
	mEOF_M_C
 :1;

658 } 
	mMSCOCTRL
;

661 
v32
 
	mMSPRY0SA
;

664 
v32
 
	mMSPRCB0SA
;

667 
v32
 
	mMSPRCR0SA
;

670 
v32
 
	mMSPRY0END
;

673 
v32
 
	mMSPRCB0END
;

676 
v32
 
	mMSPRCR0END
;

679 
v32
 
	mMSPRYOFF
;

682 
v32
 
	mMSPRCBOFF
;

685 
v32
 
	mMSPRCROFF
;

689 
v32
 
	mMSPRWIDTH
 :12,

690 
	mª£rved1
 :4,

691 
	mMSPRHEIGHT
 :12,

692 
	mª£rved2
 :2,

693 
	mADDR_CH_DIS
 :1,

694 
	mAutoLﬂdE«bÀ
 :1;

695 } 
	mMSPRWIDTH
;

699 
v32
 
	mENVID_M_P
 :1,

700 
	mInF‹m©_M_P
 :2,

701 
	mSEL_DMA_CAM_P
 :1,

702 
	mOrdî422_M_P
 :2,

703 
	mEOF_M_P
 :1;

704 } 
	mMSPRCTRL
;

708 
v32
 
	mLöe_Yoff£t_Co
 :13,

709 
	mª£rved1
 :3,

710 
	mInôül_Yoff£t_Co
 :13;

711 } 
	mCICOSCOSY
;

715 
v32
 
	mLöe_Cboff£t_Co
 :13,

716 
	mª£rved1
 :3,

717 
	mInôül_Cboff£t_Co
 :13;

718 } 
	mCICOSCOSCB
;

722 
v32
 
	mLöe_Croff£t_Co
 :13,

723 
	mª£rved1
 :3,

724 
	mInôül_Croff£t_Co
 :13;

725 } 
	mCICOSCOSCR
;

729 
v32
 
	mLöe_Yoff£t_Pr
 :13,

730 
	mª£rved1
 :3,

731 
	mInôül_Yoff£t_Pr
 :13;

732 } 
	mCIPRSCOSY
;

736 
v32
 
	mLöe_Cboff£t_Pr
 :13,

737 
	mª£rved1
 :3,

738 
	mInôül_Cboff£t_Pr
 :13;

739 } 
	mCIPRSCOSCB
;

743 
v32
 
	mLöe_Croff£t_Pr
 :13,

744 
	mª£rved1
 :3,

745 
	mInôül_Croff£t_Pr
 :13;

746 } 
	mCIPRSCOSCR
;

748 } 
	ts3c_ˇm_t
;

752 
v32
 
	mARB_MODE0
 :1,

753 
	mARB_MODE1
 :1,

754 
	mARB_MODE2
 :1,

755 
	mARB_MODE3
 :1,

756 
	mARB_MODE4
 :1,

757 
	mARB_MODE5
 :1,

758 
	mARB_MODE6
 :1,

759 
	mARB_SEL0
 :2,

760 
	mARB_SEL1
 :2,

761 
	mARB_SEL2
 :2,

762 
	mARB_SEL3
 :2,

763 
	mARB_SEL4
 :2,

764 
	mARB_SEL5
 :2,

765 
	mARB_SEL6
 :2;

766 } 
	ts3c_¥i‹ôy_t
;

770 
v32
 
	mAPLL_LOCK
;

773 
v32
 
	mMPLL_LOCK
;

776 
v32
 
	mEPLL_LOCK
;

780 
v32
 
	mSDIV
 :3,

781 
	mª£rved1
 :5,

782 
	mPDIV
 :6,

783 
	mª£rved2
 :2,

784 
	mMDIV
 :10,

785 
	mª£rved3
 :5,

786 
	mENABLE
 :1;

787 } 
	mAPLL_CON
;

791 
v32
 
	mSDIV
 :3,

792 
	mª£rved1
 :5,

793 
	mPDIV
 :6,

794 
	mª£rved2
 :2,

795 
	mMDIV
 :10,

796 
	mª£rved3
 :5,

797 
	mENABLE
 :1;

798 } 
	mMPLL_CON
;

802 
v32
 
	mSDIV
 :3,

803 
	mª£rved1
 :5,

804 
	mPDIV
 :6,

805 
	mª£rved2
 :2,

806 
	mMDIV
 :8,

807 
	mª£rved3
 :7,

808 
	mENABLE
 :1;

809 } 
	mEPLL_CON0
;

812 
v32
 
	mEPLL_CON1
;

816 
v32
 
	mAPLL_SEL
 :1,

817 
	mMPLL_SEL
 :1,

818 
	mEPLL_SEL
 :1,

819 
	mª£rved1
 :1,

820 
	mMFCCLK_SEL
 :1,

821 
	mUHOST_SEL
 :2,

822 
	mAUDIO0_SEL
 :3,

823 
	mAUDIO1_SEL
 :3,

824 
	mUART_SEL
 :1,

825 
	mSPI0_SEL
 :2,

826 
	mSPI1_SEL
 :2,

827 
	mMMC0_SEL
 :2,

828 
	mMMC1_SEL
 :2,

829 
	mMMC2_SEL
 :2,

830 
	mIRDA_SEL
 :2,

831 
	mLCD_SEL
 :2,

832 
	mSCALER_SEL
 :2,

833 
	mDAC27_SEL
 :1,

834 
	mTV27_SEL
 :1;

835 } 
	mCLK_SRC
;

839 
v32
 
	mARM_RATIO
 :4,

840 
	mMPLL_RATIO
 :1,

841 
	mª£rved1
 :3,

842 
	mHCLK_RATIO
 :1,

843 
	mHCLKX2_RATIO
 :3,

844 
	mPCLK_RATIO
 :4,

845 
	mª£rved2
 :2,

846 
	mSECUR_RATIO
 :2,

847 
	mCAM_RATIO
 :4,

848 
	mJPEG_RATIO
 :4,

849 
	mMFC_RATIO
 :4;

850 } 
	mCLK_DIV0
;

854 
v32
 
	mMMC0_RATIO
 :4,

855 
	mMMC1_RATIO
 :4,

856 
	mMMC2_RATIO
 :4,

857 
	mLCD_RATIO
 :4,

858 
	mSCALER_RATIO
 :4,

859 
	mUHOST_RATIO
 :4,

860 
	mFIMC_RATIO
 :4;

861 } 
	mCLK_DIV1
;

865 
v32
 
	mSPI0_RATIO
 :4,

866 
	mSPI1_RATIO
 :4,

867 
	mAUDIO0_RATIO
 :4,

868 
	mAUDIO1_RATIO
 :4,

869 
	mUART_RATIO
 :4,

870 
	mIRDA_RATIO
 :4,

871 
	mAUDIO2_RATIO
 :4;

872 } 
	mCLK_DIV2
;

876 
v32
 
	mDCLKEN
 :1,

877 
	mDCLKSEL
 :1,

878 
	mª£rved1
 :2,

879 
	mDCLKDIV
 :4,

880 
	mDCLKCMP
 :4,

881 
	mCLKSEL
 :4,

882 
	mDIVVAL
 :4;

883 } 
	mCLK_OUT
;

887 
v32
 
	mHCLK_MFC
 :1,

888 
	mHCLK_INTC
 :1,

889 
	mHCLK_TZIC
 :1,

890 
	mHCLK_LCD
 :1,

891 
	mHCLK_ROT
 :1,

892 
	mHCLK_POST0
 :1,

893 
	mª£rved1
 :1,

894 
	mHCLK_TV
 :1,

895 
	mHCLK_2D
 :1,

896 
	mHCLK_SCALER
 :1,

897 
	mHCLK_CAMIF
 :1,

898 
	mHCLK_JPEG
 :1,

899 
	mHCLK_DMA0
 :1,

900 
	mHCLK_DMA1
 :1,

901 
	mHCLK_IHOST
 :1,

902 
	mHCLK_DHOST
 :1,

903 
	mHCLK_MDP
 :1,

904 
	mHCLK_HSMMC0
 :1,

905 
	mHCLK_HSMMC1
 :1,

906 
	mHCLK_HSMMC2
 :1,

907 
	mHCLK_USB
 :1,

908 
	mHCLK_MEM0
 :1,

909 
	mHCLK_MEM1
 :1,

910 
	mª£rved2
 :1,

911 
	mHCLK_DDR1
 :1,

912 
	mHCLK_IROM
 :1,

913 
	mHCLK_SDMA0
 :1,

914 
	mHCLK_SDMA1
 :1,

915 
	mHCLK_SECUR
 :1,

916 
	mHCLK_UHOST
 :1,

917 
	mª£rved3
 :1,

918 
	mHCLK_3DSE
 :1;

919 } 
	mHCLK_GATE
;

923 
v32
 
	mPCLK_MFC
 :1,

924 
	mPCLK_UART0
 :1,

925 
	mPCLK_UART1
 :1,

926 
	mPCLK_UATR2
 :1,

927 
	mPCLK_UART3
 :1,

928 
	mPCLK_WDT
 :1,

929 
	mPCLK_RTC
 :1,

930 
	mPCLK_PWM
 :1,

931 
	mPCLK_PCM0
 :1,

932 
	mPCLK_PCM1
 :1,

933 
	mPCLK_IRDA
 :1,

934 
	mPCLK_KEYPAD
 :1,

935 
	mPCLK_TSADC
 :1,

936 
	mPCLK_TZPC
 :1,

937 
	mPCLK_AC97
 :1,

938 
	mPCLK_IIS0
 :1,

939 
	mPCLK_IIS1
 :1,

940 
	mPCLK_IIC0
 :1,

941 
	mPCLK_GPIO
 :1,

942 
	mPCLK_HSITX
 :1,

943 
	mPCLK_HSIRX
 :1,

944 
	mPCLK_SPI0
 :1,

945 
	mPCLK_SPI1
 :1,

946 
	mPCLK_CHIPID
 :1,

947 
	mPCLK_SKEY
 :1,

948 
	mª£rved1
 :1,

949 
	mPCLK_IIS2
 :1,

950 
	mPCLK_IIC1
 :1;

951 } 
	mPCLK_GATE
;

955 
v32
 
	mª£rved1
 :1,

956 
	mSCLK_JPEG
 :1,

957 
	mSCLK_CAM
 :1,

958 
	mSCLK_MFC
 :1,

959 
	mª£rved2
 :1,

960 
	mSCLK_UART
 :1,

961 
	mSCLK_IRDA
 :1,

962 
	mSCLK_SECUR
 :1,

963 
	mSCLK_AUDIO0
 :1,

964 
	mSCLK_AUDIO1
 :1,

965 
	mSCLK_POST0
 :1,

966 
	mSCLK_AUDIO2
 :1,

967 
	mSCLK_POST0_27
 :1,

968 
	mSCLK_FIMC
 :1,

969 
	mSCLK_LCD
 :1,

970 
	mSCLK_LCD27
 :1,

971 
	mSCLK_SCALER
 :1,

972 
	mSCLK_SCALER27
 :1,

973 
	mSCLK_TV27
 :1,

974 
	mSCLK_DAC27
 :1,

975 
	mSCLK_SPI0
 :1,

976 
	mSCLK_SPI1
 :1,

977 
	mSCLK_SPI0_48
 :1,

978 
	mSCLK_SPI1_48
 :1,

979 
	mSCLK_MMC0
 :1,

980 
	mSCLK_MMC1
 :1,

981 
	mSCLK_MMC2
 :1,

982 
	mSCLK_MMC0_48
 :1,

983 
	mSCLK_MMC1_48
 :1,

984 
	mSCLK_MMC2_48
 :1,

985 
	mSCLK_UHOST
 :1,

986 
	mª£rved3
 :1;

987 } 
	mSCLK_GATE
;

991 
v32
 
	mª£rved1
 :1,

992 
	mHCLK_SROM
 :1,

993 
	mHCLK_NFCON
 :1,

994 
	mHCLK_O√NAND0
 :1,

995 
	mHCLK_O√NAND1
 :1,

996 
	mHCLK_CFCON
 :1;

997 } 
	mMEMO_CLK_GATE
;

1000 
v32
 
	mª£rved1
[48];

1004 
v32
 
	mFIX_PRIOR_F
 :3,

1005 
	mª£rved1
 :1,

1006 
	mPRIOR_TYPE_F
 :2,

1007 
	mª£rved2
 :1,

1008 
	mDISABLE_HLOCK_F
 :1,

1009 
	mFIX_PRIOR_X
 :3,

1010 
	mª£rved3
 :1,

1011 
	mPRIOR_TYPE_X
 :2,

1012 
	mª£rved4
 :1,

1013 
	mDISABLE_HLOCK_X
 :1,

1014 
	mFIX_PRIOR_P
 :3,

1015 
	mª£rved5
 :1,

1016 
	mPRIOR_TYPE_P
 :2,

1017 
	mª£rved6
 :1,

1018 
	mDISABLE_HLOCK_P
 :1,

1019 
	mFIX_PRIOR_I
 :3,

1020 
	mª£rved7
 :1,

1021 
	mPRIOR_TYPE_I
 :2,

1022 
	mª£rved8
 :1,

1023 
	mDISABLE_HLOCK_I
 :1;

1024 } 
	mAHB_CON0
;

1028 
v32
 
	mFIX_PRIOR_T0
 :3,

1029 
	mª£rved1
 :1,

1030 
	mPRIOR_TYPE_T0
 :2,

1031 
	mª£rved2
 :2,

1032 
	mFIX_PRIOR_T1
 :3,

1033 
	mª£rved3
 :1,

1034 
	mPRIOR_TYPE_T1
 :2,

1035 
	mª£rved4
 :1,

1036 
	mDISABLE_HLOCK_T
 :1,

1037 
	mFIX_PRIOR_M0
 :3,

1038 
	mª£rved5
 :1,

1039 
	mPRIOR_TYPE_M0
 :2,

1040 
	mª£rved6
 :1,

1041 
	mFIX_PRIOR_M1
 :3,

1042 
	mª£rved7
 :1,

1043 
	mPRIOR_TYPE_M1
 :2,

1044 
	mª£rved8
 :1,

1045 
	mDISABLE_HLOCK_M
 :1;

1046 } 
	mAHB_CON1
;

1050 
v32
 
	mFIX_PRIOR_S0
 :3,

1051 
	mª£rved1
 :1,

1052 
	mPRIOR_TYPE_S0
 :2,

1053 
	mª£rved2
 :2,

1054 
	mFIX_PRIOR_S1
 :3,

1055 
	mª£rved3
 :1,

1056 
	mPRIOR_TYPE_S1
 :2,

1057 
	mª£rved4
 :1,

1058 
	mDISABLE_HLOCK_S
 :1,

1059 
	mª£rved5
 :7,

1060 
	mDISABLE_HLOCK_R
 :1,

1061 
	mª£rved6
 :8;

1062 } 
	mAHB_CON2
;

1065 
v32
 
	mCLK_SRC2
;

1069 
v32
 
	mUART0_0
 :1,

1070 
	mUART0_1
 :1,

1071 
	mUART1_0
 :1,

1072 
	mUART1_1
 :1,

1073 
	mUART2_0
 :1,

1074 
	mUART2_1
 :1,

1075 
	mUART3_0
 :1,

1076 
	mUART3_1
 :1,

1077 
	mPCM0_TX
 :1,

1078 
	mPCM0_RX
 :1,

1079 
	mI2S0_TX
 :1,

1080 
	mI2S0_RX
 :1,

1081 
	mSPI0_TX
 :1,

1082 
	mSPI0_RX
 :1,

1083 
	mHSI_TX
 :1,

1084 
	mHSI_RX
 :1,

1085 
	mPCM1_TX
 :1,

1086 
	mPCM1_RX
 :1,

1087 
	mI2S1_TX
 :1,

1088 
	mI2S1_RX
 :1,

1089 
	mSPI1_TX
 :1,

1090 
	mSPI1_RX
 :1,

1091 
	mAC_PCMOUT
 :1,

1092 
	mAC_PCMIN
 :1,

1093 
	mAC_MICIN
 :1,

1094 
	mPWM
 :1,

1095 
	mIRDA
 :1,

1096 
	mEXTERNAL
 :1,

1097 
	mª£rved1
 :2,

1098 
	mSECURITY_RX
 :1,

1099 
	mSECURITY_TX
 :1;

1100 } 
	mSDMA_SEL
;

1103 
v32
 
	mª£rved2
;

1107 
v32
 
	mPass
 :4,

1108 
	mRevisi⁄
 :4,

1109 
	mID
 :24;

1110 } 
	mSYS_ID
;

1114 
v32
 
	mMODEM_TX0_SDMA_SEL
 :1,

1115 
	mMODEM_TX1_SDMA_SEL
 :1,

1116 
	mMODEM_RX0_SDMA_SEL
 :1,

1117 
	mMODEM_RX1_SDMA_SEL
 :1,

1118 
	mª£rved1
 :1,

1119 
	mPMU_IRQ_ENABLE
 :1;

1120 } 
	mSYS_OTHERS
;

1124 
v32
 
	mMP0_CS_CFG
 :6,

1125 
	mª£rved1
 :1,

1126 
	mADDR_EXPAND
 :1,

1127 
	mEBI_FIX_PRI
 :3,

1128 
	mEBI_PRI
 :1,

1129 
	mBUS_WIDTH
 :1,

1130 
	mª£rved2
 :1,

1131 
	mINDEP_CF
 :1;

1132 } 
	mMEM_SYS_CFG
;

1135 
v32
 
	mª£rved3
;

1138 
v32
 
	mQOS_OVERRIDE1
;

1142 
v32
 
	mª£rved1
 :1,

1143 
	mCFG_BUS_WIDTH
, :1,

1144 
	mª£rved2
 :2,

1145 
	mCFG_ADDR_EXPAND
 :1,

1146 
	mCFG_BOOT_LOC
 :2,

1147 
	mª£rved3
 :1,

1148 
	mCFG_NOR_BOOT
 :1,

1149 
	mCFG_MUX_FLASH
 :1,

1150 
	mCFG_INDEP_CF
 :1,

1151 
	mª£rved4
 :1,

1152 
	mCFG_FIX_PRI_TYPE
 :3,

1153 
	mCFG_PRI_TYPE
 :1;

1154 } 
	mMEM_CFG_STAT
;

1157 
v32
 
	mª£rved4
[437];

1161 
v32
 
	mOSC27_EN
 :1,

1162 
	mª£rved1
 :1,

1163 
	mCFG_BATF_WKUP
 :1,

1164 
	mCFG_BATFLT
 :2,

1165 
	mCFG_STANDBYWFI
 :2,

1166 
	mBATF_WAKEUP_MASK
 :1,

1167 
	mKEY_WAKEUP_MASK
 :1,

1168 
	mMSM_WAKEUP_MASK
 :1,

1169 
	mALARM_WAKEUP_MASK
 :1,

1170 
	mTICK_WAKEUP_MASK
 :1,

1171 
	mTS_WAKEUP_MASK
 :1,

1172 
	mHSI_WAKEUP_MASK
 :1,

1173 
	mMMC0_WAKEUP_MASK
 :1,

1174 
	mMMC1_WAKEUP_MASK
 :1,

1175 
	mMMC2_WAKEUP_MASK
 :1,

1176 
	mOSCŸg_DISABLE
 :1;

1177 } 
	mPWR_CFG
;

1180 
v32
 
	mEINT_MASK
;

1183 
v32
 
	mª£rved5
;

1187 
v32
 
	mª£rved1
 :9,

1188 
	mDOMAIN_V
 :1,

1189 
	mDOMAIN_G
 :1,

1190 
	mª£rved2
 :1,

1191 
	mDOMAIN_I
 :1,

1192 
	mDOMAIN_P
 :1,

1193 
	mDOMAIN_F
 :1,

1194 
	mDOMAIN_S
 :1,

1195 
	mDOMAIN_ETM
 :1,

1196 
	mª£rved3
 :13,

1197 
	mIROM
 :1;

1198 } 
	mNORMAL_CFG
;

1202 
v32
 
	mOSC_EN
 :1,

1203 
	mª£rved1
 :7,

1204 
	mTOP_LOGIC
 :1,

1205 
	mª£rved2
 :8,

1206 
	mARM_LOGIC
 :1,

1207 
	mª£rved3
 :2,

1208 
	mTOP_MEMORY
 :1,

1209 
	mª£rved4
 :8,

1210 
	mMEMORY_ARM
 :1;

1211 } 
	mSTOP_CFG
;

1214 
v32
 
	mSLEEP_CFG
;

1218 
v32
 
	mNFCON_CFG
 :1,

1219 
	mIrDA_CFG
 :1,

1220 
	mIROM_CFG
 :1,

1221 
	mHSMMC_CFG
 :1,

1222 
	mOTG_CFG
 :1,

1223 
	mHOSTIF_CFG
 :1,

1224 
	mMODEMIF_CFG
 :1;

1225 } 
	mSTOP_MEM_CFG
;

1228 
v32
 
	mOSC_FREQ
;

1232 
v32
 
	mOSC_CNT_VALUE
 :4,

1233 
	mOSC_CNT_VALUE_1
 :16;

1234 } 
	mOSC_STABLE
;

1238 
v32
 
	mPWR_CNT_VALUE
 :4,

1239 
	mPWR_CNT_VALUE_1
 :16;

1240 } 
	mPWR_STABLE
;

1243 
v32
 
	mª£rved6
;

1247 
v32
 
	mDOMAIN_TOP
 :4,

1248 
	mDOMAIN_V
 :4,

1249 
	mDOMAIN_I
 :4,

1250 
	mDOMAIN_P
 :4,

1251 
	mDOMAIN_F
 :4,

1252 
	mDOMAIN_S
 :4,

1253 
	mDOMAIN_ETM
 :4,

1254 
	mDOMAIN_G
 :4;

1255 } 
	mMTC_STABLE
;

1258 
v32
 
	mª£rved7
;

1262 
v32
 
	mCACHEABLE_AHB_I
 :1,

1263 
	mCACHEABLE_AHB_F
 :1,

1264 
	mCACHEABLE_AHB_P
 :1,

1265 
	mCACHEABLE_AHB_AXI_V
 :1,

1266 
	mCACHEABLE_AHB_X
 :1,

1267 
	mCACHEABLE_AHB_T
 :1,

1268 
	mCACHEABLE_AHB_M
 :1,

1269 
	mCACHEABLE_AHB_S
 :1,

1270 
	mª£rved1
 :3,

1271 
	mCACHEABLE_AHB_CF
 :1,

1272 
	mª£rved2
 :6,

1273 
	mSTOP_EXIT_CKE_L
 :1,

1274 
	mSYNC667
 :1;

1275 } 
	mMISC_CON
;

1278 
v32
 
	mª£rved8
[49];

1282 
v32
 
	mCP15DISABLE
 :1,

1283 
	mª£rved1
 :5,

1284 
	mSYNCMUXSEL
 :1,

1285 
	mSYNCMODE
 :1,

1286 
	mSYNCACK
 :4,

1287 
	mCLEAR_BATF_INT
 :1,

1288 
	mCLEAR_DBGACK
 :1,

1289 
	mª£rved2
 :2,

1290 
	mUSB_SIG_MASK
 :1,

1291 
	mª£rved3
 :6,

1292 
	mSTABLE_COUNTER_TYPE
 :1;

1293 } 
	mOTHERS
;

1297 
v32
 
	mHW_RESET
 :1,

1298 
	mª£rved1
 :1,

1299 
	mWDT_RESET
 :1,

1300 
	mSLEEP_WAKEUP
 :1,

1301 
	mESLEEP_WAKEUP
 :1,

1302 
	mª£rved2
 :1,

1303 
	mDEEP_STOP_WAKEUP
 :1;

1304 } 
	mRST_STAT
;

1308 
v32
 
	mEINT_WAKEUP
 :1,

1309 
	mRTC_ALARM_WAKEUP
 :1,

1310 
	mRTC_TICK_WAKEUP
 :1,

1311 
	mTS_WAKEUP
 :1,

1312 
	mKEY_WAKEUP
 :1,

1313 
	mMSM_WAKEUP
 :1,

1314 
	mBATFLT_WAKEUP
 :1,

1315 
	mª£rved1
 :1,

1316 
	mHSI_WAKEUP
 :1,

1317 
	mMMC0_WAKEUP
 :1,

1318 
	mMMC1_WAKEUP
 :1,

1319 
	mMMC2_WAKEUP
 :1;

1320 } 
	mWAKEUP_STAT
;

1324 
v32
 
	mBLK_TOP
 :1,

1325 
	mBLK_V
 :1,

1326 
	mBLK_I
 :1,

1327 
	mBLK_P
 :1,

1328 
	mBLK_F
 :1,

1329 
	mBLK_S
 :1,

1330 
	mBLK_ETM
 :1,

1331 
	mBLK_G
 :1;

1332 } 
	mBLK_PWR_STAT
;

1335 
v32
 
	mª£rved9
[60];

1338 
v32
 
	mINFORM
[4];

1340 } 
	ts3c_sysc⁄_t
;

	@s3c_camera_driver.c

1 
	#LOG_TAG
 "s3c-ˇmîa"

	)

2 
	~"oßl.h
"

3 
	~"s3c.h
"

13 
	~<asm/¨ch/ªgs-gpio.h
>

14 
	~<asm/¨ch/ªgs-ˇmif.h
>

17 
	~"s3c_ˇmif_fsm.h
"

18 
	~"videodev2_s3c.h
"

20 
	#S3C_V4L2_SUPPORT
 1

	)

23 
	#CODEC_MINOR
 12

	)

24 
	#PREVIEW_MINOR
 13

	)

26 
	#FSM_Drived


	)

27 #unde‡
FSM_Drived


29 #i‡(
deföed
 (
CONFIG_VIDEO_ADV7180
) )

30 
	#TOMTOM_INTERLACE_MODE


	)

31 
	#SW_IPC


	)

39 (*
	tˇmif_h™dÀ
Ë(
	tˇmif_cfg_t
 * 
	tcfg
);

40 
ˇmif_h™dÀ
 
ˇmif_íãr_c
 = 
ˇmif_íãr_c_4fsm
;

41 
ˇmif_h™dÀ
 
ˇmif_°¨t_c
 = 
ˇmif_°¨t_¥evõw
;

42 
¥e_§c_x
, 
¥e_§c_y
, 
¥e_vî
, 
¥e_h‹
;

45 
ˇmif_cis_t
 
msdma_öput
;

47 #ifde‡
TOMTOM_INTERLACE_MODE


48 
ˇmif_cis_t
 
öãæa˚_öput
;

52 
	`ˇmif_°¨t_c_wôh_p
 (
ˇmif_cfg_t
 *
cfg
, camif_cfg_à*
Ÿhî
);

53 
ssize_t
 
	`ˇmif_°›_codec
(
ˇmif_cfg_t
 *
cfg
);

54 
ssize_t
 
	`ˇmif_pc_°›
(
ˇmif_cfg_t
 *
cfg
);

55 
	`ˇmif_codec_msdma_°¨t
(
ˇmif_cfg_t
 * 
cfg
);

56 
ˇmif_cis_t
* 
	`gë_öôülized_cis
();

57 
	`ˇmif_¥evõw_msdma_°¨t
(
ˇmif_cfg_t
 * 
cfg
);

59 
	`ˇmif_s_v4l2
(
ˇmif_cfg_t
 *
cfg
);

62 
ˇmif_cfg_t
 *
	$gë_ˇmif
(
ƒ
)

64 
ˇmif_cfg_t
 *
ªt
 = 
NULL
;

66 
ƒ
) {

67 
CODEC_MINOR
:

68 
ªt
 = &
fimc
[0];

71 
PREVIEW_MINOR
:

72 
ªt
 = &
fimc
[1];

76 
	`__E
("Unknow Minor Number \n");

78  
ªt
;

79 
	}
}

82 
	$ˇmif_°¨t_codec
(
ˇmif_cfg_t
 * 
cfg
)

84 
ªt
 = 0;

86 
	`ˇmif_ª£t
(
CAMIF_RESET
,0);

87 
cfg
->
ˇ±uª_íabÀ
 = 
CAMIF_DMA_ON
;

88 
	`ˇmif_ˇ±uª_°¨t
(
cfg
);

89 
cfg
->
°©us
 = 
CAMIF_STARTED
;

90 
cfg
->
fsm
 = 
CAMIF_1°_INT
;

91 
cfg
->
≥rf
.
‰ames
 = 0;

93 if(
cfg
->
öput_ch™√l
 =
MSDMA_FROM_CODEC
){

94 
	`ˇmif_codec_msdma_°¨t
(
cfg
);

97  
ªt
;

98 
	}
}

101 
ssize_t
 
	$ˇmif_wrôe
(
fûe
 * 
f
, c⁄° *
b
, 
size_t
 
c
,

102 
loff_t
 * 
off£t
)

104 
ˇmif_cfg_t
 *
cfg
;

106 
ªt
 = 0;

107 
cfg
 = 
	`gë_ˇmif
(
	`MINOR
(
f
->
f_díåy
->
d_öode
->
i_rdev
));

109 *
b
) {

111 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

112 
	`ˇmif_°¨t_¥evõw
(
cfg
);

114 
ªt
 = 
	`ˇmif_°¨t_codec
(
cfg
);

115 i‡(
ªt
 < 0)

116 
ªt
 = 1;

121 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

122 
	`ˇmif_°›_¥evõw
(
cfg
);

123 
cfg
->
cis
->
°©us
 |
P_NOT_WORKING
;

125 
cfg
->
cis
->
°©us
 &~
C_WORKING
;

126 
	`ˇmif_°›_codec
(
cfg
);

131 
	`∑nic
("s3c_camera_driver.c: camif_write() - Unexpected Parameter\n");

134  
ªt
;

135 
	}
}

137 
ssize_t
 
	$ˇmif_p_ªad
(
fûe
 * fûe, *
buf
, 
size_t
 
cou¡
,

138 
loff_t
 * 
pos
)

140 
ˇmif_cfg_t
 *
cfg
 = 
NULL
;

141 
size_t
 
íd
;

143 
cfg
 = 
	`gë_ˇmif
(
	`MINOR
(
fûe
->
f_díåy
->
d_öode
->
i_rdev
));

145 #ifde‡
FSM_Drived


146 
cfg
->
°©us
 = 
CAMIF_STARTED
;

148 i‡(
waô_evít_öãºu±ibÀ


149 (
cfg
->
waôq
, cfg->
°©us
 =
CAMIF_INT_HAPPEN
))

150  -
ERESTARTSYS
;

152 
cfg
->
°©us
 = 
CAMIF_STOPPED
;

154 
íd
 = 
	`mö_t
(
size_t
, 
cfg
->
µ_tŸÆsize
 / cfg->
µ_num
, 
cou¡
);

155 i‡(
	`c›y_to_u£r
(
buf
, 
	`ˇmif_g_‰ame
(
cfg
), 
íd
))

156  -
EFAULT
;

157  
íd
;

158 
	}
}

160 
ssize_t


161 
	$ˇmif_c_ªad
(
fûe
 *fûe, *
buf
, 
size_t
 
cou¡
, 
loff_t
 * 
pos
)

163 
ˇmif_cfg_t
 *
cfg
 = 
NULL
;

164 
size_t
 
íd
;

167 
cfg
 = 
	`gë_ˇmif
(
	`MINOR
(
fûe
->
f_díåy
->
d_öode
->
i_rdev
));

170 i‡(
fûe
->
f_Êags
 & 
O_NONBLOCK
) {

171 
	`__E
("Don't Support NON_BLOCK \n");

176 i‡(
waô_evít_öãºu±ibÀ


177 (
cfg
->
waôq
, cfg->
°©us
 =
CAMIF_INT_HAPPEN
))

178  -
ERESTARTSYS
;

180 
cfg
->
°©us
 = 
CAMIF_STOPPED
;

181 
íd
 = 
	`mö_t
(
size_t
, 
cfg
->
µ_tŸÆsize
 / cfg->
µ_num
, 
cou¡
);

182 i‡(
	`c›y_to_u£r
(
buf
, 
	`ˇmif_g_‰ame
(
cfg
), 
íd
))

183  -
EFAULT
;

184  
íd
;

185 
	}
}

187 #ifde‡
TOMTOM_INTERLACE_MODE


188 
úqªtu∫_t
 
	$ˇmif_f_úq
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

191 
ˇmif_cfg_t
 *
cfg
 = (ˇmif_cfg_à*Ë
dev_id
;

193 
	`__I
("camif_f_irq !!! \n");

195 if(
cfg
->
°©us
 =
CAMIF_STOPPED
) {

196 
	`£t_úq_ty≥
(
IRQ_EINT14
, 
IRQT_FALLING
);

197 
cfg
->
check_eví_odd
 = 
FIELD_ODD
;

198 
	`wake_up_öãºu±ibÀ
(&
cfg
->
waôq
);

201 
cfg
->
check_eví_odd
) {

202 
FIELD_ODD
:

203 
	`£t_úq_ty≥
(
IRQ_EINT14
, 
IRQT_RISING
);

204 
cfg
->
check_eví_odd
 = 
FIELD_EVEN
;

206 
FIELD_EVEN
:

207 
	`£t_úq_ty≥
(
IRQ_EINT14
, 
IRQT_FALLING
);

208 
cfg
->
check_eví_odd
 = 
FIELD_ODD
;

216  
IRQ_HANDLED
;

217 
	}
}

220 
úqªtu∫_t
 
	$ˇmif_c_úq
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

222 
ˇmif_cfg_t
 *
cfg
 = (ˇmif_cfg_à*Ë
dev_id
;

227 
	`s3c_gpio_£çö
(
S3C_GPN15
, 1);

229 
	`˛ór_ˇmif_úq
(
úq
);

230 
	`ˇmif_g_fifo_°©us
(
cfg
);

231 
	`ˇmif_g_‰ame_num
(
cfg
);

233 
	`s3c_gpio_£çö
(
S3C_GPN15
, 0);

236 #ifde‡
SW_IPC


237 if(
¥evõw_msdma_°¨t_Êag
 == 1) {

238 
cfg_¥evõw
 = 
	`gë_ˇmif
(
PREVIEW_MINOR
);

239 
cfg
->
now_‰ame_num
) {

244 
ba£
->
MSPRY0SA
 = ba£->
CICOYSA
[0];

245 
ba£
->
MSPRY0END
 = ba£->
CICOYSA
[0] + 
cfg_¥evõw
->
cis
->
sour˚_x
 * cfg_¥evõw->cis->
sour˚_y
 *2;

246 
	`ˇmif_¥evõw_msdma_°¨t
(
cfg_¥evõw
);

249 
ba£
->
MSPRY0SA
 = ba£->
CICOYSA
[2];

250 
ba£
->
MSPRY0END
 = ba£->
CICOYSA
[2] + 
cfg_¥evõw
->
cis
->
sour˚_x
 * cfg_¥evõw->cis->
sour˚_y
 *2;

251 
	`ˇmif_¥evõw_msdma_°¨t
(
cfg_¥evõw
);

254 
	`__I
("xxx\n");

261 i‡(
	`ˇmif_íãr_c
(
cfg
Ë=
INSTANT_SKIP
)

262  
IRQ_HANDLED
;

263 
	`wake_up_öãºu±ibÀ
(&
cfg
->
waôq
);

265  
IRQ_HANDLED
;

266 
	}
}

268 
úqªtu∫_t
 
	$ˇmif_p_úq
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

270 
ˇmif_cfg_t
 *
cfg
 = (ˇmif_cfg_à*Ë
dev_id
;

273 
	`˛ór_ˇmif_úq
(
úq
);

274 
	`ˇmif_g_fifo_°©us
(
cfg
);

275 
	`ˇmif_g_‰ame_num
(
cfg
);

276 
	`wake_up_öãºu±ibÀ
(&
cfg
->
waôq
);

277 #ifde‡
FSM_Drived


278 i‡(
	`ˇmif_íãr_p_4fsm
(
cfg
Ë=
INSTANT_SKIP
)

279  
IRQ_HANDLED
;

280 
	`wake_up_öãºu±ibÀ
(&
cfg
->
waôq
);

282  
IRQ_HANDLED
;

283 
	}
}

285 
	$ˇmif_ªÀa£_úq
(
ˇmif_cfg_t
 * 
cfg
)

288 
	`dißbÀ_úq
(
cfg
->
úq
);

289 
	`‰ì_úq
(
cfg
->
úq
, cfg);

291 #i‡(
	`deföed
(
CONFIG_CPU_S3C6400
Ë|| deföed(
CONFIG_CPU_S3C6410
)Ë&& deföed(
TOMTOM_INTERLACE_MODE
)

292 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

293 
i
 = 
	`__øw_ªadl
(
S3C_EINTMASK
);

294 
i
 |= (1<<14);

295 
	`__øw_wrôñ
(
i
, 
S3C_EINTMASK
);

298 
i
 = 
	`__øw_ªadl
(
S3C_EINTPEND
);

299 if(
i
&(1<<14))

300 
	`__øw_wrôñ
(1<<14, 
S3C_EINTPEND
);

302 
	`dißbÀ_úq
(
IRQ_EINT14
);

303 
	`‰ì_úq
(
IRQ_EINT14
, 
cfg
);

306 
	}
}

308 
	$ˇmif_úq_ªque°
(
ˇmif_cfg_t
 * 
cfg
)

310 
ªt
 = 0;

312 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

313 i‡((
ªt
 = 
	`ªque°_úq
(
cfg
->
úq
, (
úq_h™dÀr_t
)
ˇmif_c_úq
,

314 
SA_INTERRUPT
, 
cfg
->
sh‹äame
,

315 
cfg
))) {

316 
	`__E
("request_irq(CAM_C) failed.\n");

319 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

320 i‡((
ªt
 = 
	`ªque°_úq
(
cfg
->
úq
, (
úq_h™dÀr_t
)
ˇmif_p_úq
,

321 
SA_INTERRUPT
, 
cfg
->
sh‹äame
,

322 
cfg
))) {

323 
	`__E
("request_irq(CAM_P) failed.\n");

327 
	}
}

329 #i‚de‡
TOMTOM_INTERLACE_MODE


330 
	$ˇmif_öô_£ns‹
(
ˇmif_cfg_t
 * 
cfg
)

332 
ˇmif_cis_t
 *
cis
 = 
cfg
->cis;

333 
ˇmif_cis_t
 *
öôülized_cis
;

335 i‡(!
cis
->
£ns‹
) {

336 
öôülized_cis
 = 
	`gë_öôülized_cis
();

337 if(
öôülized_cis
 =
NULL
) {

338 
	`__E
("An I2C Client for CIS sensor isn'tÑegistered\n");

341 
cis
 = 
cfg
->ci†
öôülized_cis
;

342 
cfg
->
öput_ch™√l
 = 0;

343 
cfg
->
cis
->
u£r
++;

346 i‡(!
cis
->
öô_£ns‹
) {

351 
cis
->
£ns‹
->
drivî
->
	`comm™d
(cis->£ns‹, 
SENSOR_INIT
, 
NULL
);

352 
cis
->
öô_£ns‹
 = 1;

354 #i‡
	`deföed
(
CONFIG_VIDEO_SAMSUNG_S5K3BA
)

355 
cis
->
£ns‹
->
drivî
->
	`comm™d
(cis->£ns‹, 
SENSOR_VGA
, 
NULL
);

356 
cis
->
sour˚_x
 = 640;

357 
cis
->
sour˚_y
 = 480;

361 
cis
->
£ns‹
->
drivî
->
	`comm™d
(cis->£ns‹, 
USER_ADD
, 
NULL
);

362 
	}
}

365 
	$ˇmif_öô_£ns‹
(
ˇmif_cfg_t
 * 
cfg
)

367 
ˇmif_cis_t
 *
cis
 = 
cfg
->cis;

368 
ˇmif_cis_t
 *
öôülized_cis
;

369 
tmp
;

371 i‡(!
cis
->
£ns‹
) {

372 
öôülized_cis
 = 
	`gë_öôülized_cis
();

373 if(
öôülized_cis
 =
NULL
) {

374 
	`__E
("An I2C Client for CIS sensor isn'tÑegistered\n");

377 
cis
 = 
cfg
->ci†
öôülized_cis
;

378 
cfg
->
öput_ch™√l
 = 0;

379 
cfg
->
cis
->
u£r
++;

382 i‡(!
cis
->
öô_£ns‹
) {

383 
cis
->
£ns‹
->
drivî
->
	`comm™d
(cis->£ns‹, 
USER_ADD
, 
NULL
);

385 
tmp
 = 0;

386 
cis
->
£ns‹
->
drivî
->
	`comm™d
(cis->£ns‹, 
DECODER_SET_NORM
, &
tmp
);

388 
tmp
 = 0;

389 
cis
->
£ns‹
->
drivî
->
	`comm™d
(cis->£ns‹, 
DECODER_SET_GPIO
, &
tmp
);

390 
cis
->
öô_£ns‹
 = 1;

392 
cis
->
£ns‹
->
drivî
->
	`comm™d
(cis->£ns‹, 
DECODER_GET_STATUS
, &
tmp
);

393 
	`__I
("ADV7180 sètu†0x%x\n", 
tmp
);

395 
	}
}

399 
	$ˇmif_ªÀa£
(
öode
 *öode, 
fûe
 *file)

402 
ˇmif_cfg_t
 *
cfg
 = 
	`gë_ˇmif
(
	`MINOR
(
öode
->
i_rdev
));

404 
	`__I
(" cfg->°©u†0x%0X cfg->cis->°©u†0x%0X \n", 
cfg
->
°©us
,cfg->
cis
->status );

406 
	`__I
("S3C_CICOSTATUS i†0x%x\n",
	`ªadl
(
S3C_CICOSTATUS
));

407 
i
=0;i<79;i++){

408 
	`__I
("off£à0x%x,d©®i†0x%x\n",
i
*4,
	`ªadl
(
S3C_CISRCFMT
+i*4));

413 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

416 
cfg
->
cis
->
°©us
 &~
PWANT2START
;

417 
cfg
->
cis
->
°©us
 |
P_NOT_WORKING
;

418 
	`ˇmif_°›_¥evõw
(
cfg
);

419 
	`muãx_u∆ock
(&
cfg
->
cis
->
lock
);

421 
cfg
->
cis
->
°©us
 &~
CWANT2START
;

422 
	`ˇmif_°›_codec
(
cfg
);

425 
	`ˇmif_dy«mic_˛o£
(
cfg
);

426 
	`ˇmif_ªÀa£_úq
(
cfg
);

427 
	`video_ex˛usive_ªÀa£
(
öode
, 
fûe
);

429 if(
cfg
->
cis
->
£ns‹
 =
NULL
) {

430 
	`__I
("A CIS sensor for MSDMA has been used.. \n");

433 
cfg
->
cis
->
£ns‹
->
drivî
->
	`comm™d
(cfg->cis->£ns‹, 
USER_EXIT
, 
NULL
);

435 
cfg
->
cis
->
u£r
--;

436 
cfg
->
°©us
 = 
CAMIF_STOPPED
;

438 
	}
}

454 
	$ˇmif_2_pic_mode
(
ˇmif_cfg_t
 * 
cfg
)

456 
ˇmif_cis_t
 *
cis
 = 
cfg
->cis;

459 
	`ˇmif_pc_°›
(
cfg
);

462 
¥e_§c_x
 = 
cis
->
sour˚_x
;

463 
¥e_§c_y
 = 
cis
->
sour˚_y
;

464 
¥e_h‹
 = 
cis
->
wö_h‹_of°
;

465 
¥e_vî
 = 
cis
->
wö_vî_of°
;

467 #i‡(
	`deföed
(
CONFIG_VIDEO_SAMSUNG_S5K3AA
Ë|| deföed(
CONFIG_VIDEO_OV9650
))

468 
	`__I
("Resolution ofÅhis camera changed into SXGA(1280x1024) mode. \n");

470 
cis
->
£ns‹
->
drivî
->
	`comm™d
(cis->£ns‹, 
SENSOR_SXGA
, 
NULL
);

471 
cis
->
sour˚_x
 = 1280;

472 
cis
->
sour˚_y
 = 1024;

474 #ñi‡
	`deföed
(
CONFIG_VIDEO_SAMSUNG_S5K3BA
)

475 
	`__I
("Resolution ofÅhis camera changed into UXGA(1600x1200) mode. \n");

477 
cis
->
£ns‹
->
drivî
->
	`comm™d
(cis->£ns‹, 
SENSOR_VGA
, 
NULL
);

478 
cis
->
sour˚_x
 = 640;

479 
cis
->
sour˚_y
 = 480;

483 
cis
->
wö_h‹_of°
 = 0;

484 
cis
->
wö_vî_of°
 = 0;

487 
	`ˇmif_sour˚_fmt
(
cis
);

488 
	}
}

490 
	$ˇmif_2_ˇmcodî_mode
(
ˇmif_cfg_t
 * 
cfg
)

492 
ˇmif_cis_t
 *
cis
 = 
cfg
->cis;

493 
	`ˇmif_pc_°›
(
cfg
);

495 #i‡(
	`deföed
(
CONFIG_VIDEO_SAMSUNG_S5K3AA
Ë|| deföed(
CONFIG_VIDEO_OV9650
))

496 
	`__I
("External Camera changed BACKÅo VGA(640x480) mode(default mode). \n");

497 
cis
->
£ns‹
->
drivî
->
	`comm™d
(cis->£ns‹, 
SENSOR_VGA
, 
NULL
);

499 #ñi‡
	`deföed
(
CONFIG_VIDEO_SAMSUNG_S5K3BA
)

500 
	`__I
("External Camera changed BACKÅo SVGA(800x600) mode(default mode). \n");

501 
cis
->
£ns‹
->
drivî
->
	`comm™d
(cis->£ns‹, 
SENSOR_UXGA
, 
NULL
);

507 
cis
->
sour˚_x
 = 
¥e_§c_x
;

508 
cis
->
sour˚_y
 = 
¥e_§c_y
;

509 
cis
->
wö_h‹_of°
 = 
¥e_h‹
;

510 
cis
->
wö_vî_of°
 = 
¥e_vî
;

513 
	`ˇmif_sour˚_fmt
(
cis
);

514 
	}
}

531 
	$codec_u£s_2µ
(
ˇmif_cfg_t
 * 
cfg
)

533 i‡(!
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

534 
	`__E
("NOTÉxpected uses 1pp.. \n");

538 
cfg
->
µ_num
 = 2;

539 
ˇmif_íãr_c
 = 
ˇmif_íãr_2fsm
;

540 
ˇmif_°¨t_c
 = 
ˇmif_°¨t_2fsm
;

541 
	}
}

544 
	$codec_u£s_4µ
(
ˇmif_cfg_t
 * 
cfg
)

548 i‡(!
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

552 
cfg
->
µ_num
 = 4;

553 
ˇmif_íãr_c
 = 
ˇmif_íãr_c_4fsm
;

554 
ˇmif_°¨t_c
 = 
ˇmif_°¨t_¥evõw
;

555 
	}
}

560 
	$fimc_c⁄fig
(
ˇmif_cfg_t
 *
cfg
, 
ˇmif_∑øm_t
 
∑øm
)

562 
cfg
->
èrgë_x
 = 
∑øm
.
d°_x
;

563 
cfg
->
èrgë_y
 = 
∑øm
.
d°_y
;

565 
∑øm
.
§c_fmt
) {

567 
cfg
->
§c_fmt
 = 
CAMIF_RGB16
;

571 
cfg
->
§c_fmt
 = 
CAMIF_RGB24
;

575 
cfg
->
§c_fmt
 = 
CAMIF_YCBCR420
;

580 
cfg
->
§c_fmt
 = 
CAMIF_YCBCR422
;

584 
∑øm
.
d°_fmt
) {

586 
cfg
->
d°_fmt
 = 
CAMIF_RGB16
;

590 
cfg
->
d°_fmt
 = 
CAMIF_RGB24
;

594 
cfg
->
d°_fmt
 = 
CAMIF_YCBCR420
;

598 
cfg
->
d°_fmt
 = 
CAMIF_YCBCR422
;

602 
	`∑nic
("s3c_camera_driver.c : Invalid BPP on destination \n");

606 
∑øm
.
Êù
) {

608 
cfg
->
Êù
 = 
CAMIF_FLIP_MIRROR
;

611 
cfg
->
Êù
 = 
CAMIF_FLIP_X
;

614 
cfg
->
Êù
 = 
CAMIF_FLIP_Y
;

618 
cfg
->
Êù
 = 
CAMIF_FLIP
;

623 #i‡(
	`deföed
(
CONFIG_CPU_S3C6400
Ë|| deföed(
CONFIG_CPU_S3C6410
))

625 
∑øm
.
öput_ch™√l
){

627 
cfg
->
öput_ch™√l
 = 
MSDMA_FROM_PREVIEW
;

628 
cfg
->
cis
->
sour˚_x
 = 
∑øm
.
§c_x
;

629 
cfg
->
cis
->
sour˚_y
 = 
∑øm
.
§c_y
;

632 
cfg
->
cis
->
u£r
--;

634 
cfg
->
cis
 = &
msdma_öput
;

635 
cfg
->
cis
->
u£r
++;

636 
cfg
->
öput_ch™√l
 = 
MSDMA_FROM_CODEC
;

637 
cfg
->
cis
->
sour˚_x
 = 
∑øm
.
§c_x
;

638 
cfg
->
cis
->
sour˚_y
 = 
∑øm
.
§c_y
;

642 
cfg
->
öput_ch™√l
 = 
CAMERA_INPUT
;

646 
∑øm
.
ouçut_ch™√l
){

648 
cfg
->
ouçut_ch™√l
 = 
CAMIF_OUT_FIFO
;

652 
cfg
->
ouçut_ch™√l
 = 
CAMIF_OUT_PP
;

656 
cfg
->
cis
->
wö_h‹_of°
 = 
∑øm
.
h_off£t
;

657 
cfg
->
cis
->
wö_vî_of°
 = 
∑øm
.
v_off£t
;

658 
cfg
->
cis
->
wö_h‹_of°2
 = 
∑øm
.
h_off£t2
;

659 
cfg
->
cis
->
wö_vî_of°2
 = 
∑øm
.
v_off£t2
;

662 
	}
}

664 
	#ZOOM_AT_A_TIME_IN_PIXELS
 30

	)

665 
	#ZOOM_IN_MAX
 640

	)

667 
	$ˇmif_make_undîzoom_out_check
(
ˇmif_cfg_t
 *
cfg
) {

669 if(
cfg
->
sc
.
zoom_ö_˙t
 > 0) {

670 
cfg
->
sc
.
zoom_ö_˙t
--;

674 
	`__E
("Invalid ZOOM-OUT : This ZOOM-OUT onÖreview scalerálready comesÅoÅhe MINIMUM !!! \n");

677 
	}
}

679 
	$ˇmif_make_ovîzoom_ö_check
(
ˇmif_cfg_t
 *
cfg
) {

681 if(((
cfg
->
sc
.
modifõd_§c_x
-(cfg->
cis
->
wö_h‹_of°
+
ZOOM_AT_A_TIME_IN_PIXELS
+cfg->cis->
wö_h‹_of°2
+ZOOM_AT_A_TIME_IN_PIXELS))/cfg->sc.
¥ehøtio
)>
ZOOM_IN_MAX
) {

682 
	`__E
("Invalid ZOOM-IN : This ZOOM-IN onÖreview scalerálready comesÅoÅhe MAXIMUM !!! \n");

685 
cfg
->
sc
.
zoom_ö_˙t
++;

687 
	}
}

689 
	$ˇmif_cis_c⁄åﬁ
(
ˇmif_cfg_t
 *
cfg
, 
cmd
, 
¨g
)

691 
cfg
->
cis
->
£ns‹
->
drivî
->
	`comm™d
(cfg->cis->£ns‹, 
cmd
, (*)
¨g
);

693 
	}
}

695 
	$ˇmif_ch™ge_zoom
(
ˇmif_cfg_t
 *
cfg
)

697 
ªt
 = 0;

698 
	`ˇmif_dy«mic_˛o£
(
cfg
);

700 
	`ˇmif_°›_¥evõw
(
cfg
);

702 i‡(
	`ˇmif_£tup_fimc_c⁄åﬁÀr
(
cfg
) == -1) {

703 
	`__E
(" camif_change_zoom() - CMD_SENSOR_ZOOMIN(OUT): Error Happens \n");

704 
ªt
 = -1;

707 
	`ˇmif_°¨t_¥evõw
(
cfg
);

708  
ªt
;

709 
	}
}

713 
	$ˇmif_io˘l
(
öode
 *öode, 
fûe
 *fûe, 
cmd
,

714 
¨g
)

716 
ªt
 = 0;

717 
ˇmif_cfg_t
 *
cfg
 = 
fûe
->
¥iv©e_d©a
;

718 
ˇmif_∑øm_t
 
∑r
;

720 
cmd
) {

721 
CMD_CAMERA_INIT
:

722 i‡(
	`c›y_‰om_u£r
(&
∑r
, (
ˇmif_∑øm_t
 *Ë
¨g
, (camif_param_t)))

723  -
EFAULT
;

725 
	`fimc_c⁄fig
(
cfg
, 
∑r
);

726 i‡(
	`ˇmif_£tup_fimc_c⁄åﬁÀr
(
cfg
) == -1) {

727 
	`__E
(" CMD_CAMERA_INIT : Some Errors Happen in camif_setup_fimc_controller() \n");

728 
ªt
 = -1;

730 
	`ˇmif_ch™ge_Êù
(
cfg
);

734 
CMD_SENSOR_ZOOMIN
:

735 if(
	`ˇmif_make_ovîzoom_ö_check
(
cfg
)) {

737 
cfg
->
cis
->
wö_h‹_of°
 +
ZOOM_AT_A_TIME_IN_PIXELS
;

738 
cfg
->
cis
->
wö_vî_of°
 +
ZOOM_AT_A_TIME_IN_PIXELS
;

739 
cfg
->
cis
->
wö_h‹_of°2
 +
ZOOM_AT_A_TIME_IN_PIXELS
;

740 
cfg
->
cis
->
wö_vî_of°2
 +
ZOOM_AT_A_TIME_IN_PIXELS
;

742 i‡(
	`ˇmif_ch™ge_zoom
(
cfg
)) {

743 
	`__E
(" CMD_SENSOR_ZOOM-IN: Error Happens \n");

744 
ªt
 = -1;

748 
ªt
 = -1;

752 
CMD_SENSOR_ZOOMOUT
:

753 if(
	`ˇmif_make_undîzoom_out_check
(
cfg
)) {

755 
cfg
->
cis
->
wö_h‹_of°
 -
ZOOM_AT_A_TIME_IN_PIXELS
;

756 
cfg
->
cis
->
wö_vî_of°
 -
ZOOM_AT_A_TIME_IN_PIXELS
;

757 
cfg
->
cis
->
wö_h‹_of°2
 -
ZOOM_AT_A_TIME_IN_PIXELS
;

758 
cfg
->
cis
->
wö_vî_of°2
 -
ZOOM_AT_A_TIME_IN_PIXELS
;

760 i‡(
	`ˇmif_ch™ge_zoom
(
cfg
)) {

761 
	`__E
(" CMD_SENSOR_ZOOM-OUT: Error Happens \n");

762 
ªt
 = -1;

766 
ªt
 = -1;

770 
CMD_SENSOR_MIRROR
:

771 i‡(
	`c›y_‰om_u£r
(&
∑r
, (
ˇmif_∑øm_t
 *Ë
¨g
, (camif_param_t)))

772  -
EFAULT
;

774 
∑r
.
Êù
) {

776 
cfg
->
Êù
 = 
CAMIF_FLIP_ROTATE_270
;

779 
cfg
->
Êù
 = 
CAMIF_ROTATE_90
;

782 
cfg
->
Êù
 = 
CAMIF_FLIP_MIRROR
;

785 
cfg
->
Êù
 = 
CAMIF_FLIP_Y
;

788 
cfg
->
Êù
 = 
CAMIF_FLIP_X
;

792 
cfg
->
Êù
 = 
CAMIF_FLIP
;

795 
	`ˇmif_ch™ge_Êù
(
cfg
);

798 
CMD_SENSOR_AF
:

799 
CMD_SENSOR_WB
:

800 i‡(
	`c›y_‰om_u£r
(&
∑r
, (
ˇmif_∑øm_t
 *Ë
¨g
, (camif_param_t)))

801  -
EFAULT
;

802 
	`ˇmif_cis_c⁄åﬁ
(
cfg
, 
SENSOR_WB
, 
∑r
.
awb
);

813 
CMD_PICTURE_MODE
:

814 
	`ˇmif_2_pic_mode
(
cfg
);

815 
	`codec_u£s_2µ
(
cfg
);

818 
CMD_CAMCODER_MODE
:

819 
	`ˇmif_2_ˇmcodî_mode
(
cfg
);

820 
	`codec_u£s_4µ
(
cfg
);

823 
CMD_SENSOR_IMAGE_EFFECT
:

824 i‡(
	`c›y_‰om_u£r
(&
∑r
, (
ˇmif_∑øm_t
 *Ë
¨g
, (camif_param_t)))

825  -
EFAULT
;

827 
∑r
.
ef„˘
) {

829 
cfg
->
ef„˘
 = 
CAMIF_SILHOUETTE
;

832 
cfg
->
ef„˘
 = 
CAMIF_EMBOSSING
;

835 
cfg
->
ef„˘
 = 
CAMIF_ART_FREEZE
;

838 
cfg
->
ef„˘
 = 
CAMIF_NEGATIVE
;

841 
cfg
->
ef„˘
 = 
CAMIF_ARBITRARY_CB_CR
;

845 
cfg
->
ef„˘
 = 
CAMIF_BYPASS
;

849 
	`ˇmif_ch™ge_image_ef„˘
(
cfg
);

852 
CMD_POSTPROCESSING_INIT
:

853 i‡(
	`c›y_‰om_u£r
(&
∑r
, (
ˇmif_∑øm_t
 *Ë
¨g
, (camif_param_t)))

854  -
EFAULT
;

856 
cfg
->
cis
->
sour˚_x
 = 
∑r
.
§c_x
;

857 
cfg
->
cis
->
sour˚_y
 = 
∑r
.
§c_y
;

859 
∑r
.
§c_fmt
) {

862 
cfg
->
öput_ch™√l
 = 
CAMIF_YCBCR420
;

866 
cfg
->
öput_ch™√l
 = 
CAMIF_YCBCR422
;

870 
	`fimc_c⁄fig
(
cfg
, 
∑r
);

872 i‡(
	`ˇmif_£tup_fimc_c⁄åﬁÀr
(
cfg
) == -1) {

873 
	`__E
("CMD_POSTPROCESSING_INIT : Error Happens \n");

874 
ªt
 = -1;

876 
	`ˇmif_ch™ge_Êù
(
cfg
);

880 
ªt
 = -
EINVAL
;

884  
ªt
;

885 
	}
}

890 
v4l2_öput
 
	gfimc_öputs
[] = {

892 .
ödex
 = 0,

893 .
	g«me
 = "S3C FIMC camera input",

894 .
	gty≥
 = 
V4L2_INPUT_TYPE_CAMERA
,

895 .
	gaudio£t
 = 1,

896 .
	gtu√r
 = 0,

897 .
	g°d
 = 
V4L2_STD_PAL_BG
|
V4L2_STD_NTSC_M
,

898 .
	g°©us
 = 0,

901 .
	gödex
 = 1,

902 .
	g«me
 = "Memory input (MSDMA)",

903 .
	gty≥
 = 
V4L2_INPUT_TYPE_MSDMA
,

904 .
	gaudio£t
 = 2,

905 .
	gtu√r
 = 0,

906 .
	g°d
 = 
V4L2_STD_PAL_BG
|
V4L2_STD_NTSC_M
,

907 .
	g°©us
 = 0,

910 .
	gödex
 = 2,

911 .
	g«me
 = "Interlace signal input ",

912 .
	gty≥
 = 
V4L2_INPUT_TYPE_INTERLACE
,

913 .
	gaudio£t
 = 2,

914 .
	gtu√r
 = 0,

915 .
	g°d
 = 
V4L2_STD_PAL_BG
|
V4L2_STD_NTSC_M
,

916 .
	g°©us
 = 0,

921 
v4l2_ouçut
 
	gfimc_ouçuts
[] = {

923 .
ödex
 = 0,

924 .
	g«me
 = "Pingpong memory",

925 .
	gty≥
 = 0,

926 .
	gaudio£t
 = 0,

927 .
	gmoduœt‹
 = 0,

928 .
	g°d
 = 0,

931 .
	gödex
 = 1,

932 .
	g«me
 = "LCD FIFO_OUT",

933 .
	gty≥
 = 0,

934 .
	gaudio£t
 = 0,

935 .
	gmoduœt‹
 = 0,

936 .
	g°d
 = 0,

947 c⁄° 
v4l2_fmtdesc
 
	gfimc_codec_f‹m©s
[] = {

949 .
ödex
 = 0,

950 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
,

951 .
	gdes¸ùti⁄
 = "16 bpp RGB,Üe",

952 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_RGB565
,

953 .
	gÊags
 = 
FORMAT_FLAGS_PACKED
,

956 .
	gödex
 = 1,

957 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
,

958 .
	gÊags
 = 
FORMAT_FLAGS_PACKED
,

959 .
	gdes¸ùti⁄
 = "32 bpp RGB,Üe",

960 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_BGR32
,

963 .
	gödex
 = 2,

964 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
,

965 .
	gÊags
 = 
FORMAT_FLAGS_PLANAR
,

966 .
	gdes¸ùti⁄
 = "4:2:2,Ölanar, Y-Cb-Cr",

967 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_YUV422P
,

971 .
	gödex
 = 3,

972 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
,

973 .
	gÊags
 = 
FORMAT_FLAGS_PLANAR
,

974 .
	gdes¸ùti⁄
 = "4:2:0,Ölanar, Y-Cb-Cr",

975 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_YUV420
,

985 c⁄° 
v4l2_fmtdesc
 
	gfimc_¥evõw_f‹m©s
[] = {

987 .
ödex
 = 0,

988 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_OVERLAY
,

989 .
	gdes¸ùti⁄
 = "16 bpp RGB,Üe",

990 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_RGB565
,

991 .
	gÊags
 = 
FORMAT_FLAGS_PACKED
,

994 .
	gödex
 = 1,

995 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_OVERLAY
,

996 .
	gÊags
 = 
FORMAT_FLAGS_PACKED
,

997 .
	gdes¸ùti⁄
 = "32 bpp RGB,Üe",

998 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_BGR32
,

1001 .
	gödex
 = 2,

1002 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_OVERLAY
,

1003 .
	gÊags
 = 
FORMAT_FLAGS_PLANAR
,

1004 .
	gdes¸ùti⁄
 = "4:2:2,Ölanar, Y-Cb-Cr",

1005 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_YUV422P
,

1009 .
	gödex
 = 3,

1010 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_OVERLAY
,

1011 .
	gÊags
 = 
FORMAT_FLAGS_PLANAR
,

1012 .
	gdes¸ùti⁄
 = "4:2:0,Ölanar, Y-Cb-Cr",

1013 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_YUV420
,

1018 
	#NUMBER_OF_PREVIEW_FORMATS
 
	`ARRAY_SIZE
(
fimc_¥evõw_f‹m©s
)

	)

1019 
	#NUMBER_OF_CODEC_FORMATS
 
	`ARRAY_SIZE
(
fimc_codec_f‹m©s
)

	)

1020 
	#NUMBER_OF_INPUTS
 
	`ARRAY_SIZE
(
fimc_öputs
)

	)

1021 
	#NUMBER_OF_OUTPUTS
 
	`ARRAY_SIZE
(
fimc_ouçuts
)

	)

1038 
	$pixfmt2dïth
(
pixfmt
, *
fmçå
)

1040 
fmt
=
CAMIF_YCBCR420
;

1041 
dïth
=12;

1043 
pixfmt
) {

1044 
V4L2_PIX_FMT_RGB565
:

1045 
V4L2_PIX_FMT_RGB565X
:

1046 
fmt
 = 
CAMIF_RGB16
;

1047 
dïth
 = 16;

1049 
V4L2_PIX_FMT_BGR24
:

1050 
V4L2_PIX_FMT_RGB24
:

1051 
fmt
 = 
CAMIF_RGB24
;

1052 
dïth
 = 24;

1054 
V4L2_PIX_FMT_BGR32
:

1055 
V4L2_PIX_FMT_RGB32
:

1056 
fmt
 = 
CAMIF_RGB24
;

1057 
dïth
 = 32;

1059 
V4L2_PIX_FMT_GREY
:

1060 
fmt
 = 
CAMIF_YCBCR420
;

1061 
dïth
 = 8;

1063 
V4L2_PIX_FMT_YUYV
:

1064 
V4L2_PIX_FMT_UYVY
:

1065 
V4L2_PIX_FMT_YUV422P
:

1066 
fmt
 = 
CAMIF_YCBCR422
;

1067 
dïth
 = 16;

1069 
V4L2_PIX_FMT_YUV420
:

1070 
fmt
 = 
CAMIF_YCBCR420
;

1071 
dïth
 = 12;

1076 i‡(
fmçå
Ë*fmçå = 
fmt
;

1077  
dïth
;

1078 
	}
}

1081 
	$ˇmif_s_v4l2_pixfmt
(
ˇmif_cfg_t
 *
cfg
, 
dïth
, 
fourcc
) {

1084 
cfg
->
v2
.
‰mbuf
.
fmt
.
width
 = cfg->
èrgë_x
;

1085 
cfg
->
v2
.
‰mbuf
.
fmt
.
height
 = cfg->
èrgë_y
;

1086 
cfg
->
v2
.
‰mbuf
.
fmt
.
fõld
 = 
V4L2_FIELD_NONE
;

1087 
cfg
->
v2
.
‰mbuf
.
fmt
.
pixñf‹m©
 = 
fourcc
;

1089 
cfg
->
v2
.
‰mbuf
.
fmt
.
byã•îlöe
cfg->v2.‰mbuf.fmt.
width
*
dïth
 >> 3;

1090 
cfg
->
v2
.
‰mbuf
.
fmt
.
sizeimage
 = cfg->v2.‰mbuf.fmt.
height
 * cfg->v2.‰mbuf.fmt.
byã•îlöe
;

1093 
	}
}

1096 
	$ˇmif_s_öput
(
ˇmif_cfg_t
 *
cfg
, 
ödex
)

1098 
cfg
->
v2
.
öput
 = &
fimc_öputs
[
ödex
];

1100 if(
cfg
->
v2
.
öput
->
ty≥
 =
V4L2_INPUT_TYPE_MSDMA
)

1101 if(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
)

1102 
cfg
->
öput_ch™√l
 = 
MSDMA_FROM_PREVIEW
;

1103 if(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
)

1104 
cfg
->
öput_ch™√l
 = 
MSDMA_FROM_CODEC
;

1106  -
EINVAL
;

1108 
cfg
->
öput_ch™√l
 = 
CAMERA_INPUT
;

1111 
	}
}

1114 
	$ˇmif_s_ouçut
(
ˇmif_cfg_t
 *
cfg
, 
ödex
)

1116 
cfg
->
v2
.
ouçut
 = (
	`ty≥of
(cfg->v2.ouçut))&
fimc_ouçuts
[
ödex
];

1118 
	}
}

1120 
	$ˇmif_s_v4l2
(
ˇmif_cfg_t
 *
cfg
)

1122 
dïth
, 
fourcc
;

1123 
deÁu…_num
 = 0;

1125 i‡–!(
cfg
->
v2
.
°©us
 & 
CAMIF_V4L2_INIT
)) {

1128 i‡(
cfg
->
dma_ty≥
 =
CAMIF_CODEC
)

1129 
cfg
->
v2
.
fmtdesc
 = (
	`ty≥of
(cfg->v2.fmtdesc))
fimc_codec_f‹m©s
;

1131 
cfg
->
v2
.
fmtdesc
 = (
	`ty≥of
(cfg->v2.fmtdesc))
fimc_¥evõw_f‹m©s
;

1133 
fourcc
 = 
cfg
->
v2
.
fmtdesc
[
deÁu…_num
].
pixñf‹m©
;

1134 
dïth
 = 
	`pixfmt2dïth
(
fourcc
, 
NULL
);

1136 
	`ˇmif_s_v4l2_pixfmt
(
cfg
, 
dïth
, 
fourcc
);

1138 
	`ˇmif_s_öput
(
cfg
, 
deÁu…_num
);

1139 
	`ˇmif_s_ouçut
(
cfg
, 
deÁu…_num
);

1142 
cfg
->
v2
.
°©us
 |
CAMIF_V4L2_INIT
;

1146 
	}
}

1149 
	$ˇmif_g_fmt
(
ˇmif_cfg_t
 *
cfg
, 
v4l2_f‹m©
 *
f
)

1151 
size
 = (
v4l2_pix_f‹m©
);

1153 
f
->
ty≥
) {

1154 
V4L2_BUF_TYPE_VIDEO_CAPTURE
:

1155 
	`mem£t
(&
f
->
fmt
.
pix
, 0, 
size
);

1156 
	`mem˝y
(&
f
->
fmt
.
pix
, &
cfg
->
v2
.
‰mbuf
.fmt, 
size
);

1159 
V4L2_BUF_TYPE_VIDEO_OVERLAY
:

1160 
	`mem£t
(&
f
->
fmt
.
pix
, 0, 
size
);

1161 
	`mem˝y
(&
f
->
fmt
.
pix
, &
cfg
->
v2
.
‰mbuf
.fmt, 
size
);

1165  -
EINVAL
;

1167 
	}
}

1171 
	$ˇmif_c⁄vît_öto_ˇmif_cfg_t
(
ˇmif_cfg_t
 *
cfg
, 
f
)

1173 
pixfmt
;

1174 
cfg
->
èrgë_x
 = cfg->
v2
.
‰mbuf
.
fmt
.
width
;

1175 
cfg
->
èrgë_y
 = cfg->
v2
.
‰mbuf
.
fmt
.
height
;

1176 
	`pixfmt2dïth
(
cfg
->
v2
.
‰mbuf
.
fmt
.
pixñf‹m©
, &
pixfmt
);

1177 
cfg
->
d°_fmt
 = 
pixfmt
;

1181 
	}
}

1184 
	$ˇmif_s_fmt
(
ˇmif_cfg_t
 *
cfg
, 
v4l2_f‹m©
 *
f
)

1186 
f
->
ty≥
) {

1187 
V4L2_BUF_TYPE_VIDEO_CAPTURE
:

1191 
cfg
->
v2
.
‰mbuf
.
fmt
 = 
f
->fmt.
pix
;

1192 
cfg
->
v2
.
°©us
 |
CAMIF_v4L2_DIRTY
;

1194 
cfg
->
v2
.
°©us
 &~
CAMIF_v4L2_DIRTY
;

1197 
	`ˇmif_c⁄vît_öto_ˇmif_cfg_t
(
cfg
, 1);

1201 
V4L2_BUF_TYPE_VIDEO_OVERLAY
:

1205 
cfg
->
v2
.
‰mbuf
.
fmt
 = 
f
->fmt.
pix
;

1206 
cfg
->
v2
.
°©us
 |
CAMIF_v4L2_DIRTY
;

1208 
cfg
->
v2
.
°©us
 &~
CAMIF_v4L2_DIRTY
;

1211 
	`ˇmif_c⁄vît_öto_ˇmif_cfg_t
(
cfg
, 1);

1216  -
EINVAL
;

1219 
	}
}

1224 
	$ˇmif_£t_v4l2_c⁄åﬁ
(
ˇmif_cfg_t
 *
cfg
, 
v4l2_c⁄åﬁ
 *
˘æ
)

1226 
˘æ
->
id
) {

1227 
V4L2_CID_ORIGINAL
:

1228 
V4L2_CID_ARBITRARY
:

1229 
V4L2_CID_NEGATIVE
:

1230 
V4L2_CID_EMBOSSING
:

1231 
V4L2_CID_ART_FREEZE
:

1232 
V4L2_CID_SILHOUETTE
:

1233 
cfg
->
ef„˘
 = 
˘æ
->
vÆue
;

1234 
	`ˇmif_ch™ge_image_ef„˘
(
cfg
);

1237 
V4L2_CID_HFLIP
:

1238 
cfg
->
Êù
 = 
CAMIF_FLIP_X
;

1239 
	`ˇmif_ch™ge_Êù
(
cfg
);

1242 
V4L2_CID_VFLIP
:

1243 
cfg
->
Êù
 = 
CAMIF_FLIP_Y
;

1244 
	`ˇmif_ch™ge_Êù
(
cfg
);

1247 
V4L2_CID_ROTATE_90
:

1248 
cfg
->
Êù
 = 
CAMIF_ROTATE_90
;

1249 
	`ˇmif_ch™ge_Êù
(
cfg
);

1252 
V4L2_CID_ROTATE_180
:

1253 
cfg
->
Êù
 = 
CAMIF_FLIP_MIRROR
;

1254 
	`ˇmif_ch™ge_Êù
(
cfg
);

1257 
V4L2_CID_ROTATE_270
:

1258 
cfg
->
Êù
 = 
CAMIF_FLIP_ROTATE_270
;

1259 
	`ˇmif_ch™ge_Êù
(
cfg
);

1262 
V4L2_CID_ROTATE_BYPASS
:

1263 
cfg
->
Êù
 = 
CAMIF_FLIP
;

1264 
	`ˇmif_ch™ge_Êù
(
cfg
);

1267 
V4L2_CID_ZOOMIN
:

1268 if(
	`ˇmif_make_ovîzoom_ö_check
(
cfg
)) {

1269 
cfg
->
cis
->
wö_h‹_of°
 +
ZOOM_AT_A_TIME_IN_PIXELS
;

1270 
cfg
->
cis
->
wö_vî_of°
 +
ZOOM_AT_A_TIME_IN_PIXELS
;

1271 
cfg
->
cis
->
wö_h‹_of°2
 +
ZOOM_AT_A_TIME_IN_PIXELS
;

1272 
cfg
->
cis
->
wö_vî_of°2
 +
ZOOM_AT_A_TIME_IN_PIXELS
;

1273 
	`ˇmif_ch™ge_zoom
(
cfg
);

1277 
V4L2_CID_ZOOMOUT
:

1278 if(
	`ˇmif_make_undîzoom_out_check
(
cfg
)) {

1279 
cfg
->
cis
->
wö_h‹_of°
 -
ZOOM_AT_A_TIME_IN_PIXELS
;

1280 
cfg
->
cis
->
wö_vî_of°
 -
ZOOM_AT_A_TIME_IN_PIXELS
;

1281 
cfg
->
cis
->
wö_h‹_of°2
 -
ZOOM_AT_A_TIME_IN_PIXELS
;

1282 
cfg
->
cis
->
wö_vî_of°2
 -
ZOOM_AT_A_TIME_IN_PIXELS
;

1283 
	`ˇmif_ch™ge_zoom
(
cfg
);

1287 
V4L2_CID_CONTRAST
:

1288 
V4L2_CID_AUTO_WHITE_BALANCE
:

1289 
	`ˇmif_cis_c⁄åﬁ
(
cfg
, 
SENSOR_WB
, 
˘æ
->
vÆue
);

1293 
	`__E
("ˇmif_£t_v4l2_c⁄åﬁ.¯: InvÆid c⁄åﬁ id = %d \n", 
˘æ
->
id
);

1298 
	}
}

1301 
	$ˇmif_do_io˘l
(
öode
 *öode, 
fûe
 *fûe,
cmd
, * 
¨g
)

1303 
ˇmif_cfg_t
 *
cfg
 = 
fûe
->
¥iv©e_d©a
;

1304 
ªt
 = 0;

1306 
cmd
) {

1307 
VIDIOC_QUERYCAP
:

1309 
v4l2_ˇ∑bûôy
 *
ˇp
 = 
¨g
;

1310 
	`__I
("C&P: VIDIOC_QUERYCAP \n");

1312 
	`°r˝y
(
ˇp
->
drivî
, "S3C FIMC Camera driver");

1313 
	`°æ˝y
(
ˇp
->
ˇrd
, 
cfg
->
v
->
«me
, (cap->card));

1314 
	`•rötf
(
ˇp
->
bus_öfo
, "FIMC AHB Bus");

1315 
ˇp
->
vîsi⁄
 = 0;

1316 
ˇp
->
ˇ∑bûôõs
 = 
cfg
->
v
->
ty≥2
;

1321 
VIDIOC_G_FBUF
:

1323 
v4l2_‰amebuf„r
 *
fb
 = 
¨g
;

1324 
	`__I
("P: VIDIOC_G_FBUF \n");

1326 *
fb
 = 
cfg
->
v2
.
‰mbuf
;

1328 
fb
->
ba£
 = 
cfg
->
v2
.
‰mbuf
.base;

1329 
fb
->
ˇ∑bûôy
 = 
V4L2_FBUF_CAP_LIST_CLIPPING
;

1331 
fb
->
fmt
.
pixñf‹m©
 = 
cfg
->
v2
.
‰mbuf
.fmt.pixelformat;

1332 
fb
->
fmt
.
width
 = 
cfg
->
v2
.
‰mbuf
.fmt.width;

1333 
fb
->
fmt
.
height
 = 
cfg
->
v2
.
‰mbuf
.fmt.height;

1334 
fb
->
fmt
.
byã•îlöe
 = 
cfg
->
v2
.
‰mbuf
.fmt.bytesperline;

1339 
VIDIOC_S_FBUF
:

1341 
i
, 
dïth
;

1342 
v4l2_‰amebuf„r
 *
fb
 = 
¨g
;

1343 
__u32
 
¥ötf‹m©
 = 
	`__˝u_to_À32
(
fb
->
fmt
.
pixñf‹m©
);

1345 
	`__I
("P: VIDIOC_S_FBUF \n");

1347 
	`__I
(

1349 
fb
->
ba£
, fb->
fmt
.
width
, fb->fmt.
height
,

1350 
fb
->
fmt
.
byã•îlöe
, fb->fmt.
pixñf‹m©
,

1351 (*Ë&
¥ötf‹m©
);

1353 
i
 = 0; i < 
NUMBER_OF_PREVIEW_FORMATS
; i++)

1354 i‡(
fimc_¥evõw_f‹m©s
[
i
].
pixñf‹m©
 =
fb
->
fmt
.pixelformat) {

1359 i‡(
i
 =
NUMBER_OF_PREVIEW_FORMATS
) {

1360 
	`__I
(

1362 
fb
->
fmt
.
pixñf‹m©
,

1363 (*Ë&
¥ötf‹m©
);

1364  -
EINVAL
;

1367 
cfg
->
v2
.
‰mbuf
.
ba£
 = 
fb
->base;

1368 
cfg
->
v2
.
‰mbuf
.
Êags
 = 
fb
->flags;

1369 
cfg
->
v2
.
‰mbuf
.
ˇ∑bûôy
 = 
fb
->capability;

1371 
cfg
->
èrgë_x
 = 
fb
->
fmt
.
width
;

1372 
cfg
->
èrgë_y
 = 
fb
->
fmt
.
height
;

1374 
dïth
 = 
	`pixfmt2dïth
(
fb
->
fmt
.
pixñf‹m©
, (*)&(
cfg
->
d°_fmt
));

1375 
	`ˇmif_s_v4l2_pixfmt
(
cfg
, 
dïth
, 
fb
->
fmt
.
pixñf‹m©
);

1378 #i‚de‡
TOMTOM_INTERLACE_MODE


1379 
ªt
 = 
	`ˇmif_£tup_fimc_c⁄åﬁÀr
(
cfg
);

1383  
ªt
;

1386 
VIDIOC_G_FMT
:

1388 
v4l2_f‹m©
 *
f
 = 
¨g
;

1389 
	`__I
("C: VIDIOC_G_FMT \n");

1390 
ªt
 = 
	`ˇmif_g_fmt
(
cfg
, 
f
);

1391  
ªt
;

1394 
VIDIOC_S_FMT
:

1396 
v4l2_f‹m©
 *
f
 = 
¨g
;

1398 
	`__I
("C: VIDIOC_S_FMT \n");

1400 
ªt
 = 
	`ˇmif_s_fmt
(
cfg
, 
f
);

1401 if(
ªt
 != 0) {

1402 
	`__E
("camif_s_fmt() failed !\n");

1403  -
EINVAL
;

1405 
ªt
 = 
	`ˇmif_£tup_fimc_c⁄åﬁÀr
(
cfg
);

1406  
ªt
;

1409 
VIDIOC_ENUM_FMT
:

1411 
v4l2_fmtdesc
 *
f
 = 
¨g
;

1413 
ödex
 = 
f
->index;

1415 
	`__I
("C: VIDIOC_ENUM_FMT : index = %d\n", 
ödex
);

1417 i‡(
ödex
 >
NUMBER_OF_CODEC_FORMATS
)

1418  -
EINVAL
;

1420 
f
->
ty≥
) {

1421 
V4L2_BUF_TYPE_VIDEO_CAPTURE
:

1423 
V4L2_BUF_TYPE_VIDEO_OVERLAY
:

1425  -
EINVAL
;

1427 
	`mem£t
(
f
, 0, (*f));

1428 
	`mem˝y
(
f
, 
cfg
->
v2
.
fmtdesc
+
ödex
, (*f));

1432 
VIDIOC_OVERLAY
:

1434 
⁄
 = *(*)
¨g
;

1436 
	`__I
("P: VIDIOC_OVERLAY on:%d\n", 
⁄
);

1437 i‡(
⁄
 != 0) {

1438 
ªt
 = 
	`ˇmif_°¨t_¥evõw
(
cfg
);

1440 
ªt
 = 
	`ˇmif_°›_¥evõw
(
cfg
);

1442  
ªt
;

1445 
VIDIOC_S_CTRL
:

1447 
v4l2_c⁄åﬁ
 *
˘æ
 = 
¨g
;

1448 
	`__I
("P: VIDIOC_S_CTRL \n");

1449 
ªt
 = 
	`ˇmif_£t_v4l2_c⁄åﬁ
(
cfg
, 
˘æ
);

1450  
ªt
;

1453 
VIDIOC_STREAMON
:

1456 
	`__I
("C: VIDIOC_STREAMON \n");

1457 #ifde‡
TOMTOM_INTERLACE_MODE


1460 
	`s3c_gpio_cfgpö
(
S3C_GPN15
, 
S3C_GPN15_OUTP
);

1461 
	`s3c_gpio_£çö
(
S3C_GPN15
, 0);

1463 
vÆ
 = 
	`ªadl
(
S3C_EINTFLTCON1
);

1464 
vÆ
 |= (0x1<<31);

1465 
vÆ
 |= (0x1<<30);

1466 
vÆ
 |= (0x1f<<24);

1467 
	`wrôñ
(
vÆ
, 
S3C_EINTFLTCON1
);

1468 
	`£t_úq_ty≥
(
IRQ_EINT14
, 
IRQT_RISING
);

1469 
ªt
 = 
	`ªque°_úq
(
IRQ_EINT14
, (
úq_h™dÀr_t
)
ˇmif_f_úq
,

1470 
SA_INTERRUPT
, "s3c_field",

1471 
cfg
);

1475 
ªt
 = 
	`ˇmif_°¨t_codec
(
cfg
);

1478 
	`öãºu±ibÀ_¶ìp_⁄
(&
cfg
->
waôq
);

1479 
ªt
 = 
	`ˇmif_°¨t_codec
(
cfg
);

1481 
ªt
 = 
	`ˇmif_°¨t_codec
(
cfg
);

1483  
ªt
;

1486 
VIDIOC_STREAMOFF
:

1488 
	`__I
("C: VIDIOC_STREAMOFF \n");

1489 
cfg
->
cis
->
°©us
 &~
C_WORKING
;

1490 
ªt
 = 
	`ˇmif_°›_codec
(
cfg
);

1491  
ªt
;

1494 
VIDIOC_G_INPUT
:

1496 
u32
 *
i
 = 
¨g
;

1497 
	`__I
("C&P: VIDIOC_G_INPUT \n");

1498 *
i
 = 
cfg
->
v2
.
öput
->
ödex
;

1502 
VIDIOC_S_INPUT
:

1504 
ödex
 = *((*)
¨g
);

1505 
	`__I
("C&P: VIDIOC_S_INPUT \n");

1510 i‡(
ödex
 >
NUMBER_OF_INPUTS
) {

1511  -
EINVAL
;

1514 
	`ˇmif_s_öput
(
cfg
, 
ödex
);

1519 
VIDIOC_G_OUTPUT
:

1521 
u32
 *
i
 = 
¨g
;

1522 
	`__I
("VIDIOC_G_OUTPUT \n");

1523 *
i
 = 
cfg
->
v2
.
ouçut
->
ödex
;

1527 
VIDIOC_S_OUTPUT
:

1529 
ödex
 = *((*)
¨g
);

1530 
	`__I
("C&P: VIDIOC_S_OUTPUT \n");

1537 i‡(
ödex
 >
NUMBER_OF_OUTPUTS
) {

1538  -
EINVAL
;

1541 
	`ˇmif_s_ouçut
(
cfg
, 
ödex
);

1546 
VIDIOC_ENUMINPUT
:

1548 
v4l2_öput
 *
i
 = 
¨g
;

1549 
	`__I
("C&P: VIDIOC_ENUMINPUT : index = %d\n", 
i
->
ödex
);

1551 i‡((
i
->
ödex
Ë>
NUMBER_OF_INPUTS
) {

1552  -
EINVAL
;

1554 
	`mem˝y
(
i
, &
fimc_öputs
[i->
ödex
], (
v4l2_öput
));

1558 
VIDIOC_ENUMOUTPUT
:

1560 
v4l2_ouçut
 *
i
 = 
¨g
;

1561 
	`__I
("C&P: VIDIOC_ENUMOUTPUT : index = %d\n", 
i
->
ödex
);

1563 i‡((
i
->
ödex
Ë>
NUMBER_OF_OUTPUTS
) {

1564  -
EINVAL
;

1566 
	`mem˝y
(
i
, &
fimc_ouçuts
[i->
ödex
], (
v4l2_ouçut
));

1570 
VIDIOC_S_MSDMA
:

1572 
v4l2_msdma_f‹m©
 *
f
 = 
¨g
;

1573 
	`__I
("C/P: VIDIOC_S_MSDMA \n");

1575 
f
->
öput_∑th
) {

1576 
V4L2_MSDMA_PREVIEW
:

1577 
cfg
->
cis
->
u£r
--;

1579 
cfg
->
cis
 = &
msdma_öput
;

1580 
cfg
->
cis
->
u£r
++;

1581 
cfg
->
öput_ch™√l
 = 
MSDMA_FROM_PREVIEW
;

1584 
V4L2_MSDMA_CODEC
:

1585 
cfg
->
cis
->
u£r
--;

1587 
cfg
->
cis
 = &
msdma_öput
;

1588 
cfg
->
cis
->
u£r
++;

1589 
cfg
->
öput_ch™√l
 = 
MSDMA_FROM_CODEC
;

1593 
cfg
->
öput_ch™√l
 = 
CAMERA_INPUT
;

1597 
cfg
->
cis
->
sour˚_x
 = 
f
->
width
;

1598 
cfg
->
cis
->
sour˚_y
 = 
f
->
height
;

1599 
	`pixfmt2dïth
(
f
->
pixñf‹m©
, (*)&
cfg
->
§c_fmt
);

1601 
cfg
->
cis
->
wö_h‹_of°
 = 0;

1602 
cfg
->
cis
->
wö_vî_of°
 = 0;

1603 
cfg
->
cis
->
wö_h‹_of°2
 = 0;

1604 
cfg
->
cis
->
wö_vî_of°2
 = 0;

1606 
ªt
 = 
	`ˇmif_£tup_fimc_c⁄åﬁÀr
(
cfg
);

1607 
f
->
öput_∑th
) {

1608 
V4L2_MSDMA_PREVIEW
:

1609 
ªt
 = 
	`ˇmif_°¨t_¥evõw
(
cfg
);

1612 
V4L2_MSDMA_CODEC
:

1613 
ªt
 = 
	`ˇmif_°¨t_codec
(
cfg
);

1620  
ªt
;

1623 
VIDIOC_MSDMA_START
:

1626 
	`__I
("C/P: VIDIOC_MSDMA_START \n");

1627 if(
cfg
->
öput_ch™√l
 =
MSDMA_FROM_PREVIEW
){

1628 
cfg
->
msdma_°©us
 = 1;

1629 #i‚de‡
SW_IPC


1630 
	`ˇmif_¥evõw_msdma_°¨t
(
cfg
);

1632 
¥evõw_msdma_°¨t_Êag
 = 1;

1636 
	`öãºu±ibÀ_¶ìp_⁄
(&
cfg
->
waôq
);

1638  
ªt
;

1641 
VIDIOC_MSDMA_STOP
:

1643 
v4l2_msdma_f‹m©
 *
f
 = 
¨g
;

1644 
	`__I
("C/P: VIDIOC_MSDMA_STOP \n");

1645 
cfg
->
cis
->
°©us
 &~
C_WORKING
;

1646 
cfg
->
msdma_°©us
 = 0;

1647 #ifde‡
SW_IPC


1648 
	`öãºu±ibÀ_¶ìp_⁄
(&
cfg
->
waôq
);

1649 
¥evõw_msdma_°¨t_Êag
 = 0;

1651 
f
->
öput_∑th
) {

1652 
V4L2_MSDMA_PREVIEW
:

1653 
ªt
 = 
	`ˇmif_°›_¥evõw
(
cfg
);

1656 
V4L2_MSDMA_CODEC
:

1657 
ªt
 = 
	`ˇmif_°›_codec
(
cfg
);

1663  
ªt
;

1666 
VIDIOC_S_CAMERA_START
:

1671 
VIDIOC_S_CAMERA_STOP
:

1675 
VIDIOC_S_INTERLACE_MODE
:

1678 
	`__I
("C/P: VIDIOC_S_INTERLACE_MODE \n");

1680 #ifde‡
TOMTOM_INTERLACE_MODE


1681 if(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

1682 
cfg
->
cis
->
u£r
--;

1683 
cfg
->
cis
 = &
öãæa˚_öput
;

1684 
cfg
->
cis
->
u£r
++;

1686 
cfg
->
cis
->
sour˚_x
 = 
f
->
width
;

1687 
cfg
->
cis
->
sour˚_y
 = 
f
->
height
;

1688 
cfg
->
cis
->
wö_h‹_of°
 = 0;

1689 
cfg
->
cis
->
wö_vî_of°
 = 0;

1690 
cfg
->
cis
->
wö_h‹_of°2
 = 0;

1691 
cfg
->
cis
->
wö_vî_of°2
 = 0;

1693 
	`ˇmif_sour˚_fmt
(
cfg
->
cis
);

1694 
	`ˇmif_wö_off£t
(
cfg
->
cis
);

1698 
cfg
->
öãæa˚_ˇ±uª
 = 1;

1699 
cfg
->
check_eví_odd
 = 0;

1706 
	`__I
("C&P: v4l_compat_translate_ioctl() called \n");

1708 
	`v4l_com∑t_å™¶©e_io˘l
(
öode
, 
fûe
, 
cmd
, 
¨g
, 
ˇmif_do_io˘l
);

1713  
ªt
;

1714 
	}
}

1716 
	$ˇmif_io˘l_v4l2
(
öode
 *öode, 
fûe
 *fûe, 
cmd
,

1717 
¨g
)

1719  
	`video_u£rc›y
(
öode
, 
fûe
, 
cmd
, 
¨g
, 
ˇmif_do_io˘l
);

1720 
	}
}

1726 
	$ˇmif_p_mm≠
(
fûe
* 
fûp
, 
vm_¨ó_°ru˘
 *
vma
) {

1728 
ˇmif_cfg_t
 *
cfg
 = 
fûp
->
¥iv©e_d©a
;

1730 
∑geFømeNo
, 
size
;

1732 
size
 = 
vma
->
vm_íd
 - vma->
vm_°¨t
;

1735 
∑geFømeNo
 = 
	`__phys_to_p‚
(
cfg
->
µ_phys_buf
);

1737 if(
size
 > 
RGB_MEM
) {

1738 
	`__E
("The size of RGB_MEM mapping isÅoo big!\n");

1739  -
EINVAL
;

1742 if((
vma
->
vm_Êags
 & 
VM_WRITE
Ë&& !(vma->vm_Êag†& 
VM_SHARED
)) {

1743 
	`__E
("Writable RGB_MEM mapping must be shared !\n");

1744  -
EINVAL
;

1747 if(
	`ªm≠_p‚_ønge
(
vma
, vma->
vm_°¨t
, 
∑geFømeNo
, 
size
, vma->
vm_∑ge_¥Ÿ
))

1748  -
EINVAL
;

1751 
	}
}

1754 
	$ˇmif_c_mm≠
(
fûe
* 
fûp
, 
vm_¨ó_°ru˘
 *
vma
)

1756 
ˇmif_cfg_t
 *
cfg
 = 
fûp
->
¥iv©e_d©a
;

1758 
∑geFømeNo
, 
size
;

1760 
size
 = 
vma
->
vm_íd
 - vma->
vm_°¨t
;

1763 
∑geFømeNo
 = 
	`__phys_to_p‚
(
cfg
->
µ_phys_buf
);

1765 if(
size
 > 
YUV_MEM
) {

1766 
	`__E
("The size of YUV_MEM mapping isÅoo big!\n");

1767  -
EINVAL
;

1770 if((
vma
->
vm_Êags
 & 
VM_WRITE
Ë&& !(vma->vm_Êag†& 
VM_SHARED
)) {

1771 
	`__E
("Writable YUV_MEM mapping must be shared !\n");

1772  -
EINVAL
;

1775 if(
	`ªm≠_p‚_ønge
(
vma
, vma->
vm_°¨t
, 
∑geFømeNo
, 
size
, vma->
vm_∑ge_¥Ÿ
))

1776  -
EINVAL
;

1779 
	}
}

1781 
	$ˇmif_›í
(
öode
 *öode, 
fûe
 *file)

1783 
îr
;

1784 
ˇmif_cfg_t
 *
cfg
 = 
	`gë_ˇmif
(
	`MINOR
(
öode
->
i_rdev
));

1786 if(!
cfg
->
cis
) {

1787 
	`__I
("An object forá CIS is missing \n");

1788 
	`__I
("using msdma_inputásá default CIS data structure !!!\n");

1789 
cfg
->
cis
 = &
msdma_öput
;

1790 
	`muãx_öô
(&
cfg
->
cis
->
lock
);

1791 
cfg
->
cis
->
°©us
 |
P_NOT_WORKING
;

1794 if(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

1795 if(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

1796 
cfg
->
cis
->
°©us
 &~
P_NOT_WORKING
;

1798 
	`muãx_u∆ock
(&
cfg
->
cis
->
lock
);

1801 
îr
 = 
	`video_ex˛usive_›í
(
öode
, 
fûe
);

1802 
cfg
->
cis
->
u£r
++;

1803 
cfg
->
°©us
 = 
CAMIF_STOPPED
;

1805 if(
îr
 < 0)

1806  
îr
;

1808 if(
fûe
->
f_Êags
 & 
O_NONCAP
) {

1809 
	`__E
("Don't Support Non-capturing open !!\n");

1812 
fûe
->
¥iv©e_d©a
 = 
cfg
;

1814 
	`ˇmif_úq_ªque°
(
cfg
);

1815 
	`ˇmif_öô_£ns‹
(
cfg
);

1818 
	`ˇmif_s_v4l2
(
cfg
);

1821 
	}
}

1823 
fûe_›î©i⁄s
 
	gˇmif_c_f›s
 = {

1824 .
ow√r
 = 
THIS_MODULE
,

1825 .
	g›í
 = 
ˇmif_›í
,

1826 .
	gªÀa£
 = 
ˇmif_ªÀa£
,

1827 .
	gio˘l
 = 
ˇmif_io˘l_v4l2
,

1828 .
	gªad
 = 
ˇmif_c_ªad
,

1829 .
	gwrôe
 = 
ˇmif_wrôe
,

1830 .
	gmm≠
 = 
ˇmif_c_mm≠
,

1833 
fûe_›î©i⁄s
 
	gˇmif_p_f›s
 = {

1834 .
ow√r
 = 
THIS_MODULE
,

1835 .
	g›í
 = 
ˇmif_›í
,

1836 .
	gªÀa£
 = 
ˇmif_ªÀa£
,

1837 .
	gio˘l
 = 
ˇmif_io˘l_v4l2
,

1838 .
	gªad
 = 
ˇmif_p_ªad
,

1839 .
	gwrôe
 = 
ˇmif_wrôe
,

1840 .
	gmm≠
 = 
ˇmif_p_mm≠
,

1843 
	$ˇmif_vdev_ªÀa£
 (
video_devi˚
 *
vdev
) {

1845 
	}
}

1847 
video_devi˚
 
	gcodec_ãm∂©e
 = {

1848 .
ow√r
 = 
THIS_MODULE
,

1849 .
	g«me
 = "CODEC_CAMIF",

1850 .
	gty≥
 = 
VID_TYPE_OVERLAY
 | 
VID_TYPE_CAPTURE
 | 
VID_TYPE_CLIPPING
 | 
VID_TYPE_SCALES
,

1851 .
	gty≥2
 = 
V4L2_CAP_VIDEO_OVERLAY
|
V4L2_CAP_VIDEO_CAPTURE
,

1852 .
	gf›s
 = &
ˇmif_c_f›s
,

1853 .
	gªÀa£
 = 
ˇmif_vdev_ªÀa£
,

1854 .
	gmö‹
 = 
CODEC_MINOR
,

1857 
video_devi˚
 
	g¥evõw_ãm∂©e
 = {

1858 .
ow√r
 = 
THIS_MODULE
,

1859 .
	g«me
 = "PREVIEW_CAMIF",

1860 .
	gty≥
 = 
VID_TYPE_OVERLAY
 | 
VID_TYPE_CAPTURE
 | 
VID_TYPE_CLIPPING
 | 
VID_TYPE_SCALES
,

1861 .
	gty≥2
 = 
V4L2_CAP_VIDEO_OVERLAY
|
V4L2_CAP_VIDEO_CAPTURE
,

1862 .
	gf›s
 = &
ˇmif_p_f›s
,

1863 .
	gªÀa£
 = 
ˇmif_vdev_ªÀa£
,

1864 .
	gmö‹
 = 
PREVIEW_MINOR
,

1867 
ˇmif_cfg_t
 
	gfimc
[
CAMIF_NUM
] = {

1871 .
èrgë_x
 = 640,

1872 .
	gèrgë_y
 = 486,

1873 .
	gµ_num
 = 4,

1874 .
	gdma_ty≥
 = 
CAMIF_CODEC
,

1876 .
	g§c_fmt
 = 
CAMIF_YCBCR422
,

1877 .
	göput_ch™√l
 = 
CAMERA_INPUT
,

1879 .
	gd°_fmt
 = 
CAMIF_YCBCR420
,

1880 .
	gouçut_ch™√l
 = 
CAMIF_OUT_PP
,

1881 .
	gÊù
 = 
CAMIF_FLIP_X
,

1882 .
	gv
 = &
codec_ãm∂©e
,

1883 .
	gúq
 = 
IRQ_CAMIF_C
,

1884 .
	gsh‹äame
 = "CAMIF_CODEC",

1885 .
	g°©us
 = 
CAMIF_STOPPED
,

1891 .
èrgë_x
 = 320,

1892 .
	gèrgë_y
 = 240,

1893 #ifde‡
TOMTOM_INTERLACE_MODE


1894 .
	gµ_num
 = 1,

1896 .
	gµ_num
 = 4,

1898 .
	gdma_ty≥
 = 
CAMIF_PREVIEW
,

1900 .
	g§c_fmt
 = 
CAMIF_YCBCR422
,

1901 .
	göput_ch™√l
 = 
CAMERA_INPUT
,

1903 .
	gd°_fmt
 = 
CAMIF_RGB16
,

1904 .
	gouçut_ch™√l

CAMIF_OUT_PP
,

1905 .
	gÊù
 = 
CAMIF_FLIP_Y
,

1906 .
	gv
 = &
¥evõw_ãm∂©e
,

1907 .
	gúq
 = 
IRQ_CAMIF_P
,

1908 .
	gsh‹äame
 = "CAMIF_PREVIEW",

1909 .
	g°©us
 = 
CAMIF_STOPPED
,

1913 
	$s3c_ˇmîa_drivî_öô
()

1915 c⁄° *
ˇmif_vîsi⁄
 =

1917 c⁄° *
drivî_vîsi⁄
 =

1919 c⁄° *
fsm_vîsi⁄
 =

1922 
ˇmif_cfg_t
 *
cfg
;

1924 
	`ˇmif_£tup_£ns‹
();

1926 
cfg
 = 
	`gë_ˇmif
(
CODEC_MINOR
);

1927 
	`muãx_öô
(&
cfg
->
v
->
lock
);

1928 
	`öô_waôqueue_hód
(&
cfg
->
waôq
);

1929 
cfg
->
Ÿhî
 = cfg;

1930 
cfg
->
°©us
 = 
CAMIF_STOPPED
;

1931 if(
	`video_ªgi°î_devi˚
(
cfg
->
v
, 
VFL_TYPE_GRABBER
,

1932 
CODEC_MINOR
) != 0) {

1933 
	`__E
("Couldn'tÑegisterÅhis codec driver.\n");

1937 
cfg
 = 
	`gë_ˇmif
(
PREVIEW_MINOR
);

1938 
	`muãx_öô
(&
cfg
->
v
->
lock
);

1939 
	`öô_waôqueue_hód
(&
cfg
->
waôq
);

1940 
cfg
->
Ÿhî
 = cfg;

1941 
cfg
->
°©us
 = 
CAMIF_STOPPED
;

1942 if(
	`video_ªgi°î_devi˚
(
cfg
->
v
, 
VFL_TYPE_GRABBER
,

1943 
PREVIEW_MINOR
) != 0) {

1944 
	`__E
("Couldn'tÑegisterÅhisÖreview driver.\n");

1950 
	`__I
("FIMC buût:" 
__DATE__
 " " 
__TIME__
 "\n%s\n%s\n%s\n",

1951 
ˇmif_vîsi⁄
, 
drivî_vîsi⁄
, 
fsm_vîsi⁄
);

1954 
	}
}

1956 
	$s3c_ˇmîa_drivî_exô
()

1958 
ˇmif_cfg_t
 *
cfg
;

1960 
cfg
 = 
	`gë_ˇmif
(
CODEC_MINOR
);

1961 
	`video_uƒegi°î_devi˚
(
cfg
->
v
);

1962 
	`ˇmif_hw_˛o£
(
cfg
);

1963 
	`mem£t
(
cfg
, 0, (*cfg));

1965 
cfg
 = 
	`gë_ˇmif
(
PREVIEW_MINOR
);

1966 
	`video_uƒegi°î_devi˚
(
cfg
->
v
);

1967 
	`ˇmif_hw_˛o£
(
cfg
);

1968 
	`mem£t
(
cfg
, 0, (*cfg));

1969 
	}
}

1971 
moduÀ_öô
(
s3c_ˇmîa_drivî_öô
);

1972 
moduÀ_exô
(
s3c_ˇmîa_drivî_exô
);

1974 
MODULE_AUTHOR
("Yeom, Youngran <yeom@samsung.com>");

1975 
MODULE_DESCRIPTION
("s3c_camera_driver for FIMC3.X Camera interface");

1976 
MODULE_LICENSE
("GPL");

	@s3c_camif.c

1 
	#LOG_TAG
 "s3c-ˇmîaif"

	)

2 
	~"oßl.h
"

3 
	~"s3c.h
"

13 
	~<löux/moduÀ.h
>

14 
	~<löux/kî√l.h
>

15 
	~<löux/öô.h
>

16 
	~<löux/sched.h
>

17 
	~<löux/com∂ëi⁄.h
>

18 
	~<löux/dñay.h
>

19 
	~<löux/¶ab.h
>

20 
	~<löux/vmÆloc.h
>

21 
	~<löux/waô.h
>

22 
	~<löux/˛k.h
>

23 
	~<asm/io.h
>

24 
	~<asm/£m≠h‹e.h
>

25 
	~<asm/h¨dw¨e.h
>

26 
	~<asm/uac˚ss.h
>

28 
	~<asm/¨ch/m≠.h
>

29 
	~<asm/¨ch/ªgs-ˇmif.h
>

30 
	~<asm/¨ch/ªgs-gpio.h
>

31 
	~<asm/¨ch/ªgs-gpioj.h
>

32 
	~<asm/¨ch/ªgs-lcd.h
>

33 
	~<asm/¨ch/ªgs-s3c6410-˛ock.h
>

35 
	~"s3c_ˇmif.h
"

36 
	~<löux/videodev.h
>

40 #i‡(
deföed
 (
CONFIG_VIDEO_ADV7180
) )

41 
	#TOMTOM_INTERLACE_MODE


	)

42 
	#SW_IPC


	)

45 
s3c_sysc⁄_t
 
__iomem
 *
	gsysc⁄
 = 
S3C_VA_SYSCON
;

46 
s3c_ˇm_t
 
__iomem
 *
	gba£
 = 
S3C_VA_CAMIF
;

48 
dma_addr_t
 
	gsh¨ed_buf„r_addr
;

50 
ˇmif_dma_bur°
(
ˇmif_cfg_t
 *);

51 
ˇmif_£tup_sˇÀr
(
ˇmif_cfg_t
 *);

52 
ˇmif_£tup_öçut_∑th
(
ˇmif_cfg_t
 *);

53 
ˇmif_£tup_msdma_öput
(
ˇmif_cfg_t
 *);

54 
ˇmif_£tup_ˇmîa_öput
(
ˇmif_cfg_t
 *);

55 
ˇmif_£tup_ouçut_∑th
(
ˇmif_cfg_t
 *);

56 
ˇmif_£tup_lcd_fifo_ouçut
(
ˇmif_cfg_t
 *);

57 
ˇmif_£tup_mem‹y_ouçut
(
ˇmif_cfg_t
 *);

59 c⁄° *
	gˇmif_vîsi⁄
 =

62 
	#CAMDIV_vÆ
 20

	)

64 
	$s3c_ˇmif_£t_˛ock
 (
ˇm˛k
)

66 
ˇm˛k_div
;

67 
˛k
 *
§c_˛k
 = 
	`˛k_gë
(
NULL
, "hclkx2");

69 
	`__D
("Exã∫Æ camî®˛ock i†£àtÿ%dHz\n", 
ˇm˛k
);

71 
ˇm˛k_div
 = 
	`˛k_gë_øã
(
§c_˛k
Ë/ 
ˇm˛k
;

72 
	`__D
("P¨íà˛k = %ld, CAMDIV = %d\n", 
	`˛k_gë_øã
(
§c_˛k
), 
ˇm˛k_div
);

75 
sysc⁄
->
HCLK_GATE
.
HCLK_CAMIF
 = 1;

78 
sysc⁄
->
SCLK_GATE
.
SCLK_CAM
 = 1;

80 
sysc⁄
->
CLK_DIV0
.
CAM_RATIO
 = 0;

82 if(
ˇm˛k_div
 > 16) {

83 
	`__D
("Can't setÅo %dHZ, setÅo %dHZ instead!!!\n",

84 ()
ˇm˛k
, ()
	`˛k_gë_øã
(
§c_˛k
)/16);

85 
ˇm˛k_div
 = 16;

89 
sysc⁄
->
CLK_DIV0
.
CAM_RATIO
 = 
ˇm˛k_div
 - 1;

92 
	}
}

95 
ölöe
 
	$ˇmif_mÆloc
(
ˇmif_cfg_t
 *
cfg
)

97 
t_size
 = 0;

98 
¨ó
 = 0;

101 if(
cfg
->
öãæa˚_ˇ±uª
)

102 
¨ó
 = 
cfg
->
èrgë_x
 * cfg->
èrgë_y
 * 2;

104 
¨ó
 = 
cfg
->
èrgë_x
 * cfg->
èrgë_y
;

106 if(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

107 i‡(
cfg
->
d°_fmt
 & 
CAMIF_YCBCR420
)

108 
t_size
 = 
¨ó
 * 3 / 2;

110 i‡(
cfg
->
d°_fmt
 & 
CAMIF_YCBCR422
)

111 
t_size
 = 
¨ó
 * 2;

113 i‡(
cfg
->
d°_fmt
 & 
CAMIF_RGB16
)

114 
t_size
 = 
¨ó
 * 2;

116 i‡(
cfg
->
d°_fmt
 & 
CAMIF_RGB24
)

117 
t_size
 = 
¨ó
 * 4;

120 
	`__E
("CODEC: Invalid format !! \n");

123 
t_size
 =Å_sizê* 
cfg
->
µ_num
;

124 
	`__I
("CODEC: Mem‹yÑequúed : 0x%08X byãs\n",
t_size
);

126 
	`__I
("CODEC: Using Dedicated High RAM\n");

127 
cfg
->
µ_phys_buf
 = 
PHYS_OFFSET
 + (
MEM_SIZE
 - 
RESERVE_MEM
);

128 
cfg
->
µ_vút_buf
 = 
	`i‹em≠_noˇche
(cfg->
µ_phys_buf
, 
YUV_MEM
);

129 
sh¨ed_buf„r_addr
 = (
	`ty≥of
(sh¨ed_buf„r_addr))
cfg
->
µ_vút_buf
;

131 i‡–!
cfg
->
µ_vút_buf
 ) {

132 
	`__E
("s3c_ˇmif.¯: FaûedÅÿªque° YCbCr: sizêo‡mem‹y %08x \n",
t_size
);

133  -
ENOMEM
;

135 
cfg
->
µ_tŸÆsize
 = 
t_size
;

139 i‡–
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
 ) {

141 i‡(
cfg
->
d°_fmt
 & 
CAMIF_RGB16
) {

142 
t_size
 = 
¨ó
 * 2;

144 i‡(
cfg
->
d°_fmt
 & 
CAMIF_RGB24
) {

145 
t_size
 = 
¨ó
 * 4;

148 
	`__E
("Error[s3c_camif.c]: Invalid format !\n");

151 
t_size
 =Å_sizê* 
cfg
->
µ_num
;

152 
	`__I
("Pªvõw: Mem‹yÑequúed : 0x%08X byãs\n",
t_size
);

155 
	`__I
("Preview: Using Dedicated High RAM\n");

156 if(
cfg
->
öãæa˚_ˇ±uª
 == 1) {

157 
cfg
->
µ_phys_buf
 = 
PHYS_OFFSET
 + (
MEM_SIZE
 - 
RESERVE_MEM
);

158 
cfg
->
µ_vút_buf
 = (
	`ty≥of
(cfg->µ_vút_buf))
sh¨ed_buf„r_addr
;

160 
cfg
->
µ_phys_buf
 = 
PHYS_OFFSET
 + (
MEM_SIZE
 - 
RESERVE_MEM
 ) + 
YUV_MEM
;

161 
cfg
->
µ_vút_buf
 = 
	`i‹em≠_noˇche
(cfg->
µ_phys_buf
, 
RGB_MEM
);

165 i‡–!
cfg
->
µ_vút_buf
 ) {

166 
	`__E
("FaûedÅÿªque° RGB: sizêo‡mem‹y %08x\n",
t_size
);

167  -
ENOMEM
;

169 
cfg
->
µ_tŸÆsize
 = 
t_size
;

174 
	}
}

177 
	$ˇmif_demÆloc
(
ˇmif_cfg_t
 *
cfg
)

179 #i‡
	`deföed
(
P_DEDICATED_MEM
Ë|| deföed(
C_DEDICATED_MEM
)

180 
	`iounm≠
(
cfg
->
µ_vút_buf
);

181 
cfg
->
µ_vút_buf
 = 0;

183 i‡–
cfg
->
µ_vút_buf
 ) {

184 
	`c⁄si°ít_‰ì
(
cfg
->
µ_vút_buf
,cfg->
µ_tŸÆsize
,cfg->
µ_phys_buf
);

185 
cfg
->
µ_vút_buf
 = 0;

189 
	}
}

195 
	$ˇmif_g_‰ame_num
(
ˇmif_cfg_t
 *
cfg
)

197 
ödex
 = 0;

200 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
 ) {

201 
ödex
 = 
ba£
->
CICOSTATUS
.
FømeC¡_Co
;

202 } i‡(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

203 
ödex
 = 
ba£
->
CIPRSTATUS
.
FømeC¡_Pr
;

205 
	`__E
("Faûed! %d\n", 
cfg
->
dma_ty≥
);

208 
cfg
->
now_‰ame_num
 = (
ödex
 + 2) % 4;

209  
ödex
;

210 
	}
}

212 
ˇmif_µ_codec_rgb
(
ˇmif_cfg_t
 *
cfg
);

213 
ˇmif_µ_¥evõw_msdma
(
ˇmif_cfg_t
 *
cfg
);

215 
	$ˇmif_µ_codec
(
ˇmif_cfg_t
 *
cfg
)

217 
u32
 
i
, 
cb¸_size
 = 0;

218 
u32
 
⁄e_p_size
;

219 
u32
 
⁄e_löe_size
;

220 
u32
 
¨ó
 = 0;

222 if(
cfg
->
öãæa˚_ˇ±uª
)

223 
¨ó
 = 
cfg
->
èrgë_x
 * cfg->
èrgë_y
 * 2;

225 
¨ó
 = 
cfg
->
èrgë_x
 * cfg->
èrgë_y
;

227 i‡(
cfg
->
d°_fmt
 & 
CAMIF_YCBCR420
) {

228 
cb¸_size
 = 
¨ó
 /4;

230 if(
cfg
->
d°_fmt
 & 
CAMIF_YCBCR422
){

231 
cb¸_size
 = 
¨ó
 /2;

233 if((
cfg
->
d°_fmt
 & 
CAMIF_RGB16
Ë|| (cfg->d°_fmà& 
CAMIF_RGB24
)){

234 
	`ˇmif_µ_codec_rgb
(
cfg
);

238 
	`__E
("InvÆid f‹m© Nÿ- %d \n", 
cfg
->
d°_fmt
);

241  
cfg
->
µ_num
 ) {

243  
i
 =0 ; i < 4; i=i+1) {

244 
cfg
->
img_buf
[
i
].
vút_y
 = cfg->
µ_vút_buf
;

245 
cfg
->
img_buf
[
i
].
phys_y
 = cfg->
µ_phys_buf
;

246 
cfg
->
img_buf
[
i
].
vút_cb
 = cfg->
µ_vút_buf
 + 
¨ó
;

247 
cfg
->
img_buf
[
i
].
phys_cb
 = cfg->
µ_phys_buf
 + 
¨ó
;

248 
cfg
->
img_buf
[
i
].
vút_¸
 = cfg->
µ_vút_buf
 + 
¨ó
 + 
cb¸_size
;

249 
cfg
->
img_buf
[
i
].
phys_¸
 = cfg->
µ_phys_buf
 + 
¨ó
 + 
cb¸_size
;

250 
ba£
->
CICOYSA
[
i
] = 
cfg
->
img_buf
[i].
phys_y
;

251 
ba£
->
CICOCBSA
[
i
] = 
cfg
->
img_buf
[i].
phys_cb
;

252 
ba£
->
CICOCRSA
[
i
] = 
cfg
->
img_buf
[i].
phys_¸
;

257 
	#TRY
 (–
i
%2 ) ? 1 :0)

	)

258 if(
cfg
->
öãæa˚_ˇ±uª
)

259 
⁄e_p_size
 = 
cfg
->
èrgë_x
 * 2;

261 
⁄e_p_size
 = 
¨ó
 + 2*
cb¸_size
;

262 
i
 = 0; i < 4 ; i++) {

263 
cfg
->
img_buf
[
i
].
vút_y
 = cfg->
µ_vút_buf
 + 
TRY
 * 
⁄e_p_size
;

264 
cfg
->
img_buf
[
i
].
phys_y
 = cfg->
µ_phys_buf
 + 
TRY
 * 
⁄e_p_size
;

265 
cfg
->
img_buf
[
i
].
vút_cb
 = cfg->
µ_vút_buf
 + 
¨ó
 + 
TRY
 * 
⁄e_p_size
;

266 
cfg
->
img_buf
[
i
].
phys_cb
 = cfg->
µ_phys_buf
 + 
¨ó
 + 
TRY
 * 
⁄e_p_size
;

267 
cfg
->
img_buf
[
i
].
vút_¸
 = cfg->
µ_vút_buf
 + 
¨ó
 + 
cb¸_size
 + 
TRY
 * 
⁄e_p_size
;

268 
cfg
->
img_buf
[
i
].
phys_¸
 = cfg->
µ_phys_buf
 + 
¨ó
 + 
cb¸_size
 + 
TRY
 * 
⁄e_p_size
;

269 
ba£
->
CICOYSA
[
i
] = 
cfg
->
img_buf
[i].
phys_y
;

270 
ba£
->
CICOCBSA
[
i
] = 
cfg
->
img_buf
[i].
phys_cb
;

271 
ba£
->
CICOCRSA
[
i
] = 
cfg
->
img_buf
[i].
phys_¸
;

276 if(
cfg
->
öãæa˚_ˇ±uª
) {

277 
⁄e_löe_size
 = 
cfg
->
èrgë_x
 * 2;

278 
⁄e_p_size
 = 
¨ó
 + 2*
cb¸_size
;

279 
i
 = 0; i < 4 ; i++) {

280 
cfg
->
img_buf
[
i
].
vút_y
 = cfg->
µ_vút_buf
 + (i/2Ë* 
⁄e_p_size
 + (i%2Ë* 
⁄e_löe_size
;

281 
cfg
->
img_buf
[
i
].
phys_y
 = cfg->
µ_phys_buf
 + (i/2Ë* 
⁄e_p_size
 + (i%2Ë* 
⁄e_löe_size
;

282 
cfg
->
img_buf
[
i
].
vút_cb
 = cfg->
µ_vút_buf
 + 
¨ó
 + (i/2Ë* 
⁄e_p_size
 + (i%2Ë* 
⁄e_löe_size
;

283 
cfg
->
img_buf
[
i
].
phys_cb
 = cfg->
µ_phys_buf
 + 
¨ó
 + (i/2Ë* 
⁄e_p_size
 + (i%2Ë* 
⁄e_löe_size
;

284 
cfg
->
img_buf
[
i
].
vút_¸
 = cfg->
µ_vút_buf
 + 
¨ó
 + 
cb¸_size
 + (i/2Ë* 
⁄e_p_size
 + (i%2Ë* 
⁄e_löe_size
;

285 
cfg
->
img_buf
[
i
].
phys_¸
 = cfg->
µ_phys_buf
 + 
¨ó
 + 
cb¸_size
 + (i/2Ë* 
⁄e_p_size
 + (i%2Ë* 
⁄e_löe_size
;

286 
ba£
->
CICOYSA
[
i
] = 
cfg
->
img_buf
[i].
phys_y
;

287 
ba£
->
CICOCBSA
[
i
] = 
cfg
->
img_buf
[i].
phys_cb
;

288 
ba£
->
CICOCRSA
[
i
] = 
cfg
->
img_buf
[i].
phys_¸
;

291 
⁄e_p_size
 = 
¨ó
 + 2*
cb¸_size
;

292 
i
 = 0; i < 4 ; i++) {

293 
cfg
->
img_buf
[
i
].
vút_y
 = cfg->
µ_vút_buf
 + i * 
⁄e_p_size
;

294 
cfg
->
img_buf
[
i
].
phys_y
 = cfg->
µ_phys_buf
 + i * 
⁄e_p_size
;

295 
cfg
->
img_buf
[
i
].
vút_cb
 = cfg->
µ_vút_buf
 + 
¨ó
 + i * 
⁄e_p_size
;

296 
cfg
->
img_buf
[
i
].
phys_cb
 = cfg->
µ_phys_buf
 + 
¨ó
 + i * 
⁄e_p_size
;

297 
cfg
->
img_buf
[
i
].
vút_¸
 = cfg->
µ_vút_buf
 + 
¨ó
 + 
cb¸_size
 + i * 
⁄e_p_size
;

298 
cfg
->
img_buf
[
i
].
phys_¸
 = cfg->
µ_phys_buf
 + 
¨ó
 + 
cb¸_size
 + i * 
⁄e_p_size
;

299 
ba£
->
CICOYSA
[
i
] = 
cfg
->
img_buf
[i].
phys_y
;

300 
ba£
->
CICOCBSA
[
i
] = 
cfg
->
img_buf
[i].
phys_cb
;

301 
ba£
->
CICOCRSA
[
i
] = 
cfg
->
img_buf
[i].
phys_¸
;

307 
	`__E
("InvÆid PögP⁄g Numbî %d \n", 
cfg
->
µ_num
);

310 
	}
}

313 
	$ˇmif_µ_¥evõw
(
ˇmif_cfg_t
 *
cfg
)

315 
i
;

316 
u32
 
cb¸_size
 = 0;

317 
u32
 
¨ó
 = 
cfg
->
èrgë_x
 * cfg->
èrgë_y
;

319 if(
cfg
->
öput_ch™√l
) {

320 
	`ˇmif_µ_¥evõw_msdma
(
cfg
);

324 i‡(
cfg
->
d°_fmt
 & 
CAMIF_YCBCR420
) {

325 
cb¸_size
 = 
¨ó
 /4;

327 } if(
cfg
->
d°_fmt
 & 
CAMIF_YCBCR422
){

328 
cb¸_size
 = 
¨ó
 /2;

330 } if(
cfg
->
d°_fmt
 & 
CAMIF_RGB24
) {

331 
¨ó
 =área * 4 ;

332 } i‡(
cfg
->
d°_fmt
 & 
CAMIF_RGB16
) {

333 
¨ó
 =área * 2;

335 
	`__E
("InvÆid f‹m© Nÿ- %d \n", 
cfg
->
d°_fmt
);

338  
cfg
->
µ_num
 ) {

340  
i
 = 0; i < 4 ; i++ ) {

341 
cfg
->
img_buf
[
i
].
vút_rgb
 = cfg->
µ_vút_buf
 ;

342 
cfg
->
img_buf
[
i
].
phys_rgb
 = cfg->
µ_phys_buf
 ;

343 
ba£
->
CIPRYSA
[
i
] = 
cfg
->
img_buf
[i].
phys_rgb
;

347  
i
 = 0; i < 4 ; i++) {

348 
cfg
->
img_buf
[
i
].
vút_rgb
 = cfg->
µ_vút_buf
 + 
TRY
 * 
¨ó
;

349 
cfg
->
img_buf
[
i
].
phys_rgb
 = cfg->
µ_phys_buf
 + 
TRY
 * 
¨ó
;

350 
ba£
->
CIPRYSA
[
i
] = 
cfg
->
img_buf
[i].
phys_rgb
;

354  
i
 = 0; i < 4 ; i++) {

355 
cfg
->
img_buf
[
i
].
vút_rgb
 = cfg->
µ_vút_buf
 + i * 
¨ó
;

356 
cfg
->
img_buf
[
i
].
phys_rgb
 = cfg->
µ_phys_buf
 + i * 
¨ó
;

357 
ba£
->
CIPRYSA
[
i
] = 
cfg
->
img_buf
[i].
phys_rgb
;

361 
	`__E
("InvÆid PögP⁄g Numbî %d \n", 
cfg
->
µ_num
);

364 
	}
}

367 
	$ˇmif_µ_codec_rgb
(
ˇmif_cfg_t
 *
cfg
)

369 
i
;

370 
u32
 
vÆ
;

371 
u32
 
¨ó
 = 
cfg
->
èrgë_x
 * cfg->
èrgë_y
;

373 if(
cfg
->
d°_fmt
 & 
CAMIF_RGB24
) {

374 
¨ó
 =área * 4 ;

375 } i‡(
cfg
->
d°_fmt
 & 
CAMIF_RGB16
){

377 
¨ó
 =área * 2;

379 
	`__E
("Faûed! %d\n", 
cfg
->
d°_fmt
);

382 if(
cfg
->
öput_ch™√l
 =
MSDMA_FROM_CODEC
){

383 
vÆ
 = 
	`ªadl
(
S3C_VIDW00ADD0B0
);

384  
i
 = 0; i < 4 ; i++ ) {

385 
ba£
->
CICOYSA
[
i
] = 
vÆ
;

388  
cfg
->
µ_num
 ) {

390  
i
 = 0; i < 4 ; i++ ) {

391 
cfg
->
img_buf
[
i
].
vút_rgb
 = cfg->
µ_vút_buf
 ;

392 
cfg
->
img_buf
[
i
].
phys_rgb
 = cfg->
µ_phys_buf
 ;

393 
ba£
->
CICOYSA
[
i
] = 
cfg
->
img_buf
[i].
phys_rgb
;

397  
i
 = 0; i < 4 ; i++) {

398 
cfg
->
img_buf
[
i
].
vút_rgb
 = cfg->
µ_vút_buf
 + 
TRY
 * 
¨ó
;

399 
cfg
->
img_buf
[
i
].
phys_rgb
 = cfg->
µ_phys_buf
 + 
TRY
 * 
¨ó
;

400 
ba£
->
CICOYSA
[
i
] = 
cfg
->
img_buf
[i].
phys_rgb
;

404  
i
 = 0; i < 4 ; i++) {

405 
cfg
->
img_buf
[
i
].
vút_rgb
 = cfg->
µ_vút_buf
 + i * 
¨ó
;

406 
cfg
->
img_buf
[
i
].
phys_rgb
 = cfg->
µ_phys_buf
 + i * 
¨ó
;

407 
ba£
->
CICOYSA
[
i
] = 
cfg
->
img_buf
[i].
phys_rgb
;

411 
	`__E
("InvÆid PögP⁄g Numbî %d \n",
cfg
->
µ_num
);

412 
	`∑nic
("s3c_camif.c : Halt !\n");

416 
	}
}

419 
	$ˇmif_µ_¥evõw_msdma
(
ˇmif_cfg_t
 *
cfg
)

421 
i
;

423 
u32
 
cb¸_size
 = 0;

424 
u32
 
vÆ
;

426 
u32
 
¨ó
 = 
cfg
->
cis
->
sour˚_x
 * cfg->cis->
sour˚_y
;

428 
vÆ
 = 
	`ªadl
(
S3C_VIDW01ADD0B0
);

430 if(!((
cfg
->
d°_fmt
 & 
CAMIF_RGB16
Ë|| (cfg->d°_fmà& 
CAMIF_RGB24
)))

431 
	`__E
("Invalid Format\n");

433  
i
 = 0; i < 4 ; i++ ) {

434 
ba£
->
CIPRYSA
[
i
] = 
vÆ
;

437 i‡(
cfg
->
§c_fmt
 & 
CAMIF_YCBCR420
) {

438 
cb¸_size
 = 
¨ó
/4;

439 
cfg
->
img_buf
[0].
vút_cb
 = cfg->
µ_vút_buf
 + 
¨ó
;

440 
cfg
->
img_buf
[0].
phys_cb
 = cfg->
µ_phys_buf
 + 
¨ó
;

441 
cfg
->
img_buf
[0].
vút_¸
 = cfg->
µ_vút_buf
 + 
¨ó
 + 
cb¸_size
;

442 
cfg
->
img_buf
[0].
phys_¸
 = cfg->
µ_phys_buf
 + 
¨ó
 + 
cb¸_size
;

444 } if(
cfg
->
§c_fmt
 & 
CAMIF_YCBCR422
){

445 
¨ó
 =área * 2;

446 
cfg
->
img_buf
[0].
vút_cb
 = 0;

447 
cfg
->
img_buf
[0].
phys_cb
 = 0;

448 
cfg
->
img_buf
[0].
vút_¸
 = 0;

449 
cfg
->
img_buf
[0].
phys_¸
 = 0;

452 
cfg
->
img_buf
[0].
vút_y
 = cfg->
µ_vút_buf
;

453 
cfg
->
img_buf
[0].
phys_y
 = cfg->
µ_phys_buf
;

455 
ba£
->
MSPRY0SA
 = 
cfg
->
img_buf
[0].
phys_y
;

456 
ba£
->
MSPRY0END
 = 
cfg
->
img_buf
[0].
phys_y
+
¨ó
;

458 
ba£
->
MSPRCB0SA
 = 
cfg
->
img_buf
[0].
phys_cb
;

459 
ba£
->
MSPRCB0END
 = 
cfg
->
img_buf
[0].
phys_cb
+
cb¸_size
;

461 
ba£
->
MSPRCR0SA
 = 
cfg
->
img_buf
[0].
phys_¸
;

462 
ba£
->
MSPRCR0END
 = 
cfg
->
img_buf
[0].
phys_¸
+
cb¸_size
;

464 #ifde‡
SW_IPC


465 
ba£
->
MSCOWIDTH
.
AutoLﬂdE«bÀ
 = 0;

467 
ba£
->
MSCOWIDTH
.
AutoLﬂdE«bÀ
 = 1;

470 
ba£
->
MSPRWIDTH
.
MSPRHEIGHT
 = 
cfg
->
cis
->
sour˚_y
;

471 
ba£
->
MSPRWIDTH
.
MSPRHEIGHT
 = 
cfg
->
cis
->
sour˚_x
;

474 
	}
}

476 
	$ˇmif_£tup_mem‹y_ouçut
(
ˇmif_cfg_t
 *
cfg
)

478 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
 ) {

479 
	`ˇmif_µ_codec
(
cfg
);

482 i‡–
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

483 
	`ˇmif_µ_¥evõw
(
cfg
);

486 
	}
}

489 
	$ˇmif_£tup_lcd_fifo_ouçut
(
ˇmif_cfg_t
 *
cfg
)

493 
	}
}

501 
u8
 * 
	$ˇmif_g_‰ame
(
ˇmif_cfg_t
 *
cfg
)

503 
u8
 * 
ªt
 = 
NULL
;

504 
˙t
 = 
cfg
->
now_‰ame_num
;

506 if(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

507 
ªt
 = 
cfg
->
img_buf
[
˙t
].
vút_rgb
;

509 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

510 i‡((
cfg
->
d°_fmt
 & 
CAMIF_RGB16
Ë|| (cfg->d°_fmà& 
CAMIF_RGB24
))

511 
ªt
 = 
cfg
->
img_buf
[
˙t
].
vút_rgb
;

513 
ªt
 = 
cfg
->
img_buf
[
˙t
].
vút_y
;

515  
ªt
;

516 
	}
}

520 
	$ˇmif_sour˚_fmt
(
ˇmif_cis_t
 *
cis
)

523 
ba£
->
CISRCFMT
.
ITU601_656n
 = 
cis
->
ITU
;

524 
ba£
->
CISRCFMT
.
SrcHsize_CAM
 = 
cis
->
sour˚_x
;

525 
ba£
->
CISRCFMT
.
SrcVsize_CAM
 = 
cis
->
sour˚_y
;

526 
ba£
->
CISRCFMT
.
Ordî422_CAM
 = 
cis
->
‹dî422_CAM
;

528 #i‚de‡
TOMTOM_INTERLACE_MODE


529 
ba£
->
CISRCFMT
.
UVOff£t
 = 0;

533 
	}
}

540 
	$ˇmif_èrgë_fmt
(
ˇmif_cfg_t
 *
cfg
)

544 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

545 
ba£
->
CICOTRGFMT
.
T¨gëHsize_Co
 = 
cfg
->
èrgë_x
;

546 
ba£
->
CICOTRGFMT
.
T¨gëVsize_Co
 = 
cfg
->
èrgë_y
;

549 i‡–
cfg
->
d°_fmt
 & 
CAMIF_YCBCR420
 ) {

550 
ba£
->
CICOTRGFMT
.
OutF‹m©_Co
 = 0;

551 } if(
cfg
->
d°_fmt
 & 
CAMIF_YCBCR422
) {

552 if(
cfg
->
öãæa˚_ˇ±uª
)

553 
ba£
->
CICOTRGFMT
.
OutF‹m©_Co
 = 2;

555 
ba£
->
CICOTRGFMT
.
OutF‹m©_Co
 = 1;

556 } if((
cfg
->
d°_fmt
 & 
CAMIF_RGB24
Ë||(cfg->d°_fmà& 
CAMIF_RGB16
)) {

557 
ba£
->
CICOTRGFMT
.
OutF‹m©_Co
 = 3;

559 
	`__E
("camif_target_fmt() - Invalid Format\n");

561 } i‡(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

562 
ba£
->
CIPRTRGFMT
.
T¨gëHsize_Pr
 = 
cfg
->
èrgë_x
;

563 
ba£
->
CIPRTRGFMT
.
T¨gëVsize_Pr
 = 
cfg
->
èrgë_y
;

566 i‡–
cfg
->
d°_fmt
 & 
CAMIF_YCBCR420
 ) {

567 
ba£
->
CIPRTRGFMT
.
OutF‹m©_Pr
 = 0;

568 } if(
cfg
->
d°_fmt
 & 
CAMIF_YCBCR422
) {

569 
ba£
->
CIPRTRGFMT
.
OutF‹m©_Pr
 = 1;

570 } if((
cfg
->
d°_fmt
 & 
CAMIF_RGB24
Ë||(cfg->d°_fmà& 
CAMIF_RGB16
)) {

571 
ba£
->
CIPRTRGFMT
.
OutF‹m©_Pr
 = 3;

573 
	`__E
("Invalid Format\n");

576 
	`__E
("Faûed! %d\n", 
cfg
->
dma_ty≥
);

580 
	}
}

582 
	$ˇmif_ch™ge_Êù
(
ˇmif_cfg_t
 *
cfg
)

585 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
 ) {

587 
ba£
->
CICOTRGFMT
.
FlùMd_Co
 = 0;

588 
ba£
->
CICOTRGFMT
.
FlùMd_Co
 = 
cfg
->
Êù
 >> 14;

591 
ba£
->
CIPRTRGFMT
.
FlùMd_Pr
 = 0;

592 if(
cfg
->
Êù
 & 1 << 13) {

593 
ba£
->
CIPRTRGFMT
.
RŸ90_Pr
 = 1;

595 
ba£
->
CIPRTRGFMT
.
RŸ90_Pr
 = 0;

597 
ba£
->
CIPRTRGFMT
.
FlùMd_Pr
 = 
cfg
->
Êù
 >> 14;

599 
	}
}

602 
	$ˇmif_ch™ge_image_ef„˘
(
ˇmif_cfg_t
 *
cfg
)

604 
ba£
->
CIIMGEFF
.
FIN
 = 0;

607 
ba£
->
CIIMGEFF
.
IE_ON_Pr
 = 1;

608 
ba£
->
CIIMGEFF
.
IE_ON_Co
 = 1;

610 
cfg
->
ef„˘
) {

611 
CAMIF_SILHOUETTE
:

612 
ba£
->
CIIMGEFF
.
FIN
 = 5;

615 
CAMIF_EMBOSSING
:

616 
ba£
->
CIIMGEFF
.
FIN
 = 4;

619 
CAMIF_ART_FREEZE
:

620 
ba£
->
CIIMGEFF
.
FIN
 = 3;

623 
CAMIF_NEGATIVE
:

624 
ba£
->
CIIMGEFF
.
FIN
 = 2;

627 
CAMIF_ARBITRARY_CB_CR
:

628 
ba£
->
CIIMGEFF
.
FIN
 = 1;

631 
CAMIF_BYPASS
:

635 
	}
}

644 
	$ˇmif_ˇ±uª_°¨t
(
ˇmif_cfg_t
 *
cfg
)

649 
cfg
->
ˇ±uª_íabÀ
) {

650 
CAMIF_BOTH_DMA_ON
:

651 
	`ˇmif_ª£t
(
CAMIF_RESET
,0);

654 
ba£
->
CICOSCCTRL
.
CoSˇÀrSèπ
 = 1;

657 
ba£
->
CIPRSCCTRL
.
PrSˇÀrSèπ
 = 1;

659 
ba£
->
CIIMGCPT
.
ImgC±En_CoSc
 = 1;

660 
ba£
->
CIIMGCPT
.
ImgC±En_PrSc
 = 1;

663 
CAMIF_DMA_ON
:

664 
	`ˇmif_ª£t
(
CAMIF_RESET
,0);

665 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

666 
ba£
->
CICOSCCTRL
.
CoSˇÀrSèπ
 = 1;

667 
ba£
->
CIIMGCPT
.
ImgC±En_CoSc
 = 1;

668 
ba£
->
CIIMGCPT
.
C±_FrEn_¥
 = 1;

670 
ba£
->
CIPRSCCTRL
.
PrSˇÀrSèπ
 = 1;

671 
ba£
->
CIIMGCPT
.
ImgC±En_PrSc
 = 1;

678 
ba£
->
CICOSTATUS
.
VSYNC
);

685 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

686 i‡(
cfg
->
d°_fmt
 & 
CAMIF_RGB24
)

687 
ba£
->
CIIMGCPT
.
C±_FrEn_Co
 = 3;

688 if(
cfg
->
d°_fmt
 & 
CAMIF_RGB16
)

689 
ba£
->
CIIMGCPT
.
C±_FrEn_Co
 = 1;

690 if(
cfg
->
d°_fmt
 & 
CAMIF_YCBCR420
)

691 
ba£
->
CIIMGCPT
.
C±_FrEn_Co
 = 2;

692 if(
cfg
->
d°_fmt
 & 
CAMIF_YCBCR422
)

693 
ba£
->
CIIMGCPT
.
C±_FrEn_Co
 = 0;

696 
ba£
->
CIIMGCPT
.
ImgC±En
 = 1;

698 
	}
}

701 
	$ˇmif_ˇ±uª_°›
(
ˇmif_cfg_t
 *
cfg
)

703 
cfg
->
ˇ±uª_íabÀ
) {

704 
CAMIF_BOTH_DMA_OFF
:

705 
ba£
->
CICOSCCTRL
.
CoSˇÀrSèπ
 = 0;

706 
ba£
->
CIPRSCCTRL
.
PrSˇÀrSèπ
 = 0;

707 
	`mem£t
(&
ba£
->
CIIMGCPT
, 0, (base->CIIMGCPT));

710 
CAMIF_DMA_OFF_L_IRQ
:

711 
CAMIF_DMA_OFF
:

712 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

713 
ba£
->
CICOSCCTRL
.
CoSˇÀrSèπ
 = 0;

714 
ba£
->
CIIMGCPT
.
ImgC±En_CoSc
 = 0;

715 i‡(
ba£
->
CIIMGCPT
.
ImgC±En_PrSc
 == 0) {

716 
	`mem£t
(&
ba£
->
CIIMGCPT
, 0, (base->CIIMGCPT));

719 
ba£
->
CIPRSCCTRL
.
PrSˇÀrSèπ
 = 0;

720 
ba£
->
CIIMGCPT
.
ImgC±En_PrSc
 = 0;

721 i‡(!
ba£
->
CIIMGCPT
.
ImgC±En_CoSc
)

722 
	`mem£t
(&
ba£
->
CIIMGCPT
, 0, (base->CIIMGCPT));

726 
	`__E
("Unexpected \n");

729 
ba£
->
CIIMGCPT
.
C±_FrEn_¥
 = 0;

731 if(
cfg
->
ˇ±uª_íabÀ
 =
CAMIF_DMA_OFF_L_IRQ
) {

732 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

733 
ba£
->
CICOCTRL
.
La°IRQEn_Co
 = 1;

735 
ba£
->
CIPRCTRL
.
La°IRQEn_Pr
 = 1;

740 
	}
}

743 
	$ˇmif_°¨t_po°¥o˚ssög
(
ˇmif_cfg_t
 *
cfg
)

745 i‡(
cfg
->
d°_fmt
 & 
CAMIF_YCBCR420
) {

746 
ba£
->
MSCOCR0SA
 |= 1<<1;

748 
ba£
->
MSCOCR0SA
 &= ~(1<<1);

752 
ba£
->
MSCOCR0SA
 &= ~(1<<0);

755 
ba£
->
MSCOCR0SA
 |= 1<<0;

757 
	`__I
("camif_start_postprocessing() started\n");

760 (
ba£
->
MSCOCR0SA
 & (1<<6)) == 0);

762 
	`__I
("camif_start_postprocessing() finished\n");

764 
	}
}

768 
	$ˇmif_£t_codec_msdma
(
ˇmif_cfg_t
 * 
cfg
)

770 
ªt
 = 0;

772 
u32
 
addr_°¨t_Y
=0, 
addr_°¨t_CB
=0, 
addr_°¨t_CR
=0;

773 
u32
 
addr_íd_Y
=0, 
addr_íd_CB
=0, 
addr_íd_CR
=0;

777 
ba£
->
MSCOCTRL
.
SEL_DMA_CAM_C
 = 0;

780 
ba£
->
MSCOCTRL
.
SEL_DMA_CAM_C
 = 1;

783 
cfg
->
§c_fmt
) {

786 
ba£
->
MSCOCTRL
.
InF‹m©_M_C
 = 0;

788 
addr_°¨t_Y
 = 
cfg
->
µ_phys_buf
;

789 
addr_°¨t_CB
 = 
addr_°¨t_Y
+(
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
);

790 
addr_°¨t_CR
 = 
addr_°¨t_CB
+(
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
*1/4);

792 
addr_íd_Y
 = 
addr_°¨t_Y
+(
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
);

793 
addr_íd_CB
 = 
addr_°¨t_CB
+(
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
*1/4);

794 
addr_íd_CR
 = 
addr_°¨t_CR
+(
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
*1/4);

798 
ba£
->
MSCOCTRL
.
InF‹m©_M_C
 = 2;

800 
addr_°¨t_Y
 = 
cfg
->
µ_phys_buf
;

801 
addr_°¨t_CB
 = 
addr_°¨t_Y
+(
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
);

802 
addr_°¨t_CR
 = 
addr_°¨t_CB
+(
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
*1/2);

804 
addr_íd_Y
 = 
addr_°¨t_Y
+(
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
);

805 
addr_íd_CB
 = 
addr_°¨t_CB
+(
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
*1/2);

806 
addr_íd_CR
 = 
addr_°¨t_CR
+(
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
*1/2);

816 
ba£
->
MSCOY0SA
 = 
addr_°¨t_Y
;

817 
ba£
->
MSCOCB0SA
 = 
addr_°¨t_CB
;

818 
ba£
->
MSCOCR0SA
 = 
addr_°¨t_CR
;

820 
ba£
->
MSCOY0END
 = 
addr_íd_Y
;

821 
ba£
->
MSCOCB0END
 = 
addr_íd_CB
;

822 
ba£
->
MSCOCR0END
 = 
addr_íd_CR
;

825 
ba£
->
MSCOYOFF
 = 0;

826 
ba£
->
MSCOCBOFF
 = 0;

827 
ba£
->
MSCOCROFF
 = 0;

830 
ba£
->
MSCOWIDTH
.
AutoLﬂdE«bÀ
 = 1;

831 
ba£
->
MSCOWIDTH
.
MSCOHEIGHT
 = 
cfg
->
cis
->
sour˚_y
;

832 
ba£
->
MSCOWIDTH
.MSCOWIDTH = 
cfg
->
cis
->
sour˚_x
;

834  
ªt
;

835 
	}
}

837 
	$ˇmif_codec_msdma_°¨t
(
ˇmif_cfg_t
 * 
cfg
)

839 
ªt
 = 0;

844 
ba£
->
MSCOCTRL
.
ENVID_M_C
 = 0;

847 
ba£
->
MSCOCTRL
.
ENVID_M_C
 = 1;

849  
ªt
;

850 
	}
}

851 
EXPORT_SYMBOL
(
ˇmif_codec_msdma_°¨t
);

853 
	$ˇmif_£t_¥evõw_msdma
(
ˇmif_cfg_t
 * 
cfg
)

855 
ªt
 = 0;

857 
u32
 
addr_°¨t_Y
=0, 
addr_°¨t_CB
=0, 
addr_°¨t_CR
=0;

858 
u32
 
addr_íd_Y
=0, 
addr_íd_CB
=0, 
addr_íd_CR
=0;

863 
ba£
->
MSCOCR0SA
 &= ~(1<<3);

866 
ba£
->
MSCOCR0SA
 |= (1<<3);

869 
cfg
->
§c_fmt
) {

871 
CAMIF_YCBCR420
:

872 
ba£
->
MSCOCR0SA
 &= ~(3<<1);

874 
addr_°¨t_Y
 = 
ba£
->
MSPRY0SA
;

875 
addr_°¨t_CB
 = 
addr_°¨t_Y
 + (
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
);

876 
addr_°¨t_CR
 = 
addr_°¨t_CB
 + (
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
*1/4);

878 
addr_íd_Y
 = 
addr_°¨t_Y
 + (
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
);

879 
addr_íd_CB
 = 
addr_°¨t_CB
 + (
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
*1/4);

880 
addr_íd_CR
 = 
addr_°¨t_CR
 + (
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
*1/4);

883 
CAMIF_YCBCR422
:

884 
ba£
->
MSCOCR0SA
 &= ~(3<<1);

885 
ba£
->
MSCOCR0SA
 |= 2<<1;

886 
ba£
->
MSCOCR0SA
 &= ~(3<<4);

887 
ba£
->
MSCOCR0SA
 |= 3<<4;

889 
addr_°¨t_Y
 = 
ba£
->
MSPRY0SA
;

890 
addr_°¨t_CB
 = 
addr_°¨t_Y
 + (
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
);

891 
addr_°¨t_CR
 = 
addr_°¨t_CB
 + (
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
*1/2);

893 
addr_íd_Y
 = 
addr_°¨t_Y
 + (
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
);

894 
addr_íd_CB
 = 
addr_°¨t_CB
 + (
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
*1/2);

895 
addr_íd_CR
 = 
addr_°¨t_CR
 + (
cfg
->
cis
->
sour˚_x
*cfg->cis->
sour˚_y
*1/2);

898 
CAMIF_RGB16
:

899 
CAMIF_RGB24
:

905 
ba£
->
MSPRY0SA
 = 
addr_°¨t_Y
;

906 
ba£
->
MSPRCB0SA
 = 
addr_°¨t_CB
;

907 
ba£
->
MSPRCR0SA
 = 
addr_°¨t_CR
;

909 
ba£
->
MSPRY0END
 = 
addr_íd_Y
;

910 
ba£
->
MSPRCB0END
 = 
addr_íd_CB
;

911 
ba£
->
MSPRCR0END
 = 
addr_íd_CR
;

914 
ba£
->
MSPRYOFF
 = 0;

915 
ba£
->
MSPRCBOFF
 = 0;

916 
ba£
->
MSPRCROFF
 = 0;

919 #ifde‡
SW_IPC


920 
ba£
->
MSPRWIDTH
.
AutoLﬂdE«bÀ
 = 1;

922 
ba£
->
MSPRWIDTH
.
AutoLﬂdE«bÀ
 = 0;

925 
ba£
->
MSPRWIDTH
.
MSPRHEIGHT
 = 
cfg
->
cis
->
sour˚_y
;

926 
ba£
->
MSPRWIDTH
.MSPRWIDTH = 
cfg
->
cis
->
sour˚_x
;

927  
ªt
;

928 
	}
}

930 
	$ˇmif_¥evõw_msdma_°¨t
(
ˇmif_cfg_t
 * 
cfg
)

934 
ba£
->
MSPRCTRL
.
ENVID_M_P
 = 1;

935 
ba£
->
MSPRCTRL
.
EOF_M_P
 == 0);

937 
	}
}

938 
EXPORT_SYMBOL
(
ˇmif_¥evõw_msdma_°¨t
);

941 
	$ˇmif_œ°_úq_í
(
ˇmif_cfg_t
 *
cfg
)

943 if(
cfg
->
ˇ±uª_íabÀ
 =
CAMIF_BOTH_DMA_ON
) {

944 
ba£
->
CICOCTRL
.
La°IRQEn_Co
 = 1;

946 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

947 
ba£
->
CICOCTRL
.
La°IRQEn_Co
 = 1;

949 
ba£
->
CIPRCTRL
.
La°IRQEn_Pr
 = 1;

952 
	}
}

954 
	$ˇmif_sˇÀr_öã∫Æ
(
u32
 
§cWidth
, u32 
d°Width
, u32 *
øtio
, u32 *
shi·
)

956 if(
§cWidth
>=64*
d°Width
) {

957 
	`__E
("Out ofÖrescalerÑange: srcWidth /dstWidth = %d(< 64)\n",

958 
§cWidth
/
d°Width
);

960 } if(
§cWidth
>=32*
d°Width
) {

961 *
øtio
=32;

962 *
shi·
=5;

963 } if(
§cWidth
>=16*
d°Width
) {

964 *
øtio
=16;

965 *
shi·
=4;

966 } if(
§cWidth
>=8*
d°Width
) {

967 *
øtio
=8;

968 *
shi·
=3;

969 } if(
§cWidth
>=4*
d°Width
) {

970 *
øtio
=4;

971 *
shi·
=2;

972 } if(
§cWidth
>=2*
d°Width
) {

973 *
øtio
=2;

974 *
shi·
=1;

976 *
øtio
=1;

977 *
shi·
=0;

980 
	}
}

983 
	$ˇmif_g_fifo_°©us
(
ˇmif_cfg_t
 *
cfg
)

986 i‡(
cfg
->
dma_ty≥
 =
CAMIF_CODEC
) {

987 i‡(
ba£
->
CICOSTATUS
.
OvFiY_Co
 || ba£->CICOSTATUS.
OvFiCb_Co
 || ba£->CICOSTATUS.
OvFiCr_Co
) {

989 
ba£
->
CIWDOFST
.
CÃOvCoFiY
 = 1;

990 
ba£
->
CIWDOFST
.
CÃOvCoFiCb
 = 1;

991 
ba£
->
CIWDOFST
.
CÃOvCoFiCr
 = 1;

993 
ba£
->
CIWDOFST
.
CÃOvCoFiY
 = 0;

994 
ba£
->
CIWDOFST
.
CÃOvCoFiCb
 = 0;

995 
ba£
->
CIWDOFST
.
CÃOvCoFiCr
 = 0;

998 } i‡(
cfg
->
dma_ty≥
 =
CAMIF_PREVIEW
) {

999 i‡(
ba£
->
CIPRSTATUS
.
OvFiCb_Pr
 || ba£->CIPRSTATUS.
OvFiCr_Pr
) {

1001 
ba£
->
CIWDOFST
.
CÃOvPrFiCb
 = 1;

1002 
ba£
->
CIWDOFST
.
CÃOvPrFiCr
 = 1;

1004 
ba£
->
CIWDOFST
.
CÃOvCoFiY
 = 0;

1005 
ba£
->
CIWDOFST
.
CÃOvCoFiCb
 = 0;

1006 
ba£
->
CIWDOFST
.
CÃOvCoFiCr
 = 0;

1011 
	}
}

1018 
	$ˇmif_wö_off£t
(
ˇmif_cis_t
 *
cis
)

1020 
u32
 
h
 = 
cis
->
wö_h‹_of°
;

1021 
u32
 
v
 = 
cis
->
wö_vî_of°
;

1022 
u32
 
h2
 = 
cis
->
wö_h‹_of°2
;

1023 
u32
 
v2
 = 
cis
->
wö_vî_of°2
;

1026 
ba£
->
CIWDOFST
.
CÃOvCoFiY
 = 1;

1027 
ba£
->
CIWDOFST
.
CÃOvCoFiCb
 = 1;

1028 
ba£
->
CIWDOFST
.
CÃOvCoFiCr
 = 1;

1029 
ba£
->
CIWDOFST
.
CÃOvPrFiCb
 = 1;

1030 
ba£
->
CIWDOFST
.
CÃOvPrFiCr
 = 1;

1031 
	`mem£t
(&
ba£
->
CIWDOFST
, 0, (base->CIWDOFST));

1033 if(!
h
 && !
v
) {

1034 
	`mem£t
(&
ba£
->
CIWDOFST2
, 0, (base->CIWDOFST2));

1038 
ba£
->
CIWDOFST
.
WöOfsEn
 = 1;

1039 
ba£
->
CIWDOFST
.
WöH‹Of°
 = 
h
;

1040 
ba£
->
CIWDOFST
.
WöVîOf°
 = 
v
;

1042 
ba£
->
CIWDOFST2
.
WöH‹Of°2
 = 
h2
;

1043 
ba£
->
CIWDOFST2
.
WöVîOf°2
 = 
v2
;

1046 
	}
}

1053 
	$ˇmif_pﬁ¨ôy
(
ˇmif_cis_t
 *
cis
)

1056 
ba£
->
CIGCTRL
.
InvPﬁPCLK
 = 0;

1057 
ba£
->
CIGCTRL
.
InvPﬁVSYNC
 = 0;

1058 
ba£
->
CIGCTRL
.
InvPﬁHREF
 = 0;

1060 i‡(
cis
->
pﬁ¨ôy_p˛k
)

1061 
ba£
->
CIGCTRL
.
InvPﬁPCLK
 = 1;

1063 i‡(
cis
->
pﬁ¨ôy_vsync
)

1064 
ba£
->
CIGCTRL
.
InvPﬁVSYNC
 = 1;

1066 i‡(
cis
->
pﬁ¨ôy_hªf
)

1067 
ba£
->
CIGCTRL
.
InvPﬁHREF
 = 1;

1068 
	}
}

1071 
	$ˇmif_£tup_fimc_c⁄åﬁÀr
(
ˇmif_cfg_t
 *
cfg
)

1073 if(
	`ˇmif_mÆloc
(
cfg
) ) {

1074 
	`__E
("Instead of using consistent_alloc()\n"

1079 
	`ˇmif_£tup_öçut_∑th
(
cfg
);

1081 if(
	`ˇmif_£tup_sˇÀr
(
cfg
)) {

1082 
	`__E
("s3c_camif.c:Preview Scaler, Change WinHorOfset or Target Size\n");

1086 
	`ˇmif_èrgë_fmt
(
cfg
);

1088 i‡(
	`ˇmif_dma_bur°
(
cfg
)) {

1089 
	`__E
("s3c_camif.c:DMA Busrt Length Error \n");

1093 
	`ˇmif_£tup_ouçut_∑th
(
cfg
);

1096 
	}
}

1098 
ölöe
 
	$ˇmif_dy«mic_˛o£
(
ˇmif_cfg_t
 *
cfg
)

1100 if(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

1101 if(
cfg
->
öãæa˚_ˇ±uª
 == 1)

1105 
	`ˇmif_demÆloc
(
cfg
);

1107 
	}
}

1110 
	$ˇmif_£tup_öçut_∑th
(
ˇmif_cfg_t
 *
cfg
)

1113 if(
cfg
->
öput_ch™√l
 =
CAMERA_INPUT
 ){

1114 
	`ˇmif_£tup_ˇmîa_öput
(
cfg
);

1116 
	`ˇmif_£tup_msdma_öput
(
cfg
);

1120 
	}
}

1122 
	$ˇmif_£tup_ˇmîa_öput
(
ˇmif_cfg_t
 *
cfg
)

1125 
	`ˇmif_wö_off£t
(
cfg
->
cis
);

1126 
	`ˇmif_pﬁ¨ôy
(
cfg
->
cis
);

1128 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

1129 
ba£
->
MSCOCTRL
.
SEL_DMA_CAM_C
 = 0;

1130 } if(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
){

1131 
ba£
->
MSCOCR0SA
 &= ~(1<<3);

1133 
	`__E
("camif_setup_camera_input : CAMERA:DMA_TYPE Wrong \n");

1137 
	}
}

1140 
	$ˇmif_£tup_msdma_öput
(
ˇmif_cfg_t
 *
cfg
)

1143 if(
cfg
->
öput_ch™√l
 =
MSDMA_FROM_PREVIEW
)

1144 
	`ˇmif_£t_¥evõw_msdma
(
cfg
);

1146 
	`ˇmif_£t_codec_msdma
(
cfg
);

1148 
	}
}

1151 
	$ˇmif_£tup_ouçut_∑th
(
ˇmif_cfg_t
 *
cfg
)

1153 if(
cfg
->
ouçut_ch™√l
 =
CAMIF_OUT_FIFO
)

1154 
	`ˇmif_£tup_lcd_fifo_ouçut
(
cfg
);

1156 
	`ˇmif_£tup_mem‹y_ouçut
(
cfg
);

1160 
	}
}

1163 
	$ˇmif_èrgë_¨ó
(
ˇmif_cfg_t
 *
cfg
)

1165 
u32
 
ª˘
 = 
cfg
->
èrgë_x
 * cfg->
èrgë_y
;

1167 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

1168 
ba£
->
CICOTAREA
 = 
ª˘
;

1171 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

1172 
ba£
->
CIPRTAREA
 = 
ª˘
;

1176 
	}
}

1178 
ölöe
 
	$ˇmif_hw_ªg
(
ˇmif_cfg_t
 *
cfg
)

1180 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
) {

1181 
ba£
->
CICOSCPRERATIO
.
SHÁ˘‹_Co
 = 
cfg
->
sc
.
shÁ˘‹
;

1182 
ba£
->
CICOSCPRERATIO
.
PªH‹R©io_Co
 = 
cfg
->
sc
.
¥ehøtio
;

1183 
ba£
->
CICOSCPRERATIO
.
PªVîR©io_Co
 = 
cfg
->
sc
.
¥evøtio
;

1184 
ba£
->
CICOSCPREDST
.
PªD°Width_Co
 = 
cfg
->
sc
.
¥ed°_x
;

1185 
ba£
->
CICOSCPREDST
.
PªD°Height_Co
 = 
cfg
->
sc
.
¥ed°_y
;

1188 i‡(
cfg
->
sc
.
sˇÀrby∑ss
)

1189 
ba£
->
CICOSCCTRL
.
SˇÀrBy∑ss_Co
 = 1;

1192 i‡(
cfg
->
d°_fmt
 & 
CAMIF_RGB24
) {

1193 
ba£
->
CICOSCCTRL
.
OutRGB_FMT_Co
 = 2;

1195 
ba£
->
CICOSCCTRL
.
OutRGB_FMT_Co
 = 0;

1198 i‡(
cfg
->
sc
.
sˇÀup_h
 & cfg->sc.
sˇÀup_v
) {

1199 
ba£
->
CICOSCCTRL
.
SˇÀUp_H_Co
 = 1;

1200 
ba£
->
CICOSCCTRL
.
SˇÀUp_V_Co
 = 1;

1203 
ba£
->
CICOSCCTRL
.
MaöH‹R©io_Co
 = 
cfg
->
sc
.
maöhøtio
;

1204 
ba£
->
CICOSCCTRL
.
MaöVîR©io_Co
 = 
cfg
->
sc
.
maövøtio
;

1206 } i‡(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

1207 
ba£
->
CIPRSCPRERATIO
.
SHÁ˘‹_Pr
 = 
cfg
->
sc
.
shÁ˘‹
;

1208 
ba£
->
CIPRSCPRERATIO
.
PªH‹R©io_Pr
 = 
cfg
->
sc
.
¥ehøtio
;

1209 
ba£
->
CIPRSCPRERATIO
.
PªVîR©io_Pr
 = 
cfg
->
sc
.
¥evøtio
;

1210 
ba£
->
CIPRSCPREDST
.
PªD°Width_Pr
 = 
cfg
->
sc
.
¥ed°_x
;

1211 
ba£
->
CIPRSCPREDST
.
PªD°Height_Pr
 = 
cfg
->
sc
.
¥ed°_y
;

1214 i‡(
cfg
->
d°_fmt
 & 
CAMIF_RGB24
) {

1215 
ba£
->
CIPRSCCTRL
.
OutRGB_FMT_Pr
 = 2;

1217 
ba£
->
CIPRSCCTRL
.
OutRGB_FMT_Pr
 = 0;

1220 i‡(
cfg
->
sc
.
sˇÀup_h
 & cfg->sc.
sˇÀup_v
) {

1221 
ba£
->
CIPRSCCTRL
.
SˇÀUp_H_Pr
 = 1;

1222 
ba£
->
CIPRSCCTRL
.
SˇÀUp_V_Pr
 = 1;

1225 
ba£
->
CIPRSCCTRL
.
MaöH‹R©io_Pr
 = 
cfg
->
sc
.
maöhøtio
;

1226 
ba£
->
CIPRSCCTRL
. 
MaöVîR©io_Pr
 = 
cfg
->
sc
.
maövøtio
;

1228 
	`__E
("s3c_camif.c : CAMERA:DMA_TYPE Wrong \n");

1232 
	}
}

1236 
	$ˇmif_£tup_sˇÀr
(
ˇmif_cfg_t
 *
cfg
)

1238 
tx
 = 
cfg
->
èrgë_x
, 
ty
=cfg->
èrgë_y
;

1239 
sx
, 
sy
;

1241 i‡(
tx
 <0 || 
ty
<= 0) {

1242 
	`__E
("InvalidÅarget size \n");

1246 
sx
 = 
cfg
->
cis
->
sour˚_x
 - (cfg->cis->
wö_h‹_of°
 + cfg->cis->
wö_h‹_of°2
);

1247 
sy
 = 
cfg
->
cis
->
sour˚_y
 - (cfg->cis->
wö_vî_of°
 + cfg->cis->
wö_h‹_of°2
);

1249 i‡(
sx
 <0 || 
sy
<= 0) {

1250 
	`__E
("Invalid source size \n");

1253 
cfg
->
sc
.
modifõd_§c_x
 = 
sx
;

1254 
cfg
->
sc
.
modifõd_§c_y
 = 
sy
;

1257 
	`ˇmif_sˇÀr_öã∫Æ
(
sx
, 
tx
, &
cfg
->
sc
.
¥ehøtio
,&cfg->sc.
hÁ˘‹
);

1258 
	`ˇmif_sˇÀr_öã∫Æ
(
sy
, 
ty
, &
cfg
->
sc
.
¥evøtio
,&cfg->sc.
vÁ˘‹
);

1260 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

1261 i‡–(
sx
 /
cfg
->
sc
.
¥ehøtio
) <= 640 ) {

1263 
	`__I
("Internal PreviewÜine buffer is 640Öixels\n");

1267 
cfg
->
sc
.
shÁ˘‹
 = 10-(cfg->sc.
hÁ˘‹
+cfg->sc.
vÁ˘‹
);

1269 
cfg
->
sc
.
¥ed°_x
 = 
sx
 / cfg->sc.
¥ehøtio
;

1270 
cfg
->
sc
.
¥ed°_y
 = 
sy
 / cfg->sc.
¥evøtio
;

1273 
cfg
->
sc
.
maöhøtio
 = (
sx
 << 8)/(
tx
 << cfg->sc.
hÁ˘‹
);

1274 
cfg
->
sc
.
maövøtio
 = (
sy
 << 8)/(
ty
 << cfg->sc.
vÁ˘‹
);

1276 
	`__D
(" sx %d, sy %dÅx %dÅy %d \n",
sx
,
sy
,
tx
,
ty
);

1277 
	`__D
(" hÁ˘‹ %d vÁ˘‹ %d \n",
cfg
->
sc
.
hÁ˘‹
,cfg->sc.
vÁ˘‹
);

1278 
	`__D
("Öªhøtiÿ%dÖªvøti⁄ %d \n",
cfg
->
sc
.
¥ehøtio
,cfg->sc.
¥evøtio
);

1279 
	`__D
(" maöhøtiÿ%d maövøtiÿ%d \n",
cfg
->
sc
.
maöhøtio
,cfg->sc.
maövøtio
);

1281 
cfg
->
sc
.
sˇÀup_h
 = (
sx
 <
tx
) ? 1: 0;

1282 
cfg
->
sc
.
sˇÀup_v
 = (
sy
 <
ty
) ? 1: 0;

1284 i‡–
cfg
->
sc
.
sˇÀup_h
 !cfg->sc.
sˇÀup_v
) {

1285 
	`__E
("scaleup_h must be sameÅo scaleup_v \n");

1286 
	`__E
(" sx %d, sy %dÅx %dÅy %d \n",
sx
,
sy
,
tx
,
ty
);

1287 
	`__E
(" hÁ˘‹ %d vÁ˘‹ %d \n",
cfg
->
sc
.
hÁ˘‹
,cfg->sc.
vÁ˘‹
);

1288 
	`__E
("Öªhøtiÿ%dÖªvøti⁄ %d \n",
cfg
->
sc
.
¥ehøtio
,cfg->sc.
¥evøtio
);

1289 
	`__E
(" maöhøtiÿ%d maövøtiÿ%d \n",
cfg
->
sc
.
maöhøtio
,cfg->sc.
maövøtio
);

1290 
	`__E
(" sˇÀup_h %d sˇÀup_v %d \n",
cfg
->
sc
.
sˇÀup_h
,cfg->sc.
sˇÀup_v
);

1292 
	`ˇmif_hw_ªg
(
cfg
);

1293 
	`ˇmif_èrgë_¨ó
(
cfg
);

1296 
	}
}

1303 
	$ˇmif_g_bsize
(
u32
 
hsize
, u32 *
mbur°
, u32 *
rbur°
)

1305 
u32
 
tmp
;

1307 
tmp
 = (
hsize
>>2) & 0xf;

1308 
tmp
) {

1310 *
mbur°
=16;

1311 *
rbur°
=16;

1314 *
mbur°
=16;

1315 *
rbur°
=4;

1318 *
mbur°
=16;

1319 *
rbur°
=8;

1322 
tmp
=(
hsize
/4)%8;

1323 
tmp
) {

1325 *
mbur°
=8;

1326 *
rbur°
=8;

1329 *
mbur°
=8;

1330 *
rbur°
=4;

1332 *
mbur°
=4;

1333 
tmp
=(
hsize
/4)%4;

1334 *
rbur°
(
tmp
) ?Åmp: 4;

1339 
	}
}

1353 
	#BURST_ERR
 1

	)

1354 
	$ˇmif_dma_bur°
(
ˇmif_cfg_t
 *
cfg
)

1357 
u32
 
ybur°_m
, 
ybur°_r
;

1358 
u32
 
cbur°_m
, 
cbur°_r
;

1359 
width
 = 
cfg
->
èrgë_x
;

1361 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_CODEC
 ) {

1362 if((
cfg
->
d°_fmt
 =
CAMIF_RGB16
)||(cfg->d°_fmà=
CAMIF_RGB24
)) {

1363 if(
cfg
->
d°_fmt
 =
CAMIF_RGB24
) {

1364 i‡(
width
 %2 != 0 )

1365  
BURST_ERR
;

1366 
	`ˇmif_g_bsize
(
width
*4,&
ybur°_m
,&
ybur°_r
);

1369 i‡((
width
/2) %2 != 0 )

1370  
BURST_ERR
;

1371 
	`ˇmif_g_bsize
(
width
*2,&
ybur°_m
,&
ybur°_r
);

1374 if(
cfg
->
d°_fmt
 ==
CAMIF_RGB24
) {

1375 
ba£
->
CICOCTRL
.
Ybur°1_Co
 = 
ybur°_m
/2;

1376 
ba£
->
CICOCTRL
.
Ybur°2_Co
 = 
ybur°_r
/4;

1377 
ba£
->
CICOCTRL
.
Cbur°1_Co
 = 4;

1378 
ba£
->
CICOCTRL
.
Cbur°2_Co
 = 2;

1380 
ba£
->
CICOCTRL
.
Ybur°1_Co
 = 
ybur°_m
/2;

1381 
ba£
->
CICOCTRL
.
Ybur°2_Co
 = 
ybur°_r
/2;

1382 
ba£
->
CICOCTRL
.
Cbur°1_Co
 = 4;

1383 
ba£
->
CICOCTRL
.
Cbur°2_Co
 = 2;

1387 i‡(
width
 %16 != 0 )

1388  
BURST_ERR
;

1390 #ifde‡
TOMTOM_INTERLACE_MODE


1391 
	`ˇmif_g_bsize
(
width
*2,&
ybur°_m
,&
ybur°_r
);

1392 
ybur°_m
 = yburst_m >> 1;

1393 
ybur°_r
 = yburst_r >> 1;

1394 
cbur°_m
 = 
ybur°_m
 >> 1;

1395 
cbur°_r
 = 
ybur°_r
 >> 1;

1396 if(
cfg
->
öãæa˚_ˇ±uª
)

1397 *(
v32
*)&
ba£
->
CICOSCOSY
 = 
width
;

1399 
	`ˇmif_g_bsize
(
width
,&
ybur°_m
,&
ybur°_r
);

1400 
	`ˇmif_g_bsize
(
width
/2,&
cbur°_m
,&
cbur°_r
);

1402 
ba£
->
CICOCTRL
.
Ybur°1_Co
 = 
ybur°_m
;

1403 
ba£
->
CICOCTRL
.
Cbur°1_Co
 = 
cbur°_m
;

1404 
ba£
->
CICOCTRL
.
Ybur°2_Co
 = 
ybur°_r
;

1405 
ba£
->
CICOCTRL
.
Cbur°2_Co
 = 
cbur°_r
;

1409 i‡(
cfg
->
dma_ty≥
 & 
CAMIF_PREVIEW
) {

1410 if(
cfg
->
d°_fmt
 =
CAMIF_RGB24
) {

1411 i‡(
width
 %2 != 0 )

1412  
BURST_ERR
;

1413 
	`ˇmif_g_bsize
(
width
*4,&
ybur°_m
,&
ybur°_r
);

1415 i‡((
width
/2Ë%2 !0 )  
BURST_ERR
;

1416 
	`ˇmif_g_bsize
(
width
*2,&
ybur°_m
,&
ybur°_r
);

1419 
ba£
->
CICOCTRL
.
Ybur°1_Co
 = 
ybur°_m
;

1420 
ba£
->
CICOCTRL
.
Ybur°2_Co
 = 
ybur°_r
;

1424 
	}
}

1431 
	$ˇmif_ª£t
(
is
, 
dñay
)

1436 
is
) {

1437 
CAMIF_RESET
:

1438 if(
ba£
->
CISRCFMT
.
ITU601_656n
) {

1439 
ba£
->
CIGCTRL
.
SwR°
 = 1;

1440 
ba£
->
CIGCTRL
.
IRQ_Levñ
 = 1;

1441 
	`mdñay
(1);

1442 
ba£
->
CIGCTRL
.
SwR°
 = 0;

1444 
ba£
->
CISRCFMT
.
ITU601_656n
 = 1;

1445 
ba£
->
CIGCTRL
.
SwR°
 = 1;

1446 
ba£
->
CIGCTRL
.
IRQ_Levñ
 = 1;

1447 
	`mdñay
(1);

1448 
ba£
->
CIGCTRL
.
SwR°
 = 0;

1449 
ba£
->
CISRCFMT
.
ITU601_656n
 = 0;

1453 
CAMIF_EX_RESET_AH
:

1454 
ba£
->
CIGCTRL
.
CamR°
 = 1;

1455 
	`udñay
(200);

1456 
	`udñay
(
dñay
);

1457 
ba£
->
CIGCTRL
.
CamR°
 = 1;

1460 
CAMIF_EX_RESET_AL
:

1461 
ba£
->
CIGCTRL
.
CamR°
 = 0;

1462 
	`udñay
(200);

1463 
ba£
->
CIGCTRL
.
CamR°
 = 1;

1464 
	`udñay
(
dñay
);

1465 
ba£
->
CIGCTRL
.
CamR°
 = 0;

1471 
	}
}

1474 
	$˛ór_ˇmif_úq
(
úq
)

1476 if(
úq
 =
IRQ_CAMIF_C
) {

1477 
ba£
->
CIGCTRL
.
IRQ_CLR_c
 = 1;

1478 } i‡(
úq
 =
IRQ_CAMIF_P
) {

1479 
ba£
->
CIGCTRL
.
IRQ_CLR_p
 = 1;

1481 
	}
}

1488 
	$ˇmif_£tup_£ns‹
()

1490 
	`ˇmif_ª£t
(
CAMIF_RESET
, 0);

1493 
	`s3c_gpio_cfgpö
(
S3C_GPF5
, 
S3C_GPF5_CAMIF_YDATA0
);

1494 
	`s3c_gpio_cfgpö
(
S3C_GPF6
, 
S3C_GPF6_CAMIF_YDATA1
);

1495 
	`s3c_gpio_cfgpö
(
S3C_GPF7
, 
S3C_GPF7_CAMIF_YDATA2
);

1496 
	`s3c_gpio_cfgpö
(
S3C_GPF8
, 
S3C_GPF8_CAMIF_YDATA03
);

1497 
	`s3c_gpio_cfgpö
(
S3C_GPF9
, 
S3C_GPF9_CAMIF_YDATA4
);

1498 
	`s3c_gpio_cfgpö
(
S3C_GPF10
, 
S3C_GPF10_CAMIF_YDATA5
);

1499 
	`s3c_gpio_cfgpö
(
S3C_GPF11
, 
S3C_GPF11_CAMIF_YDATA06
);

1500 
	`s3c_gpio_cfgpö
(
S3C_GPF12
, 
S3C_GPF12_CAMIF_YDATA7
);

1501 
	`s3c_gpio_cfgpö
(
S3C_GPF2
, 
S3C_GPF2_CAMIF_CLK
);

1502 
	`s3c_gpio_cfgpö
(
S3C_GPF4
, 
S3C_GPF4_CAMIF_VSYNC
);

1503 
	`s3c_gpio_cfgpö
(
S3C_GPF1
, 
S3C_GPF1_CAMIF_HREF
);

1504 
	`s3c_gpio_cfgpö
(
S3C_GPF0
, 
S3C_GPF0_CAMIF_CLK
);

1505 
	`s3c_gpio_cfgpö
(
S3C_GPF3
, 
S3C_GPF3_CAMIF_RST
);

1506 
	`wrôñ
(0x0, 
S3C_GPFPU
);

1508 #i‡
	`deföed
(
CONFIG_VIDEO_SAMSUNG_S5K3AA
)

1509 
	`s3c_ˇmif_£t_˛ock
(48000000);

1510 #ñi‡(
	`deföed
(
CONFIG_VIDEO_OV9650
Ë|| deföed(
CONFIG_VIDEO_SAA7113
))

1511 
	`s3c_ˇmif_£t_˛ock
(24000000);

1513 
	`s3c_ˇmif_£t_˛ock
(19000000);

1517 
	`ˇmif_ª£t
(
CAMIF_EX_RESET_AH
,1000);

1518 
	}
}

1520 
s3c_¥i‹ôy_t
 *
	g¥i‹ôy
 = 
S3C_PRIORITY
;

1521 
s3c_¥i‹ôy_t
 
	gúq_ﬁd_¥i‹ôy
;

1523 
	$ˇmif_hw_˛o£
(
ˇmif_cfg_t
 *
cfg
)

1525 *
¥i‹ôy
 = 
úq_ﬁd_¥i‹ôy
;

1526 
sysc⁄
->
SCLK_GATE
.
SCLK_CAM
 = 0;

1527 
	}
}

1529 
	$ˇmif_hw_›í
(
ˇmif_cis_t
 *
cis
)

1531 
	`ˇmif_sour˚_fmt
(
cis
);

1532 
	`ˇmif_wö_off£t
(
cis
);

1534 
úq_ﬁd_¥i‹ôy
 = *
¥i‹ôy
;

1535 
¥i‹ôy
->
ARB_SEL0
 = 0;

1536 
¥i‹ôy
->
ARB_SEL0
 = 1;

1537 
¥i‹ôy
->
ARB_MODE1
 = 0;

1538 
	}
}

1540 
	$ˇmif_ªgi°î_cis
(
i2c_˛õ¡
 *
±r
)

1542 
s32
 
i
;

1543 
ˇmif_cis_t
 *
cis
 = (
	`ty≥of
(cis)Ë(
±r
->
d©a
);

1545 
	`muãx_öô
(&
cis
->
lock
);

1546 
cis
->
°©us
 |
P_NOT_WORKING
;

1547 
	`ˇmif_hw_›í
(
cis
);

1549 
i
 = 0; i < 
	`ARRAY_SIZE
(
fimc
); i++) {

1550 
fimc
[
i
].
cis
 = cis;

1552 
	}
}

1554 
	$ˇmif_uƒegi°î_cis
(
i2c_˛õ¡
 *
±r
)

1556 
ˇmif_cis_t
 *
cis
 = (
	`ty≥of
(cis)Ë(
±r
->
d©a
);

1557 
cis
->
öô_£ns‹
 = 0;

1558 
	}
}

	@s3c_camif.h

14 #i‚de‡
__FIMC3X_CAMIF_H_


15 
	#__FIMC3X_CAMIF_H_


	)

17 #ifde‡
__KERNEL__


20 
	~<löux/videodev.h
>

21 
	~<löux/videodev2.h
>

22 
	~<asm/ty≥s.h
>

23 
	~<löux/i2c.h
>

24 
	~<löux/video_decodî.h
>

28 #i‚de‡
O_NONCAP


29 
	#O_NONCAP
 
O_TRUNC


	)

33 #i‡
deföed
 (
CONFIG_CPU_S3C2443
)

34 
	#MEM_SIZE
 0x04000000

	)

35 #ñi‡(
deföed
(
CONFIG_CPU_S3C6400
Ë|| deföed(
CONFIG_CPU_S3C6410
))

36 
	#MEM_SIZE
 0x08000000

	)

39 
	#P_DEDICATED_MEM
 1

	)

40 
	#C_DEDICATED_MEM
 1

	)

41 
	#RESERVE_MEM
 15*1024*1024

	)

42 
	#YUV_MEM
 10*1024*1024

	)

43 
	#RGB_MEM
 (
RESERVE_MEM
 - 
YUV_MEM
)

	)

45 
	#CAMIF_NUM
 2

	)

48 
	#CAMIF_STARTED
 (1<<1)

	)

49 
	#CAMIF_STOPPED
 (1<<2)

	)

50 
	#CAMIF_INT_HAPPEN
 (1<<3)

	)

53 
	#CAMIF_1°_INT
 (1<<7)

	)

54 
	#CAMIF_Xth_INT
 (1<<8)

	)

55 
	#CAMIF_Yth_INT
 (1<<9)

	)

56 
	#CAMIF_Zth_INT
 (1<<10)

	)

57 
	#CAMIF_NORMAL_INT
 (1<<11)

	)

58 
	#CAMIF_DUMMY_INT
 (1<<12)

	)

59 
	#CAMIF_PENDING_INT
 0

	)

63 
	#CAMIF_RESET
 (1<<0)

	)

64 
	#CAMIF_EX_RESET_AL
 (1<<1Ë

	)

65 
	#CAMIF_EX_RESET_AH
 (1<<2Ë

	)

67 
	#SENSOR_INIT
 (1<<0)

	)

68 
	#USER_ADD
 (1<<1)

	)

69 
	#USER_EXIT
 (1<<2)

	)

70 
	#SENSOR_VGA
 (1<<3)

	)

71 
	#SENSOR_SVGA
 (1<<10)

	)

72 
	#SENSOR_SXGA
 (1<<4)

	)

73 
	#SENSOR_UXGA
 (1<<11)

	)

74 
	#SENSOR_ZOOMIN
 (1<<5)

	)

75 
	#SENSOR_ZOOMOUT
 (1<<6)

	)

76 
	#SENSOR_MIRROR
 (1<<7)

	)

77 
	#SENSOR_AF
 (1<<8)

	)

78 
	#SENSOR_WB
 (1<<9)

	)

79 
	#SENSOR_QVGA
 (1<<12)

80 

	)

82 
	eˇmif_ôu_fmt
 {

83 
	mCAMIF_ITU601
 = 1,

84 
	mCAMIF_ITU656
 = 0

88 
	eˇmif_dma_ty≥
 {

89 
	mCAMIF_PREVIEW
 = (1<<0),

90 
	mCAMIF_CODEC
 = (1<<1),

93 
	eˇmif_‹dî422
 {

95 
	mCAMIF_YCBYCR
 = 0,

96 
	mCAMIF_YCRYCB
 = (1<<14),

97 
	mCAMIF_CBYCRY
 = (1<<15),

98 
	mCAMIF_CRYCBY
 = (1<<14)|(1<<15),

100 
	mCAMIF_YCBYCR
 = 0,

101 
	mCAMIF_YCRYCB
 = 1,

102 
	mCAMIF_CBYCRY
 = 2,

103 
	mCAMIF_CRYCBY
 = 3,

107 
	eÊù_mode
 {

108 
	mCAMIF_FLIP
 = 0,

109 
	mCAMIF_ROTATE_90
 = (1<<13),

110 
	mCAMIF_FLIP_X
 = (1<<14),

111 
	mCAMIF_FLIP_Y
 = (1<<15),

112 
	mCAMIF_FLIP_MIRROR
 = (1<<14)|(1<<15),

113 
	mCAMIF_FLIP_ROTATE_270
 = (1<<13)|(1<<14)|(1<<15),

116 
	eˇmif_fmt
 {

117 
	mCAMIF_YCBCR420
 = (1<<0),

118 
	mCAMIF_YCBCR422
 = (1<<1),

120 
	mCAMIF_RGB16
 = (1<<2),

121 
	mCAMIF_RGB24
 = (1<<3),

122 
	mCAMIF_RGB32
 = (1<<4),

125 
	eˇmif_ˇ±urög
 {

126 
	mCAMIF_BOTH_DMA_ON
 = (1<<4),

127 
	mCAMIF_DMA_ON
 = (1<<3),

128 
	mCAMIF_BOTH_DMA_OFF
 = (1<<1),

129 
	mCAMIF_DMA_OFF
 = (1<<0),

132 
	mCAMIF_DMA_OFF_L_IRQ
= (1<<5),

135 
	eimage_ef„˘
 {

136 
	mCAMIF_BYPASS
 = 0,

137 
	mCAMIF_ARBITRARY_CB_CR
,

138 
	mCAMIF_NEGATIVE
,

139 
	mCAMIF_ART_FREEZE
,

140 
	mCAMIF_EMBOSSING
 ,

141 
	mCAMIF_SILHOUETTE
,

145 
	eöput_ch™√l
{

146 
	mCAMERA_INPUT
 = 0,

147 
	mMSDMA_FROM_CODEC
= 1,

148 
	mMSDMA_FROM_PREVIEW
 = 2,

151 
	eouçut_ch™√l
{

152 
	mCAMIF_OUT_PP
 = 0,

153 
	mCAMIF_OUT_FIFO
= 1,

156 
	efõld_°©us
 {

157 
	mFIELD_EVEN
 = 0,

158 
	mFIELD_ODD
 = 1,

161 
	sˇmif_≥rf‹m™˚


163 
	m‰ames
;

164 
	m‰amesdr›≥d
;

165 
__u64
 
	mbyãsö
;

166 
__u64
 
	mbyãsout
;

167 
__u32
 
	mª£rved
[4];

168 } 
	tˇmif_≥rf_t
;

172 
dma_addr_t
 
	mphys_y
;

173 
dma_addr_t
 
	mphys_cb
;

174 
dma_addr_t
 
	mphys_¸
;

175 
u8
 *
	mvút_y
;

176 
u8
 *
	mvút_cb
;

177 
u8
 *
	mvút_¸
;

178 
dma_addr_t
 
	mphys_rgb
;

179 
u8
 *
	mvút_rgb
;

180 }
	timg_buf_t
;

185 
u32
 
	mmodifõd_§c_x
;

186 
u32
 
	mmodifõd_§c_y
;

187 
u32
 
	mhÁ˘‹
;

188 
u32
 
	mvÁ˘‹
;

189 
u32
 
	mshÁ˘‹
;

190 
u32
 
	m¥ehøtio
;

191 
u32
 
	m¥evøtio
;

192 
u32
 
	m¥ed°_x
;

193 
u32
 
	m¥ed°_y
;

194 
u32
 
	msˇÀup_h
;

195 
u32
 
	msˇÀup_v
;

196 
u32
 
	mmaöhøtio
;

197 
u32
 
	mmaövøtio
;

198 
u32
 
	msˇÀrby∑ss
;

199 
u32
 
	mzoom_ö_˙t
;

200 } 
	tsˇÀr_t
;

203 
	ev4l2_°©us
 {

204 
	mCAMIF_V4L2_INIT
 = (1<<0),

205 
	mCAMIF_v4L2_DIRTY
 = (1<<1),

210 
	#PWANT2START
 (1<<0)

	)

211 
	#CWANT2START
 (1<<1)

	)

212 
	#BOTH_STARTED
 (
PWANT2START
|
CWANT2START
)

	)

213 
	#P_NOT_WORKING
 (1<<4)

	)

214 
	#C_WORKING
 (1<<5)

	)

215 
	#P_WORKING
 (1<<6)

	)

216 
	#C_NOT_WORKING
 (1<<7)

	)

219 
	#FORMAT_FLAGS_DITHER
 0x01

	)

220 
	#FORMAT_FLAGS_PACKED
 0x02

	)

221 
	#FORMAT_FLAGS_PLANAR
 0x04

	)

222 
	#FORMAT_FLAGS_RAW
 0x08

	)

223 
	#FORMAT_FLAGS_CrCb
 0x10

	)

227 
muãx
 
	mlock
;

228 
ˇmif_ôu_fmt
 
	mITU
;

229 
ˇmif_‹dî422
 
	m‹dî422_CAM
;

230 
u32
 
	mwö_h‹_of°
;

231 
u32
 
	mwö_vî_of°
;

232 
u32
 
	mwö_h‹_of°2
;

233 
u32
 
	mwö_vî_of°2
;

234 
u32
 
	mˇm˛k
;

236 
u32
 
	msour˚_x
;

237 
u32
 
	msour˚_y
;

238 
u32
 
	mpﬁ¨ôy_p˛k
;

239 
u32
 
	mpﬁ¨ôy_vsync
;

240 
u32
 
	mpﬁ¨ôy_hªf
;

241 
i2c_˛õ¡
 *
	m£ns‹
;

242 
u32
 
	mu£r
;

243 
u32
 
	múq_ﬁd_¥i‹ôy
;

244 
u32
 
	m°©us
;

245 
u32
 
	möô_£ns‹
;

246 
u32
 
	mª£t_ty≥
;

247 
u32
 
	mª£t_udñay
;

248 
u32
 
	mzoom_ö_˙t
;

249 } 
	tˇmif_cis_t
;

256 
	sv4l2
 {

257 
v4l2_fmtdesc
 *
	mfmtdesc
;

258 
v4l2_‰amebuf„r
 
	m‰mbuf
;

259 
v4l2_öput
 *
	möput
;

260 
v4l2_öput
 *
	mouçut
;

261 
v4l2_°©us
 
	m°©us
;

262 } 
	tv4l2_t
;

265 
	sˇmif_c_t
 {

266 
video_devi˚
 *
	mv
;

268 
v4l2_t
 
	mv2
;

269 
ˇmif_cis_t
 *
	mcis
;

271 
waô_queue_hód_t
 
	mwaôq
;

272 
u32
 
	m°©us
;

273 
u32
 
	mfsm
;

274 
u32
 
	m›í_cou¡
;

275 
	múq
;

276 
	msh‹äame
[16];

277 
u32
 
	mèrgë_x
;

278 
u32
 
	mèrgë_y
;

279 
sˇÀr_t
 
	msc
;

280 
Êù_mode
 
	mÊù
;

281 
image_ef„˘
 
	mef„˘
;

282 
ˇmif_dma_ty≥
 
	mdma_ty≥
;

284 
u8
 *
	mµ_vút_buf
;

285 
dma_addr_t
 
	mµ_phys_buf
;

286 
u32
 
	mµ_tŸÆsize
;

287 
u32
 
	mµ_num
;

288 
img_buf_t
 
	mimg_buf
[4];

289 
ˇmif_fmt
 
	m§c_fmt
;

290 
ˇmif_fmt
 
	md°_fmt
;

291 
ˇmif_ˇ±urög
 
	mˇ±uª_íabÀ
;

292 
ˇmif_≥rf_t
 
	m≥rf
;

293 
u32
 
	mnow_‰ame_num
;

294 
u32
 
	mauto_ª°¨t
;

295 
	möput_ch™√l
;

296 
	mouçut_ch™√l
;

297 *
	mŸhî
;

298 
u32
 
	möãæa˚_ˇ±uª
;

299 
fõld_°©us
 
	mcheck_eví_odd
;

300 
u32
 
	mmsdma_°©us
;

301 } 
	tˇmif_cfg_t
;

304 
	#CAMIF_DEBUG


	)

305 #ifde‡
CAMIF_DEBUG


307 
	#DPRINTK
(
fmt
, 
¨gs
...Ë
	`¥ötk
(
KERN_INFO
 "%s: " fmt, 
__FUNCTION__
 , ##árgs)

308 #ñ£

	)

309 
	#DPRINTK
(
fmt
, 
¨gs
...)

	)

313 #ifde‡
CAMIF_DEBUG


314 
	#as£π
(
ex¥
) \

315 if(!(
ex¥
)) { \

316 
	`¥ötk
( "Assertion failed! %s,%s,%s,line=%d\n", \

317 #ex¥,
__FILE__
,
__FUNCTION__
,
__LINE__
); \

318 }

	)

320 
	#as£π
(
ex¥
)

	)

328 
	#CMD_CAMERA_INIT
 (1<<0)

	)

329 
	#CMD_SENSOR_VGA_MODE
 (1<<1)

	)

330 
	#CMD_SENSOR_SXGA_MODE
 (1<<2)

	)

331 
	#CMD_SENSOR_SVGA_MODE
 (1<<10)

	)

332 
	#CMD_SENSOR_UXGA_MODE
 (1<<11)

	)

333 
	#CMD_PICTURE_MODE
 (1<<3)

	)

334 
	#CMD_CAMCODER_MODE
 (1<<4)

	)

335 
	#CMD_SENSOR_ZOOMIN
 (1<<5)

	)

336 
	#CMD_SENSOR_ZOOMOUT
 (1<<6)

	)

337 
	#CMD_SENSOR_MIRROR
 (1<<7)

	)

338 
	#CMD_SENSOR_AF
 (1<<8)

	)

339 
	#CMD_SENSOR_WB
 (1<<9)

	)

340 
	#CMD_SENSOR_IMAGE_EFFECT
 (1<<12)

	)

341 
	#CMD_POSTPROCESSING_INIT
 (1<<13)

	)

346 
	m§c_x
;

347 
	m§c_y
;

348 
	md°_x
;

349 
	md°_y
;

350 
	m§c_fmt
;

351 
	md°_fmt
;

352 
	mÊù
;

353 
	mawb
;

354 
	mef„˘
;

355 
	möput_ch™√l
;

356 
	mouçut_ch™√l
;

357 
	mh_off£t
;

358 
	mv_off£t
;

359 
	mh_off£t2
;

360 
	mv_off£t2
;

361 } 
	tˇmif_∑øm_t
;

364 
ˇmif_ˇ±uª_°¨t
(
ˇmif_cfg_t
 *);

365 
ˇmif_ˇ±uª_°›
(
ˇmif_cfg_t
 *);

366 
ˇmif_g_‰ame_num
(
ˇmif_cfg_t
 *);

367 
u8
 * 
ˇmif_g_‰ame
(
ˇmif_cfg_t
 *);

368 
ˇmif_wö_off£t
(
ˇmif_cis_t
 *);

369 
ˇmif_hw_›í
(
ˇmif_cis_t
 *);

370 
ˇmif_hw_˛o£
(
ˇmif_cfg_t
 *);

371 
ˇmif_£tup_fimc_c⁄åﬁÀr
(
ˇmif_cfg_t
 *);

372 
ˇmif_dy«mic_˛o£
(
ˇmif_cfg_t
 *);

373 
ˇmif_ª£t
(,);

374 
ˇmif_£tup_£ns‹
();

375 
ˇmif_g_fifo_°©us
(
ˇmif_cfg_t
 *);

376 
ˇmif_œ°_úq_í
(
ˇmif_cfg_t
 *);

377 
ˇmif_ch™ge_Êù
(
ˇmif_cfg_t
 *);

378 
ˇmif_ch™ge_image_ef„˘
(
ˇmif_cfg_t
 *);

379 
ˇmif_c_msdma_°¨t
(
ˇmif_cfg_t
 *, 
ˇmif_∑øm_t
);

384 
ˇmif_do_wrôe
(
fûe
 *,c⁄° *, 
size_t
, 
loff_t
 *);

385 
ˇmif_do_io˘l
(
öode
 *, 
fûe
 *,, *);

391 
ˇmif_ªgi°î_cis
(
i2c_˛õ¡
 *);

392 
ˇmif_uƒegi°î_cis
(
i2c_˛õ¡
*);

397 
	#INSTANT_SKIP
 0

	)

398 
	#INSTANT_GO
 1

	)

400 
ssize_t
 
ˇmif_°¨t_1fsm
(
ˇmif_cfg_t
 *);

401 
ssize_t
 
ˇmif_°¨t_2fsm
(
ˇmif_cfg_t
 *);

402 
ssize_t
 
ˇmif_°¨t_¥evõw
(
ˇmif_cfg_t
 *);

403 
ssize_t
 
ˇmif_°›_¥evõw
(
ˇmif_cfg_t
 *);

404 
ˇmif_íãr_p_4fsm
(
ˇmif_cfg_t
 *);

405 
ˇmif_íãr_c_4fsm
(
ˇmif_cfg_t
 *);

406 
ˇmif_íãr_2fsm
(
ˇmif_cfg_t
 *);

407 
ˇmif_íãr_1fsm
(
ˇmif_cfg_t
 *);

408 
ˇmif_check_¥evõw_ö_CODEC
(
ˇmif_cfg_t
 *);

409 
ˇmif_ˇŒback_°¨t
(
ˇmif_cfg_t
 *);

410 
ˇmif_sour˚_fmt
(
ˇmif_cis_t
 *);

412 
˛ór_ˇmif_úq
();

418 
	#VID_HARDWARE_SAMSUNG_FIMC3X
 236

	)

420 
ˇmif_cfg_t
 
fimc
[
CAMIF_NUM
];

	@s3c_camif_fsm.c

10 
	~<löux/vîsi⁄.h
>

11 
	~<löux/moduÀ.h
>

12 
	~<löux/dñay.h
>

13 
	~<löux/î∫o.h
>

14 
	~<löux/fs.h
>

15 
	~<löux/kî√l.h
>

16 
	~<löux/maj‹.h
>

17 
	~<löux/¶ab.h
>

18 
	~<löux/pﬁl.h
>

19 
	~<löux/sig«l.h
>

20 
	~<löux/i›‹t.h
>

21 
	~<löux/sched.h
>

22 
	~<löux/ty≥s.h
>

23 
	~<löux/öãºu±.h
>

24 
	~<löux/kmod.h
>

25 
	~<löux/vmÆloc.h
>

26 
	~<löux/öô.h
>

27 
	~<löux/∑gem≠.h
>

28 
	~<asm/io.h
>

29 
	~<asm/úq.h
>

30 
	~<asm/£m≠h‹e.h
>

36 
	~"s3c_ˇmif_fsm.h
"

46 
ssize_t
 
	$ˇmif_°¨t_1fsm
(
ˇmif_cfg_t
 *
cfg
)

48 
	`¥ötk
(
KERN_INFO
 "camif_start_1fsm \n");

50 
cfg
->
ˇ±uª_íabÀ
 = 
CAMIF_DMA_ON
;

51 
	`ˇmif_ˇ±uª_°¨t
(
cfg
);

52 
	`ˇmif_œ°_úq_í
(
cfg
);

53 
cfg
->
°©us
 = 
CAMIF_STARTED
;

54 
cfg
->
fsm
 = 
CAMIF_Yth_INT
;

55 
cfg
->
≥rf
.
‰ames
 = 0;

57 
	}
}

60 
ssize_t
 
	$ˇmif_°¨t_2fsm
(
ˇmif_cfg_t
 *
cfg
)

62 
	`ˇmif_ª£t
(
CAMIF_RESET
,0);

63 
cfg
->
ˇ±uª_íabÀ
 = 
CAMIF_DMA_ON
;

64 
	`ˇmif_ˇ±uª_°¨t
(
cfg
);

65 
cfg
->
°©us
 = 
CAMIF_STARTED
;

66 
cfg
->
fsm
 = 
CAMIF_1°_INT
;

67 
cfg
->
≥rf
.
‰ames
 = 0;

69 
	}
}

72 
ssize_t
 
	$ˇmif_°¨t_¥evõw
(
ˇmif_cfg_t
 *
cfg
)

74 
	`ˇmif_ª£t
(
CAMIF_RESET
,0);

75 
cfg
->
ˇ±uª_íabÀ
 = 
CAMIF_DMA_ON
;

76 
	`ˇmif_ˇ±uª_°¨t
(
cfg
);

77 
cfg
->
°©us
 = 
CAMIF_STARTED
;

78 
cfg
->
fsm
 = 
CAMIF_1°_INT
;

79 
cfg
->
≥rf
.
‰ames
 = 0;

82 if(
cfg
->
öput_ch™√l
 =
MSDMA_FROM_PREVIEW
){

83 
	`ˇmif_¥evõw_msdma_°¨t
(
cfg
);

87 
	}
}

89 
ssize_t
 
	$ˇmif_pc_°›
(
ˇmif_cfg_t
 *
cfg
)

91 
cfg
->
ˇ±uª_íabÀ
 = 
CAMIF_BOTH_DMA_OFF
;

93 
	`ˇmif_ˇ±uª_°›
(
cfg
);

94 
cfg
->
≥rf
.
‰ames
 = 0;

96 
	}
}

107 
ssize_t
 
	$ˇmif_°›_¥evõw
(
ˇmif_cfg_t
 *
cfg
)

109 
cfg
->
ˇ±uª_íabÀ
 = 
CAMIF_DMA_OFF
;

110 
cfg
->
°©us
 = 
CAMIF_STOPPED
;

111 
	`ˇmif_ˇ±uª_°›
(
cfg
);

112 
cfg
->
≥rf
.
‰ames
 = 0;

114 
	}
}

116 
ssize_t
 
	$ˇmif_°›_codec
(
ˇmif_cfg_t
 *
cfg
)

118 
cfg
->
ˇ±uª_íabÀ
 = 
CAMIF_DMA_OFF
;

119 
cfg
->
°©us
 = 
CAMIF_STOPPED
;

120 
	`ˇmif_ˇ±uª_°›
(
cfg
);

121 
cfg
->
≥rf
.
‰ames
 = 0;

123 
	}
}

127 
ˇmif_°¨t_p_wôh_c
(
ˇmif_cfg_t
 *
cfg
);

129 
	$ˇmif_°¨t_c_wôh_p
 (
ˇmif_cfg_t
 *
cfg
, camif_cfg_à*
Ÿhî
)

132 
cfg
->
Ÿhî
 = other;

133 
	`ˇmif_°¨t_p_wôh_c
(
cfg
);

134 
	}
}

136 
	$ˇmif_°¨t_p_wôh_c
(
ˇmif_cfg_t
 *
cfg
)

138 
ˇmif_cfg_t
 *
Ÿhî
 = (ˇmif_cfg_à*)
cfg
->other;

141 
cfg
->
ˇ±uª_íabÀ
 = 
CAMIF_DMA_OFF
;

142 
	`ˇmif_ˇ±uª_°›
(
cfg
);

145 
	`ˇmif_ª£t
(
CAMIF_RESET
, 0);

146 
cfg
->
ˇ±uª_íabÀ
 =
CAMIF_BOTH_DMA_ON
;

148 
	`ˇmif_ˇ±uª_°¨t
(
cfg
);

149 
cfg
->
fsm
 = 
CAMIF_1°_INT
;

151 if(!
Ÿhî
Ë
	`∑nic
("s3c_camif_fsm.c : Unexpected Error - other isÇull \n");

153 
Ÿhî
->
µ_num
) {

155 
Ÿhî
->
fsm
 = 
CAMIF_1°_INT
;

158 
Ÿhî
->
fsm
 = 
CAMIF_Yth_INT
;

161 
	`∑nic
("Not SupportingÖp_num");

164 
	}
}

166 
	$ˇmif_auto_ª°¨t
(
ˇmif_cfg_t
 *
cfg
)

169 i‡(
cfg
->
auto_ª°¨t
)

170 
	`ˇmif_°¨t_p_wôh_c
(
cfg
);

171 
	}
}

177 
	$ˇmif_check_globÆ
(
ˇmif_cfg_t
 *
cfg
)

179 
ªt
 = 0;

181 i‡(
	`muãx_lock_öãºu±ibÀ
(&
cfg
->
cis
->
lock
))

182  -
ERESTARTSYS
;

183 i‡–
cfg
->
cis
->
°©us
 & 
CWANT2START
 ) {

184 
cfg
->
cis
->
°©us
 &~
CWANT2START
;

185 
cfg
->
auto_ª°¨t
 = 1;

186 
ªt
 = 1;

189 
ªt
 = 0;

190 
cfg
->
auto_ª°¨t
 = 0;

193 
	`muãx_u∆ock
(&
cfg
->
cis
->
lock
);

195  
ªt
;

196 
	}
}

204 
	#CHECK_FREQ
 5

	)

206 
	$ˇmif_íãr_p_4fsm
(
ˇmif_cfg_t
 *
cfg
)

208 
ªt
 = 0;

210 
cfg
->
≥rf
.
‰ames
++;

211 i‡(
cfg
->
fsm
 =
CAMIF_NORMAL_INT
)

212 i‡(
cfg
->
≥rf
.
‰ames
 % 
CHECK_FREQ
 == 0)

213 
ªt
 = 
	`ˇmif_check_globÆ
(
cfg
);

214 i‡(
ªt
 > 0Ë
cfg
->
fsm
 = 
CAMIF_Xth_INT
;

216 
cfg
->
fsm
) {

217 
CAMIF_1°_INT
:

218 
cfg
->
fsm
 = 
CAMIF_NORMAL_INT
;

219 
ªt
 = 
INSTANT_SKIP
;

220 
	`DPRINTK
(
KERN_INFO
 "camif_enter_p_4fsm() : 1st INT \n");

223 
CAMIF_NORMAL_INT
:

224 
cfg
->
°©us
 = 
CAMIF_INT_HAPPEN
;

225 
cfg
->
fsm
 = 
CAMIF_NORMAL_INT
;

226 
ªt
 = 
INSTANT_GO
;

227 
	`DPRINTK
(
KERN_INFO
 "camif_enter_p_4fsm() : NORMAL INT \n");

230 
CAMIF_Xth_INT
:

231 
	`ˇmif_œ°_úq_í
(
cfg
);

232 
cfg
->
°©us
 = 
CAMIF_INT_HAPPEN
;

233 
cfg
->
fsm
 = 
CAMIF_Yth_INT
;

234 
ªt
 = 
INSTANT_GO
;

235 
	`DPRINTK
(
KERN_INFO
 "camif_enter_p_4fsm() : Xth INT \n");

238 
CAMIF_Yth_INT
:

239 
cfg
->
ˇ±uª_íabÀ
 = 
CAMIF_DMA_OFF
;

240 
cfg
->
°©us
 = 
CAMIF_INT_HAPPEN
;

241 
	`ˇmif_ˇ±uª_°›
(
cfg
);

242 
cfg
->
fsm
 = 
CAMIF_Zth_INT
;

243 
ªt
 = 
INSTANT_GO
;

244 
	`DPRINTK
(
KERN_INFO
 "camif_enter_p_4fsm() : Yth INT \n");

247 
CAMIF_Zth_INT
:

248 
cfg
->
fsm
 = 
CAMIF_DUMMY_INT
;

249 
cfg
->
°©us
 = 
CAMIF_INT_HAPPEN
;

250 
ªt
 = 
INSTANT_GO
;

251 
	`ˇmif_auto_ª°¨t
(
cfg
);

252 
	`DPRINTK
(
KERN_INFO
 "camif_enter_p_4fsm() : Zth INT \n");

255 
CAMIF_DUMMY_INT
:

256 
cfg
->
°©us
 = 
CAMIF_STOPPED
;

257 
ªt
 = 
INSTANT_SKIP
;

258 
	`DPRINTK
(
KERN_INFO
 "camif_enter_p_4fsm() : Dummy INT \n");

262 
	`¥ötk
(
KERN_INFO
 "ˇmif_íãr_p_4fsm(Ë: U√x≥˘ed INT %d \n",
cfg
->
fsm
);

263 
ªt
 = 
INSTANT_SKIP
;

266  
ªt
;

267 
	}
}

273 
	$ˇmif_íãr_c_4fsm
(
ˇmif_cfg_t
 *
cfg
)

275 
ªt
;

277 
cfg
->
≥rf
.
‰ames
++;

279 i‡–(
cfg
->
fsm
==
CAMIF_NORMAL_INT
)

280 && (
cfg
->
≥rf
.
‰ames
>cfg->
ª°¨t_limô
-1)

282 
cfg
->
fsm
 = 
CAMIF_Xth_INT
;

284 
cfg
->
fsm
) {

285 
CAMIF_1°_INT
:

286 
cfg
->
fsm
 = 
CAMIF_NORMAL_INT
;

288 
ªt
 = 
INSTANT_SKIP
;

289 
	`DPRINTK
(
KERN_INFO
 "1st INT \n");

292 
CAMIF_NORMAL_INT
:

293 
cfg
->
°©us
 = 
CAMIF_INT_HAPPEN
;

294 
cfg
->
fsm
 = 
CAMIF_NORMAL_INT
;

295 
ªt
 = 
INSTANT_GO
;

299 
CAMIF_Xth_INT
:

300 
	`ˇmif_œ°_úq_í
(
cfg
);

301 
cfg
->
°©us
 = 
CAMIF_INT_HAPPEN
;

302 
cfg
->
fsm
 = 
CAMIF_Yth_INT
;

303 
ªt
 = 
INSTANT_GO
;

304 
	`DPRINTK
(
KERN_INFO
 "Xth INT \n");

307 
CAMIF_Yth_INT
:

308 
cfg
->
ˇ±uª_íabÀ
 = 
CAMIF_DMA_OFF
;

309 
cfg
->
°©us
 = 
CAMIF_INT_HAPPEN
;

310 
	`ˇmif_ˇ±uª_°›
(
cfg
);

311 
cfg
->
fsm
 = 
CAMIF_Zth_INT
;

312 
ªt
 = 
INSTANT_GO
;

313 
	`DPRINTK
(
KERN_INFO
 "Yth INT \n");

316 
CAMIF_Zth_INT
:

317 
cfg
->
fsm
 = 
CAMIF_DUMMY_INT
;

318 
cfg
->
°©us
 = 
CAMIF_INT_HAPPEN
;

319 
ªt
 = 
INSTANT_GO
;

320 
	`DPRINTK
(
KERN_INFO
 "Zth INT \n");

323 
CAMIF_DUMMY_INT
:

324 
cfg
->
°©us
 = 
CAMIF_STOPPED
;

325 
ªt
 = 
INSTANT_SKIP
;

329 
	`¥ötk
(
KERN_INFO
 "U√x≥˘ed INT %d \n",
cfg
->
fsm
);

330 
ªt
 = 
INSTANT_SKIP
;

333  
ªt
;

334 
	}
}

346 
	$ˇmif_íãr_2fsm
(
ˇmif_cfg_t
 *
cfg
)

348 
ªt
;

350 
cfg
->
≥rf
.
‰ames
++;

351 
cfg
->
fsm
) {

352 
CAMIF_1°_INT
:

353 
cfg
->
fsm
 = 
CAMIF_Xth_INT
;

354 
ªt
 = 
INSTANT_SKIP
;

355 
	`DPRINTK
("camif_enter_2fsm() : 1st INT \n");

358 
CAMIF_Xth_INT
:

359 
	`ˇmif_œ°_úq_í
(
cfg
);

360 
cfg
->
now_‰ame_num
 = 0;

361 
cfg
->
°©us
 = 
CAMIF_INT_HAPPEN
;

362 
cfg
->
fsm
 = 
CAMIF_Yth_INT
;

363 
ªt
 = 
INSTANT_GO
;

364 
	`DPRINTK
("camif_enter_2fsm() : Xth INT \n");

367 
CAMIF_Yth_INT
:

368 
cfg
->
ˇ±uª_íabÀ
 = 
CAMIF_DMA_OFF
;

369 
cfg
->
now_‰ame_num
 = 1;

370 
cfg
->
°©us
 = 
CAMIF_INT_HAPPEN
;

371 
	`ˇmif_ˇ±uª_°›
(
cfg
);

372 
cfg
->
fsm
 = 
CAMIF_Zth_INT
;

373 
ªt
 = 
INSTANT_GO
;

374 
	`DPRINTK
("camif_enter_2fsm() : Yth INT \n");

377 
CAMIF_Zth_INT
:

378 
cfg
->
now_‰ame_num
 = 0;

380 
cfg
->
°©us
 = 
CAMIF_INT_HAPPEN
;

381 
ªt
 = 
INSTANT_GO
;

382 
	`DPRINTK
("camif_enter_2fsm() : Zth INT \n");

385 
CAMIF_DUMMY_INT
:

386 
cfg
->
°©us
 = 
CAMIF_STOPPED
;

387 
ªt
 = 
INSTANT_SKIP
;

388 
	`DPRINTK
("camif_enter_2fsm() : Dummy INT \n");

392 
	`¥ötk
("camif_enter_2fsm() : Unexpected INT \n");

393 
ªt
 = 
INSTANT_SKIP
;

396  
ªt
;

397 
	}
}

404 
	$ˇmif_íãr_1fsm
(
ˇmif_cfg_t
 *
cfg
)

406 
ªt
;

408 
cfg
->
≥rf
.
‰ames
++;

409 
cfg
->
fsm
) {

410 
CAMIF_Yth_INT
:

411 
cfg
->
ˇ±uª_íabÀ
 = 
CAMIF_DMA_OFF
;

412 
	`ˇmif_ˇ±uª_°›
(
cfg
);

413 
cfg
->
°©us
 = 
CAMIF_INT_HAPPEN
;

414 
cfg
->
fsm
 = 
CAMIF_Zth_INT
;

415 
ªt
 = 
INSTANT_GO
;

416 
	`DPRINTK
(
KERN_INFO
 "camif_enter_1fsm() : Yth INT \n");

419 
CAMIF_Zth_INT
:

420 
cfg
->
fsm
 = 
CAMIF_DUMMY_INT
;

421 
cfg
->
°©us
 = 
CAMIF_STOPPED
;

423 
ªt
 = 
INSTANT_SKIP
;

424 
	`DPRINTK
(
KERN_INFO
 "camif_enter_1fsm() : Zth INT \n");

427 
CAMIF_DUMMY_INT
:

428 
cfg
->
°©us
 = 
CAMIF_STOPPED
;

429 
ªt
 = 
INSTANT_SKIP
;

430 
	`DPRINTK
(
KERN_INFO
 "camif_enter_1fsm() : Dummy INT \n");

434 
	`¥ötk
(
KERN_INFO
 "ˇmif_íãr_1fsm(Ë: U√x≥˘ INT :fsm %d \n",
cfg
->
fsm
);

435 
ªt
 = 
INSTANT_SKIP
;

438  
ªt
;

439 
	}
}

451 
	$ˇmif_ˇŒback_°¨t
(
ˇmif_cfg_t
 *
cfg
)

453 
doô
 = 1;

455 
doô
) {

456 i‡(
	`muãx_lock_öãºu±ibÀ
(&
cfg
->
cis
->
lock
)) {

457  -
ERESTARTSYS
;

459 
cfg
->
cis
->
°©us
 = 
CWANT2START
;

460 
cfg
->
Ÿhî
 = cfg;

461 
	`muãx_u∆ock
(&
cfg
->
cis
->
lock
);

462 
doô
 = 0;

465 
	}
}

468 
	$ˇmif_check_codec_ö_PREVIEW
(
ˇmif_cfg_t
 *
cfg
)

470 
doô
 = 1;

472 
doô
) {

473 i‡(
	`muãx_lock_öãºu±ibÀ
(&
cfg
->
cis
->
lock
)) {

474  -
ERESTARTSYS
;

476 
cfg
->
cis
->
°©us
 = 
PWANT2START
;

477 
cfg
->
Ÿhî
 = cfg;

478 
	`muãx_u∆ock
(&
cfg
->
cis
->
lock
);

479 
doô
 = 0;

482 
	}
}

489 
	$ˇmif_check_¥evõw_ö_CODEC
(
ˇmif_cfg_t
 *
cfg
)

491 
ªt
 = 0;

493 i‡(
	`muãx_lock_öãºu±ibÀ
(&
cfg
->
cis
->
lock
)) {

494 
ªt
 = -
ERESTARTSYS
;

495  
ªt
;

497 i‡(
cfg
->
cis
->
u£r
 =1Ë
ªt
 = 0;

498 
ªt
 = 1;

501 i‡(
cfg
->
cis
->
°©us
 & 
P_NOT_WORKING
Ë
ªt
 = 0;

502 
	`muãx_u∆ock
(&
cfg
->
cis
->
lock
);

503  
ªt
;

504 
	}
}

	@s3c_camif_fsm.h

18 #i‚de‡
S3C_CAMIF_FSM_H


19 
	#S3C_CAMIF_FSM_H


	)

21 
	~"s3c_ˇmif.h
"

25 
ssize_t
 
ˇmif_°¨t_2fsm
(
ˇmif_cfg_t
 *
cfg
);

26 
ˇmif_íãr_2fsm
(
ˇmif_cfg_t
 *
cfg
);

27 
ssize_t
 
ˇmif_°¨t_¥evõw
(
ˇmif_cfg_t
 *
cfg
);

28 
ssize_t
 
ˇmif_pc_°›
(
ˇmif_cfg_t
 *
cfg
);

29 
ssize_t
 
ˇmif_°›_¥evõw
(
ˇmif_cfg_t
 *
cfg
);

30 
ssize_t
 
ˇmif_°¨t_¥evõw
(
ˇmif_cfg_t
 *
cfg
);

31 
ssize_t
 
ˇmif_°›_codec
(
ˇmif_cfg_t
 *
cfg
);

33 
ˇmif_íãr_c_4fsm
(
ˇmif_cfg_t
 *
cfg
);

	@saa7113h.c

40 
	~"ßa711x_ªgs.h
"

42 
	~<löux/kî√l.h
>

43 
	~<löux/moduÀ.h
>

44 
	~<löux/¶ab.h
>

45 
	~<löux/i2c.h
>

46 
	~<löux/videodev2.h
>

47 
	~<medü/v4l2-comm⁄.h
>

48 
	~<medü/v4l2-chù-idít.h
>

49 
	~<medü/ßa7115.h
>

50 
	~<asm/div64.h
>

51 
	~"s3c_ˇmif.h
"

53 
	#VRES_60HZ
 (480+16)

	)

54 
	#SAA7113H_VERSION_ID_REG
 0

	)

55 
	#SAA7113H_I2C_VERSION_ID
 0x10

	)

57 
MODULE_DESCRIPTION
("Philips SAA7111/SAA7113/SAA7114/SAA7115/SAA7118 video decoder driver");

58 
MODULE_AUTHOR
( "Maxim Yevtyushkin, Kevin Thayer, Chris Kennedy, "

60 
MODULE_LICENSE
("GPL");

68 
ˇmif_cis_t
 
	gmsdma_öput
 = {

69 .
ITU
 = 
CAMIF_ITU601
,

70 .
	g‹dî422_CAM
 = 
CAMIF_YCBYCR
,

71 .
	gˇm˛k
 = 32000000,

72 .
	gsour˚_x
 = 800,

73 .
	gsour˚_y
 = 480,

74 .
	gpﬁ¨ôy_vsync
 = 1,

75 .
	gª£t_ty≥
 = 
CAMIF_EX_RESET_AH
,

76 .
	gª£t_udñay
 = 20000,

79 
ˇmif_cis_t
 
	göãæa˚_öput
 = {

80 .
ITU
 = 
CAMIF_ITU656
,

81 .
	g‹dî422_CAM
 = 
CAMIF_CBYCRY
,

82 .
	gˇm˛k
 = 32000000,

83 .
	gsour˚_x
 = 720,

84 .
	gsour˚_y
 = 290,

85 .
	gwö_h‹_of°
 = 16,

86 .
	gwö_vî_of°
 = 2,

87 .
	gª£t_ty≥
 = 
CAMIF_EX_RESET_AH
,

88 .
	gª£t_udñay
 = 20000,

91 
ˇmif_cis_t
 
	gßa7113_öput
 = {

92 .
ITU
 = 
CAMIF_ITU656
,

93 .
	g‹dî422_CAM
 = 
CAMIF_CBYCRY
,

94 .
	gˇm˛k
 = 32000000,

95 .
	gsour˚_x
 = 720,

96 .
	gsour˚_y
 = 288,

97 .
	gª£t_ty≥
 = 
CAMIF_EX_RESET_AH
,

98 .
	gª£t_udñay
 = 20000,

102 
ˇmif_cis_t
* 
	$gë_öôülized_cis
() {

103 if(
öãæa˚_öput
.
öô_£ns‹
 == 0)

104  
NULL
;

105  &
öãæa˚_öput
;

106 
	}
}

110 
	gn‹mÆ_addr
[] = {0x4®>> 1, 
I2C_CLIENT_END
 };

115 
	sßa711x_°©e
 {

116 
v4l2_°d_id
 
	m°d
;

117 
	möput
;

118 
	mouçut
;

119 
	míabÀ
;

120 
	mødio
;

121 
	mbright
;

122 
	mc⁄åa°
;

123 
	mhue
;

124 
	mßt
;

125 
	mwidth
;

126 
	mheight
;

127 
	midít
;

128 
u32
 
	maud˛k_‰eq
;

129 
u32
 
	m¸y°Æ_‰eq
;

130 
u8
 
	mucgc
;

131 
u8
 
	mcgcdiv
;

132 
u8
 
	m≠Œ
;

134 
	gign‹e
[] = { 
I2C_CLIENT_END
 };

135 *
	gf‹˚s
[] = { 
NULL
 };

136 
i2c_˛õ¡_addªss_d©a
 
	gaddr_d©a
 = {

137 .
n‹mÆ_i2c
 = 
n‹mÆ_addr
,

138 .
	g¥obe
 = 
ign‹e
,

139 .
	gign‹e
 = 
ign‹e
,

140 .
	gf‹˚s
 = 
f‹˚s
,

144 
ölöe
 
	$ßa711x_wrôe
(
i2c_˛õ¡
 *
˛õ¡
, 
u8
 
ªg
, u8 
vÆue
)

147  
	`i2c_smbus_wrôe_byã_d©a
(
˛õ¡
, 
ªg
, 
vÆue
);

148 
	}
}

151 
	$ßa711x_has_ªg
(c⁄° 
id
, c⁄° 
u8
 
ªg
)

153 i‡(
id
 =
V4L2_IDENT_SAA7111
)

154  
ªg
 < 0x20 &&Ñeg != 0x01 &&Ñeg != 0x0f &&

155 (
ªg
 < 0x13 ||Ñeg > 0x19) &&Ñeg != 0x1d &&Ñeg != 0x1e;

158 i‡(
	`u∆ikñy
((
ªg
 >= 0x3b &&Ñeg <= 0x3f) ||Ñeg == 0x5c ||Ñeg == 0x5f ||

159 
ªg
 == 0xa3 ||Ñeg == 0xa7 ||Ñeg == 0xab ||Ñeg == 0xaf || (reg >= 0xb5 &&Ñeg <= 0xb7) ||

160 
ªg
 == 0xd3 ||Ñeg == 0xd7 ||Ñeg == 0xdb ||Ñeg == 0xdf || (reg >= 0xe5 &&Ñeg <= 0xe7) ||

161 
ªg
 == 0x82 || (reg >= 0x89 &&Ñeg <= 0x8e)))

164 
id
) {

165 
V4L2_IDENT_SAA7113
:

166  
ªg
 != 0x14 && (reg < 0x18 ||Ñeg > 0x1e) && (reg < 0x20 ||Ñeg > 0x3f) &&

167 
ªg
 != 0x5d &&Ñeg < 0x63;

168 
V4L2_IDENT_SAA7114
:

169  (
ªg
 < 0x1a ||Ñeg > 0x1e) && (reg < 0x20 ||Ñeg > 0x2f) &&

170 (
ªg
 < 0x63 ||Ñeg > 0x7f) &&Ñeg != 0x33 &&Ñeg != 0x37 &&

171 
ªg
 != 0x81 &&Ñeg < 0xf0;

172 
V4L2_IDENT_SAA7115
:

173  (
ªg
 < 0x20 ||Ñeg > 0x2f) &&Ñeg != 0x65 && (reg < 0xfc ||Ñeg > 0xfe);

174 
V4L2_IDENT_SAA7118
:

175  (
ªg
 < 0x1a ||Ñeg > 0x1d) && (reg < 0x20 ||Ñeg > 0x22) &&

176 (
ªg
 < 0x26 ||Ñeg > 0x28) &&Ñeg != 0x33 &&Ñeg != 0x37 &&

177 (
ªg
 < 0x63 ||Ñeg > 0x7f) &&Ñeg != 0x81 &&Ñeg < 0xf0;

180 
	}
}

182 
	$ßa711x_wrôîegs
(
i2c_˛õ¡
 *
˛õ¡
, c⁄° *
ªgs
)

184 
ßa711x_°©e
 *
°©e
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

185 
ªg
, 
d©a
;

187 *
ªgs
 != 0x00) {

188 
ªg
 = *(
ªgs
++);

189 
d©a
 = *(
ªgs
++);

193 i‡(
	`ßa711x_has_ªg
(
°©e
->
idít
,
ªg
)) {

194 i‡(
	`ßa711x_wrôe
(
˛õ¡
, 
ªg
, 
d©a
) < 0)

201 
	}
}

203 
ölöe
 
	$ßa711x_ªad
(
i2c_˛õ¡
 *
˛õ¡
, 
u8
 
ªg
)

205  
	`i2c_smbus_ªad_byã_d©a
(
˛õ¡
, 
ªg
);

206 
	}
}

211 c⁄° 
	gßa7111_öô
[] = {

212 
R_01_INC_DELAY
, 0x00,

215 
R_02_INPUT_CNTL_1
, 0xd0,

216 
R_03_INPUT_CNTL_2
, 0x23,

218 
R_04_INPUT_CNTL_3
, 0x00,

219 
R_05_INPUT_CNTL_4
, 0x00,

222 
R_06_H_SYNC_START
, 0xf3,

224 
R_07_H_SYNC_STOP
, 0xe8,

226 
R_08_SYNC_CNTL
, 0xc8,

228 
R_09_LUMA_CNTL
, 0x01,

230 
R_0A_LUMA_BRIGHT_CNTL
, 0x80,

231 
R_0B_LUMA_CONTRAST_CNTL
, 0x47,

232 
R_0C_CHROMA_SAT_CNTL
, 0x40,

233 
R_0D_CHROMA_HUE_CNTL
, 0x00,

234 
R_0E_CHROMA_CNTL_1
, 0x01,

236 
R_0F_CHROMA_GAIN_CNTL
, 0x00,

237 
R_10_CHROMA_CNTL_2
, 0x48,

238 
R_11_MODE_DELAY_CNTL
, 0x1c,

240 
R_12_RT_SIGNAL_CNTL
, 0x00,

241 
R_13_RT_X_PORT_OUT_CNTL
, 0x00,

242 
R_14_ANAL_ADC_COMPAT_CNTL
, 0x00,

243 
R_15_VGATE_START_FID_CHG
, 0x00,

244 
R_16_VGATE_STOP
, 0x00,

245 
R_17_MISC_VGATE_CONF_AND_MSB
, 0x00,

251 c⁄° 
	gßa7113_öô
[] = {

252 
R_01_INC_DELAY
, 0x08,

253 
R_02_INPUT_CNTL_1
, 0xc2,

254 
R_03_INPUT_CNTL_2
, 0x30,

255 
R_04_INPUT_CNTL_3
, 0x00,

256 
R_05_INPUT_CNTL_4
, 0x00,

257 
R_06_H_SYNC_START
, 0x89,

258 
R_07_H_SYNC_STOP
, 0x0d,

259 
R_08_SYNC_CNTL
, 0x88,

260 
R_09_LUMA_CNTL
, 0x01,

261 
R_0A_LUMA_BRIGHT_CNTL
, 0x80,

262 
R_0B_LUMA_CONTRAST_CNTL
, 0x47,

263 
R_0C_CHROMA_SAT_CNTL
, 0x40,

264 
R_0D_CHROMA_HUE_CNTL
, 0x00,

265 
R_0E_CHROMA_CNTL_1
, 0x01,

266 
R_0F_CHROMA_GAIN_CNTL
, 0x2a,

267 
R_10_CHROMA_CNTL_2
, 0x08,

268 
R_11_MODE_DELAY_CNTL
, 0x0c,

269 
R_12_RT_SIGNAL_CNTL
, 0x07,

270 
R_13_RT_X_PORT_OUT_CNTL
, 0x00,

271 
R_14_ANAL_ADC_COMPAT_CNTL
, 0x00,

272 
R_15_VGATE_START_FID_CHG
, 0x00,

273 
R_16_VGATE_STOP
, 0x00,

274 
R_17_MISC_VGATE_CONF_AND_MSB
, 0x00,

284 c⁄° 
	gßa7115_öô_auto_öput
[] = {

286 
R_01_INC_DELAY
, 0x48,

287 
R_03_INPUT_CNTL_2
, 0x20,

288 
R_04_INPUT_CNTL_3
, 0x90,

289 
R_05_INPUT_CNTL_4
, 0x90,

291 
R_06_H_SYNC_START
, 0xeb,

292 
R_07_H_SYNC_STOP
, 0xe0,

293 
R_09_LUMA_CNTL
, 0x53,

294 
R_0A_LUMA_BRIGHT_CNTL
, 0x80,

295 
R_0B_LUMA_CONTRAST_CNTL
, 0x44,

296 
R_0C_CHROMA_SAT_CNTL
, 0x40,

297 
R_0D_CHROMA_HUE_CNTL
, 0x00,

298 
R_0F_CHROMA_GAIN_CNTL
, 0x00,

299 
R_10_CHROMA_CNTL_2
, 0x06,

300 
R_11_MODE_DELAY_CNTL
, 0x00,

301 
R_12_RT_SIGNAL_CNTL
, 0x9d,

302 
R_13_RT_X_PORT_OUT_CNTL
, 0x80,

303 
R_14_ANAL_ADC_COMPAT_CNTL
, 0x00,

304 
R_18_RAW_DATA_GAIN_CNTL
, 0x40,

305 
R_19_RAW_DATA_OFF_CNTL
, 0x80,

306 
R_1A_COLOR_KILL_LVL_CNTL
, 0x77,

307 
R_1B_MISC_TVVCRDET
, 0x42,

308 
R_1C_ENHAN_COMB_CTRL1
, 0xa9,

309 
R_1D_ENHAN_COMB_CTRL2
, 0x01,

312 
R_80_GLOBAL_CNTL_1
, 0x0,

315 
R_88_POWER_SAVE_ADC_PORT_CNTL
, 0xd0,

316 
R_88_POWER_SAVE_ADC_PORT_CNTL
, 0xf0,

321 c⁄° 
	gßa7115_cfg_ª£t_sˇÀr
[] = {

322 
R_87_I_PORT_I_O_ENA_OUT_CLK_AND_GATED
, 0x00,

323 
R_88_POWER_SAVE_ADC_PORT_CNTL
, 0xd0,

324 
R_88_POWER_SAVE_ADC_PORT_CNTL
, 0xf0,

325 
R_87_I_PORT_I_O_ENA_OUT_CLK_AND_GATED
, 0x01,

331 c⁄° 
	gßa7115_cfg_60hz_video
[] = {

332 
R_80_GLOBAL_CNTL_1
, 0x00,

333 
R_88_POWER_SAVE_ADC_PORT_CNTL
, 0xd0,

335 
R_15_VGATE_START_FID_CHG
, 0x03,

336 
R_16_VGATE_STOP
, 0x11,

337 
R_17_MISC_VGATE_CONF_AND_MSB
, 0x9c,

339 
R_08_SYNC_CNTL
, 0x68,

340 
R_0E_CHROMA_CNTL_1
, 0x07,

342 
R_5A_V_OFF_FOR_SLICER
, 0x06,

345 
R_90_A_TASK_HANDLING_CNTL
, 0x80,

346 
R_91_A_X_PORT_FORMATS_AND_CONF
, 0x48,

347 
R_92_A_X_PORT_INPUT_REFERENCE_SIGNAL
, 0x40,

348 
R_93_A_I_PORT_OUTPUT_FORMATS_AND_CONF
, 0x84,

351 
R_94_A_HORIZ_INPUT_WINDOW_START
, 0x01,

352 
R_95_A_HORIZ_INPUT_WINDOW_START_MSB
, 0x00,

355 
R_96_A_HORIZ_INPUT_WINDOW_LENGTH
, 0xd0,

356 
R_97_A_HORIZ_INPUT_WINDOW_LENGTH_MSB
, 0x02,

358 
R_98_A_VERT_INPUT_WINDOW_START
, 0x05,

359 
R_99_A_VERT_INPUT_WINDOW_START_MSB
, 0x00,

361 
R_9A_A_VERT_INPUT_WINDOW_LENGTH
, 0x0c,

362 
R_9B_A_VERT_INPUT_WINDOW_LENGTH_MSB
, 0x00,

364 
R_9C_A_HORIZ_OUTPUT_WINDOW_LENGTH
, 0xa0,

365 
R_9D_A_HORIZ_OUTPUT_WINDOW_LENGTH_MSB
, 0x05,

367 
R_9E_A_VERT_OUTPUT_WINDOW_LENGTH
, 0x0c,

368 
R_9F_A_VERT_OUTPUT_WINDOW_LENGTH_MSB
, 0x00,

371 
R_C0_B_TASK_HANDLING_CNTL
, 0x00,

372 
R_C1_B_X_PORT_FORMATS_AND_CONF
, 0x08,

373 
R_C2_B_INPUT_REFERENCE_SIGNAL_DEFINITION
, 0x00,

374 
R_C3_B_I_PORT_FORMATS_AND_CONF
, 0x80,

377 
R_C4_B_HORIZ_INPUT_WINDOW_START
, 0x02,

378 
R_C5_B_HORIZ_INPUT_WINDOW_START_MSB
, 0x00,

381 
R_C6_B_HORIZ_INPUT_WINDOW_LENGTH
, 0xd0,

382 
R_C7_B_HORIZ_INPUT_WINDOW_LENGTH_MSB
, 0x02,

385 
R_C8_B_VERT_INPUT_WINDOW_START
, 0x12,

386 
R_C9_B_VERT_INPUT_WINDOW_START_MSB
, 0x00,

389 
R_CA_B_VERT_INPUT_WINDOW_LENGTH
, 
VRES_60HZ
>>1,

390 
R_CB_B_VERT_INPUT_WINDOW_LENGTH_MSB
, 
VRES_60HZ
>>9,

393 
R_CC_B_HORIZ_OUTPUT_WINDOW_LENGTH
, 0xd0,

394 
R_CD_B_HORIZ_OUTPUT_WINDOW_LENGTH_MSB
, 0x02,

396 
R_F0_LFCO_PER_LINE
, 0xad,

397 
R_F1_P_I_PARAM_SELECT
, 0x05,

398 
R_F5_PULSGEN_LINE_LENGTH
, 0xad,

399 
R_F6_PULSE_A_POS_LSB_AND_PULSEGEN_CONFIG
, 0x01,

404 c⁄° 
	gßa7115_cfg_50hz_video
[] = {

405 
R_80_GLOBAL_CNTL_1
, 0x00,

406 
R_88_POWER_SAVE_ADC_PORT_CNTL
, 0xd0,

408 
R_15_VGATE_START_FID_CHG
, 0x37,

409 
R_16_VGATE_STOP
, 0x16,

410 
R_17_MISC_VGATE_CONF_AND_MSB
, 0x99,

412 
R_08_SYNC_CNTL
, 0x28,

413 
R_0E_CHROMA_CNTL_1
, 0x07,

415 
R_5A_V_OFF_FOR_SLICER
, 0x03,

418 
R_90_A_TASK_HANDLING_CNTL
, 0x81,

419 
R_91_A_X_PORT_FORMATS_AND_CONF
, 0x48,

420 
R_92_A_X_PORT_INPUT_REFERENCE_SIGNAL
, 0x40,

421 
R_93_A_I_PORT_OUTPUT_FORMATS_AND_CONF
, 0x84,

426 
R_94_A_HORIZ_INPUT_WINDOW_START
, 0x00,

427 
R_95_A_HORIZ_INPUT_WINDOW_START_MSB
, 0x00,

430 
R_96_A_HORIZ_INPUT_WINDOW_LENGTH
, 0xd0,

431 
R_97_A_HORIZ_INPUT_WINDOW_LENGTH_MSB
, 0x02,

433 
R_98_A_VERT_INPUT_WINDOW_START
, 0x03,

434 
R_99_A_VERT_INPUT_WINDOW_START_MSB
, 0x00,

437 
R_9A_A_VERT_INPUT_WINDOW_LENGTH
, 0x12,

438 
R_9B_A_VERT_INPUT_WINDOW_LENGTH_MSB
, 0x00,

441 
R_9C_A_HORIZ_OUTPUT_WINDOW_LENGTH
, 0xa0,

442 
R_9D_A_HORIZ_OUTPUT_WINDOW_LENGTH_MSB
, 0x05,

443 
R_9E_A_VERT_OUTPUT_WINDOW_LENGTH
, 0x12,

444 
R_9F_A_VERT_OUTPUT_WINDOW_LENGTH_MSB
, 0x00,

447 
R_C0_B_TASK_HANDLING_CNTL
, 0x00,

448 
R_C1_B_X_PORT_FORMATS_AND_CONF
, 0x08,

449 
R_C2_B_INPUT_REFERENCE_SIGNAL_DEFINITION
, 0x00,

450 
R_C3_B_I_PORT_FORMATS_AND_CONF
, 0x80,

455 
R_C4_B_HORIZ_INPUT_WINDOW_START
, 0x00,

456 
R_C5_B_HORIZ_INPUT_WINDOW_START_MSB
, 0x00,

459 
R_C6_B_HORIZ_INPUT_WINDOW_LENGTH
, 0xd0,

460 
R_C7_B_HORIZ_INPUT_WINDOW_LENGTH_MSB
, 0x02,

463 
R_C8_B_VERT_INPUT_WINDOW_START
, 0x16,

464 
R_C9_B_VERT_INPUT_WINDOW_START_MSB
, 0x00,

467 
R_CA_B_VERT_INPUT_WINDOW_LENGTH
, 0x20,

468 
R_CB_B_VERT_INPUT_WINDOW_LENGTH_MSB
, 0x01,

471 
R_CC_B_HORIZ_OUTPUT_WINDOW_LENGTH
, 0xd0,

472 
R_CD_B_HORIZ_OUTPUT_WINDOW_LENGTH_MSB
, 0x02,

474 
R_F0_LFCO_PER_LINE
, 0xb0,

475 
R_F1_P_I_PARAM_SELECT
, 0x05,

476 
R_F5_PULSGEN_LINE_LENGTH
, 0xb0,

477 
R_F6_PULSE_A_POS_LSB_AND_PULSEGEN_CONFIG
, 0x01,

484 c⁄° 
	gßa7115_cfg_vbi_⁄
[] = {

485 
R_80_GLOBAL_CNTL_1
, 0x00,

486 
R_88_POWER_SAVE_ADC_PORT_CNTL
, 0xd0,

487 
R_80_GLOBAL_CNTL_1
, 0x30,

488 
R_88_POWER_SAVE_ADC_PORT_CNTL
, 0xf0,

489 
R_87_I_PORT_I_O_ENA_OUT_CLK_AND_GATED
, 0x01,

494 c⁄° 
	gßa7115_cfg_vbi_off
[] = {

495 
R_80_GLOBAL_CNTL_1
, 0x00,

496 
R_88_POWER_SAVE_ADC_PORT_CNTL
, 0xd0,

497 
R_80_GLOBAL_CNTL_1
, 0x20,

498 
R_88_POWER_SAVE_ADC_PORT_CNTL
, 0xf0,

499 
R_87_I_PORT_I_O_ENA_OUT_CLK_AND_GATED
, 0x01,

505 c⁄° 
	gßa7115_öô_misc
[] = {

506 
R_81_V_SYNC_FLD_ID_SRC_SEL_AND_RETIMED_V_F
, 0x01,

507 
R_83_X_PORT_I_O_ENA_AND_OUT_CLK
, 0x01,

508 
R_84_I_PORT_SIGNAL_DEF
, 0x20,

509 
R_85_I_PORT_SIGNAL_POLAR
, 0x21,

510 
R_86_I_PORT_FIFO_FLAG_CNTL_AND_ARBIT
, 0xc5,

511 
R_87_I_PORT_I_O_ENA_OUT_CLK_AND_GATED
, 0x01,

514 
R_A0_A_HORIZ_PRESCALING
, 0x01,

515 
R_A1_A_ACCUMULATION_LENGTH
, 0x00,

516 
R_A2_A_PRESCALER_DC_GAIN_AND_FIR_PREFILTER
, 0x00,

519 
R_A4_A_LUMA_BRIGHTNESS_CNTL
, 0x80,

520 
R_A5_A_LUMA_CONTRAST_CNTL
, 0x40,

521 
R_A6_A_CHROMA_SATURATION_CNTL
, 0x40,

524 
R_A8_A_HORIZ_LUMA_SCALING_INC
, 0x00,

525 
R_A9_A_HORIZ_LUMA_SCALING_INC_MSB
, 0x02,

527 
R_AA_A_HORIZ_LUMA_PHASE_OFF
, 0x00,

530 
R_AC_A_HORIZ_CHROMA_SCALING_INC
, 0x00,

531 
R_AD_A_HORIZ_CHROMA_SCALING_INC_MSB
, 0x01,

534 
R_AE_A_HORIZ_CHROMA_PHASE_OFF
, 0x00,

536 
R_B0_A_VERT_LUMA_SCALING_INC
, 0x00,

537 
R_B1_A_VERT_LUMA_SCALING_INC_MSB
, 0x04,

539 
R_B2_A_VERT_CHROMA_SCALING_INC
, 0x00,

540 
R_B3_A_VERT_CHROMA_SCALING_INC_MSB
, 0x04,

542 
R_B4_A_VERT_SCALING_MODE_CNTL
, 0x01,

544 
R_B8_A_VERT_CHROMA_PHASE_OFF_00
, 0x00,

545 
R_B9_A_VERT_CHROMA_PHASE_OFF_01
, 0x00,

546 
R_BA_A_VERT_CHROMA_PHASE_OFF_10
, 0x00,

547 
R_BB_A_VERT_CHROMA_PHASE_OFF_11
, 0x00,

549 
R_BC_A_VERT_LUMA_PHASE_OFF_00
, 0x00,

550 
R_BD_A_VERT_LUMA_PHASE_OFF_01
, 0x00,

551 
R_BE_A_VERT_LUMA_PHASE_OFF_10
, 0x00,

552 
R_BF_A_VERT_LUMA_PHASE_OFF_11
, 0x00,

555 
R_D0_B_HORIZ_PRESCALING
, 0x01,

556 
R_D1_B_ACCUMULATION_LENGTH
, 0x00,

557 
R_D2_B_PRESCALER_DC_GAIN_AND_FIR_PREFILTER
, 0x00,

560 
R_D4_B_LUMA_BRIGHTNESS_CNTL
, 0x80,

561 
R_D5_B_LUMA_CONTRAST_CNTL
, 0x40,

562 
R_D6_B_CHROMA_SATURATION_CNTL
, 0x40,

565 
R_D8_B_HORIZ_LUMA_SCALING_INC
, 0x00,

566 
R_D9_B_HORIZ_LUMA_SCALING_INC_MSB
, 0x04,

568 
R_DA_B_HORIZ_LUMA_PHASE_OFF
, 0x00,

571 
R_DC_B_HORIZ_CHROMA_SCALING
, 0x00,

572 
R_DD_B_HORIZ_CHROMA_SCALING_MSB
, 0x02,

575 
R_DE_B_HORIZ_PHASE_OFFSET_CRHOMA
, 0x00,

577 
R_E0_B_VERT_LUMA_SCALING_INC
, 0x00,

578 
R_E1_B_VERT_LUMA_SCALING_INC_MSB
, 0x04,

580 
R_E2_B_VERT_CHROMA_SCALING_INC
, 0x00,

581 
R_E3_B_VERT_CHROMA_SCALING_INC_MSB
, 0x04,

583 
R_E4_B_VERT_SCALING_MODE_CNTL
, 0x01,

585 
R_E8_B_VERT_CHROMA_PHASE_OFF_00
, 0x00,

586 
R_E9_B_VERT_CHROMA_PHASE_OFF_01
, 0x00,

587 
R_EA_B_VERT_CHROMA_PHASE_OFF_10
, 0x00,

588 
R_EB_B_VERT_CHROMA_PHASE_OFF_11
, 0x00,

590 
R_EC_B_VERT_LUMA_PHASE_OFF_00
, 0x00,

591 
R_ED_B_VERT_LUMA_PHASE_OFF_01
, 0x00,

592 
R_EE_B_VERT_LUMA_PHASE_OFF_10
, 0x00,

593 
R_EF_B_VERT_LUMA_PHASE_OFF_11
, 0x00,

595 
R_F2_NOMINAL_PLL2_DTO
, 0x50,

596 
R_F3_PLL_INCREMENT
, 0x46,

597 
R_F4_PLL2_STATUS
, 0x00,

598 
R_F7_PULSE_A_POS_MSB
, 0x4b,

599 
R_F8_PULSE_B_POS
, 0x00,

600 
R_F9_PULSE_B_POS_MSB
, 0x4b,

601 
R_FA_PULSE_C_POS
, 0x00,

602 
R_FB_PULSE_C_POS_MSB
, 0x4b,

605 
R_FF_S_PLL_MAX_PHASE_ERR_THRESH_NUM_LINES
, 0x88,

608 
R_40_SLICER_CNTL_1
, 0x20,

609 
R_41_LCR_BASE
, 0xff,

610 
R_41_LCR_BASE
+1, 0xff,

611 
R_41_LCR_BASE
+2, 0xff,

612 
R_41_LCR_BASE
+3, 0xff,

613 
R_41_LCR_BASE
+4, 0xff,

614 
R_41_LCR_BASE
+5, 0xff,

615 
R_41_LCR_BASE
+6, 0xff,

616 
R_41_LCR_BASE
+7, 0xff,

617 
R_41_LCR_BASE
+8, 0xff,

618 
R_41_LCR_BASE
+9, 0xff,

619 
R_41_LCR_BASE
+10, 0xff,

620 
R_41_LCR_BASE
+11, 0xff,

621 
R_41_LCR_BASE
+12, 0xff,

622 
R_41_LCR_BASE
+13, 0xff,

623 
R_41_LCR_BASE
+14, 0xff,

624 
R_41_LCR_BASE
+15, 0xff,

625 
R_41_LCR_BASE
+16, 0xff,

626 
R_41_LCR_BASE
+17, 0xff,

627 
R_41_LCR_BASE
+18, 0xff,

628 
R_41_LCR_BASE
+19, 0xff,

629 
R_41_LCR_BASE
+20, 0xff,

630 
R_41_LCR_BASE
+21, 0xff,

631 
R_41_LCR_BASE
+22, 0xff,

632 
R_58_PROGRAM_FRAMING_CODE
, 0x40,

633 
R_59_H_OFF_FOR_SLICER
, 0x47,

634 
R_5B_FLD_OFF_AND_MSB_FOR_H_AND_V_OFF
, 0x83,

635 
R_5D_DID
, 0xbd,

636 
R_5E_SDID
, 0x35,

639 
R_02_INPUT_CNTL_1
, 0xC0,

641 
R_80_GLOBAL_CNTL_1
, 0x20,

642 
R_88_POWER_SAVE_ADC_PORT_CNTL
, 0xd0,

643 
R_88_POWER_SAVE_ADC_PORT_CNTL
, 0xf0,

647 
	$ßa711x_odd_∑rôy
(
u8
 
c
)

649 
c
 ^= (c >> 4);

650 
c
 ^= (c >> 2);

651 
c
 ^= (c >> 1);

653  
c
 & 1;

654 
	}
}

656 
	$ßa711x_decode_vps
(
u8
 * 
d°
, u8 * 
p
)

658 c⁄° 
u8
 
bùha£_tbl
[] = {

692 
i
;

693 
u8
 
c
, 
îr
 = 0;

695 
i
 = 0; i < 2 * 13; i += 2) {

696 
îr
 |
bùha£_tbl
[
p
[
i
]] | biphase_tbl[p[i + 1]];

697 
c
 = (
bùha£_tbl
[
p
[
i
 + 1]] & 0xf) | ((biphase_tbl[p[i]] & 0xf) << 4);

698 
d°
[
i
 / 2] = 
c
;

700  
îr
 & 0xf0;

701 
	}
}

703 
	$ßa711x_decode_wss
(
u8
 * 
p
)

705 c⁄° 
wss_bôs
[8] = {

708 
∑rôy
;

709 
wss
 = 0;

710 
i
;

712 
i
 = 0; i < 16; i++) {

713 
b1
 = 
wss_bôs
[
p
[
i
] & 7];

714 
b2
 = 
wss_bôs
[(
p
[
i
] >> 3) & 7];

716 i‡(
b1
 =
b2
)

718 
wss
 |
b2
 << 
i
;

720 
∑rôy
 = 
wss
 & 15;

721 
∑rôy
 ^=Öarity >> 2;

722 
∑rôy
 ^=Öarity >> 1;

724 i‡(!(
∑rôy
 & 1))

727  
wss
;

728 
	}
}

730 
	$ßa711x_£t_audio_˛ock_‰eq
(
i2c_˛õ¡
 *
˛õ¡
, 
u32
 
‰eq
)

732 
ßa711x_°©e
 *
°©e
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

733 
u32
 
a˝f
;

734 
u32
 
a˙i
;

735 
u32
 
hz
;

736 
u64
 
f
;

737 
u8
 
acc
 = 0;

740 i‡(!
	`ßa711x_has_ªg
(
°©e
->
idít
,
R_30_AUD_MAST_CLK_CYCLES_PER_FIELD
))

746 i‡(
‰eq
 < 32000 || freq > 48000)

747  -
EINVAL
;

750 
hz
 = (
°©e
->
°d
 & 
V4L2_STD_525_60
) ? 5994 : 5000;

752 
a˝f
 = (25600 * 
‰eq
Ë/ 
hz
;

756 
f
 = 
‰eq
;

757 
f
 = f << 31;

758 
	`do_div
(
f
, 
°©e
->
¸y°Æ_‰eq
);

759 
a˙i
 = 
f
;

760 i‡(
°©e
->
ucgc
) {

761 
a˝f
 =á˝‡* 
°©e
->
cgcdiv
 / 16;

762 
a˙i
 =á˙ò* 
°©e
->
cgcdiv
 / 16;

763 
acc
 = 0x80;

764 i‡(
°©e
->
cgcdiv
 == 3)

765 
acc
 |= 0x40;

767 i‡(
°©e
->
≠Œ
)

768 
acc
 |= 0x08;

770 
	`ßa711x_wrôe
(
˛õ¡
, 
R_38_CLK_RATIO_AMXCLK_TO_ASCLK
, 0x03);

771 
	`ßa711x_wrôe
(
˛õ¡
, 
R_39_CLK_RATIO_ASCLK_TO_ALRCLK
, 0x10);

772 
	`ßa711x_wrôe
(
˛õ¡
, 
R_3A_AUD_CLK_GEN_BASIC_SETUP
, 
acc
);

774 
	`ßa711x_wrôe
(
˛õ¡
, 
R_30_AUD_MAST_CLK_CYCLES_PER_FIELD
, 
a˝f
 & 0xff);

775 
	`ßa711x_wrôe
(
˛õ¡
, 
R_30_AUD_MAST_CLK_CYCLES_PER_FIELD
+1,

776 (
a˝f
 >> 8) & 0xff);

777 
	`ßa711x_wrôe
(
˛õ¡
, 
R_30_AUD_MAST_CLK_CYCLES_PER_FIELD
+2,

778 (
a˝f
 >> 16) & 0x03);

780 
	`ßa711x_wrôe
(
˛õ¡
, 
R_34_AUD_MAST_CLK_NOMINAL_INC
, 
a˙i
 & 0xff);

781 
	`ßa711x_wrôe
(
˛õ¡
, 
R_34_AUD_MAST_CLK_NOMINAL_INC
+1, (
a˙i
 >> 8) & 0xff);

782 
	`ßa711x_wrôe
(
˛õ¡
, 
R_34_AUD_MAST_CLK_NOMINAL_INC
+2, (
a˙i
 >> 16) & 0x3f);

783 
°©e
->
aud˛k_‰eq
 = 
‰eq
;

785 
	}
}

787 
	$ßa711x_£t_v4l˘æ
(
i2c_˛õ¡
 *
˛õ¡
, 
v4l2_c⁄åﬁ
 *
˘æ
)

789 
ßa711x_°©e
 *
°©e
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

791 
˘æ
->
id
) {

792 
V4L2_CID_BRIGHTNESS
:

793 i‡(
˘æ
->
vÆue
 < 0 || ctrl->value > 255) {

795  -
ERANGE
;

798 
°©e
->
bright
 = 
˘æ
->
vÆue
;

799 
	`ßa711x_wrôe
(
˛õ¡
, 
R_0A_LUMA_BRIGHT_CNTL
, 
°©e
->
bright
);

802 
V4L2_CID_CONTRAST
:

803 i‡(
˘æ
->
vÆue
 < 0 || ctrl->value > 127) {

805  -
ERANGE
;

808 
°©e
->
c⁄åa°
 = 
˘æ
->
vÆue
;

809 
	`ßa711x_wrôe
(
˛õ¡
, 
R_0B_LUMA_CONTRAST_CNTL
, 
°©e
->
c⁄åa°
);

812 
V4L2_CID_SATURATION
:

813 i‡(
˘æ
->
vÆue
 < 0 || ctrl->value > 127) {

815  -
ERANGE
;

818 
°©e
->
ßt
 = 
˘æ
->
vÆue
;

819 
	`ßa711x_wrôe
(
˛õ¡
, 
R_0C_CHROMA_SAT_CNTL
, 
°©e
->
ßt
);

822 
V4L2_CID_HUE
:

823 i‡(
˘æ
->
vÆue
 < -127 || ctrl->value > 127) {

825  -
ERANGE
;

828 
°©e
->
hue
 = 
˘æ
->
vÆue
;

829 
	`ßa711x_wrôe
(
˛õ¡
, 
R_0D_CHROMA_HUE_CNTL
, 
°©e
->
hue
);

833  -
EINVAL
;

837 
	}
}

839 
	$ßa711x_gë_v4l˘æ
(
i2c_˛õ¡
 *
˛õ¡
, 
v4l2_c⁄åﬁ
 *
˘æ
)

841 
ßa711x_°©e
 *
°©e
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

843 
˘æ
->
id
) {

844 
V4L2_CID_BRIGHTNESS
:

845 
˘æ
->
vÆue
 = 
°©e
->
bright
;

847 
V4L2_CID_CONTRAST
:

848 
˘æ
->
vÆue
 = 
°©e
->
c⁄åa°
;

850 
V4L2_CID_SATURATION
:

851 
˘æ
->
vÆue
 = 
°©e
->
ßt
;

853 
V4L2_CID_HUE
:

854 
˘æ
->
vÆue
 = 
°©e
->
hue
;

857  -
EINVAL
;

861 
	}
}

863 
	$ßa711x_£t_size
(
i2c_˛õ¡
 *
˛õ¡
, 
width
, 
height
)

865 
ßa711x_°©e
 *
°©e
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

866 
HPSC
, 
HFSC
;

867 
VSCY
;

868 
ªs
;

869 
is_50hz
 = 
°©e
->
°d
 & 
V4L2_STD_625_50
;

870 
V§c
 = 
is_50hz
 ? 576 : 480;

875 i‡((
width
 < 1) || (width > 1440))

876  -
EINVAL
;

877 i‡((
height
 < 1Ë|| (heighà> 
V§c
))

878  -
EINVAL
;

880 i‡(!
	`ßa711x_has_ªg
(
°©e
->
idít
,
R_D0_B_HORIZ_PRESCALING
)) {

882 i‡(
width
 != 720)

883  -
EINVAL
;

884 i‡(
height
 !
V§c
)

885  -
EINVAL
;

888 
°©e
->
width
 = width;

889 
°©e
->
height
 = height;

891 i‡(!
	`ßa711x_has_ªg
(
°©e
->
idít
, 
R_CC_B_HORIZ_OUTPUT_WINDOW_LENGTH
))

898 
	`ßa711x_wrôe
(
˛õ¡
, 
R_CC_B_HORIZ_OUTPUT_WINDOW_LENGTH
,

899 (
u8
Ë(
width
 & 0xff));

900 
	`ßa711x_wrôe
(
˛õ¡
, 
R_CD_B_HORIZ_OUTPUT_WINDOW_LENGTH_MSB
,

901 (
u8
Ë((
width
 >> 8) & 0xff));

904 
ªs
=
height
/2;

907 i‡(!
is_50hz
)

908 
ªs
 +(
VRES_60HZ
 - 480) >> 1;

911 
	`ßa711x_wrôe
(
˛õ¡
, 
R_CE_B_VERT_OUTPUT_WINDOW_LENGTH
,

912 (
u8
Ë(
ªs
 & 0xff));

913 
	`ßa711x_wrôe
(
˛õ¡
, 
R_CF_B_VERT_OUTPUT_WINDOW_LENGTH_MSB
,

914 (
u8
Ë((
ªs
 >> 8) & 0xff));

918 
HPSC
 = ()(720 / 
width
);

920 
HPSC
 = HPSC ? HPSC : 1;

921 
HFSC
 = ()((1024 * 720Ë/ (
HPSC
 * 
width
));

924 
	`ßa711x_wrôe
(
˛õ¡
, 
R_D0_B_HORIZ_PRESCALING
,

925 (
u8
Ë(
HPSC
 & 0x3f));

929 
	`ßa711x_wrôe
(
˛õ¡
, 
R_D8_B_HORIZ_LUMA_SCALING_INC
,

930 (
u8
Ë(
HFSC
 & 0xff));

931 
	`ßa711x_wrôe
(
˛õ¡
, 
R_D9_B_HORIZ_LUMA_SCALING_INC_MSB
,

932 (
u8
Ë((
HFSC
 >> 8) & 0xff));

935 
	`ßa711x_wrôe
(
˛õ¡
, 
R_DC_B_HORIZ_CHROMA_SCALING
,

936 (
u8
Ë((
HFSC
 >> 1) & 0xff));

937 
	`ßa711x_wrôe
(
˛õ¡
, 
R_DD_B_HORIZ_CHROMA_SCALING_MSB
,

938 (
u8
Ë((
HFSC
 >> 9) & 0xff));

940 
VSCY
 = ()((1024 * 
V§c
Ë/ 
height
);

944 
	`ßa711x_wrôe
(
˛õ¡
, 
R_D5_B_LUMA_CONTRAST_CNTL
,

945 (
u8
Ë(64 * 1024 / 
VSCY
));

946 
	`ßa711x_wrôe
(
˛õ¡
, 
R_D6_B_CHROMA_SATURATION_CNTL
,

947 (
u8
Ë(64 * 1024 / 
VSCY
));

950 
	`ßa711x_wrôe
(
˛õ¡
, 
R_E0_B_VERT_LUMA_SCALING_INC
,

951 (
u8
Ë(
VSCY
 & 0xff));

952 
	`ßa711x_wrôe
(
˛õ¡
, 
R_E1_B_VERT_LUMA_SCALING_INC_MSB
,

953 (
u8
Ë((
VSCY
 >> 8) & 0xff));

955 
	`ßa711x_wrôe
(
˛õ¡
, 
R_E2_B_VERT_CHROMA_SCALING_INC
,

956 (
u8
Ë(
VSCY
 & 0xff));

957 
	`ßa711x_wrôe
(
˛õ¡
, 
R_E3_B_VERT_CHROMA_SCALING_INC_MSB
,

958 (
u8
Ë((
VSCY
 >> 8) & 0xff));

960 
	`ßa711x_wrôîegs
(
˛õ¡
, 
ßa7115_cfg_ª£t_sˇÀr
);

963 
	`ßa711x_wrôe
(
˛õ¡
, 
R_80_GLOBAL_CNTL_1
,

964 
	`ßa711x_ªad
(
˛õ¡
,
R_80_GLOBAL_CNTL_1
) | 0x20);

967 
	}
}

969 
	$ßa711x_£t_v4l°d
(
i2c_˛õ¡
 *
˛õ¡
, 
v4l2_°d_id
 
°d
)

971 
ßa711x_°©e
 *
°©e
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

980 i‡(
°d
 =
°©e
->std)

983 
°©e
->
°d
 = std;

986 i‡(
°d
 & 
V4L2_STD_525_60
) {

988 
	`ßa711x_wrôîegs
(
˛õ¡
, 
ßa7115_cfg_60hz_video
);

989 
	`ßa711x_£t_size
(
˛õ¡
, 720, 480);

992 
	`ßa711x_wrôîegs
(
˛õ¡
, 
ßa7115_cfg_50hz_video
);

993 
	`ßa711x_£t_size
(
˛õ¡
, 720, 576);

1005 i‡(
°©e
->
idít
 =
V4L2_IDENT_SAA7111
 ||

1006 
°©e
->
idít
 =
V4L2_IDENT_SAA7113
) {

1007 
u8
 
ªg
 = 
	`ßa711x_ªad
(
˛õ¡
, 
R_0E_CHROMA_CNTL_1
) & 0x8f;

1009 i‡(
°d
 =
V4L2_STD_PAL_M
) {

1010 
ªg
 |= 0x30;

1011 } i‡(
°d
 =
V4L2_STD_PAL_N
) {

1012 
ªg
 |= 0x20;

1013 } i‡(
°d
 =
V4L2_STD_PAL_60
) {

1014 
ªg
 |= 0x10;

1015 } i‡(
°d
 =
V4L2_STD_NTSC_M_JP
) {

1016 
ªg
 |= 0x40;

1017 } i‡(
°d
 & 
V4L2_STD_SECAM
) {

1018 
ªg
 |= 0x50;

1020 
	`ßa711x_wrôe
(
˛õ¡
, 
R_0E_CHROMA_CNTL_1
, 
ªg
);

1023 
èskb
 = 
	`ßa711x_ªad
(
˛õ¡
, 
R_80_GLOBAL_CNTL_1
) & 0x10;

1025 i‡(
èskb
 && 
°©e
->
idít
 =
V4L2_IDENT_SAA7114
) {

1026 
	`ßa711x_wrôîegs
(
˛õ¡
, 
ßa7115_cfg_vbi_⁄
);

1030 
	`ßa711x_£t_audio_˛ock_‰eq
(
˛õ¡
, 
°©e
->
aud˛k_‰eq
);

1032 
	}
}

1034 
v4l2_°d_id
 
	$ßa711x_gë_v4l°d
(
i2c_˛õ¡
 *
˛õ¡
)

1036 
ßa711x_°©e
 *
°©e
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

1038  
°©e
->
°d
;

1039 
	}
}

1041 
	$ßa711x_log_°©us
(
i2c_˛õ¡
 *
˛õ¡
)

1043 
ßa711x_°©e
 *
°©e
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

1044 
ªg1e
, 
ªg1f
;

1045 
sig«lOk
;

1046 
v¸
;

1049 i‡(
°©e
->
idít
 !
V4L2_IDENT_SAA7115
) {

1051 
ªg1f
 = 
	`ßa711x_ªad
(
˛õ¡
, 
R_1F_STATUS_BYTE_2_VD_DEC
);

1052 
sig«lOk
 = (
ªg1f
 & 0xc1) == 0x81;

1059 
ªg1e
 = 
	`ßa711x_ªad
(
˛õ¡
, 
R_1E_STATUS_BYTE_1_VD_DEC
);

1060 
ªg1f
 = 
	`ßa711x_ªad
(
˛õ¡
, 
R_1F_STATUS_BYTE_2_VD_DEC
);

1062 
sig«lOk
 = (
ªg1f
 & 0xc1Ë=0x81 && (
ªg1e
 & 0xc0) == 0x80;

1063 
v¸
 = !(
ªg1f
 & 0x10);

1073 
ªg1e
 & 0x03) {

1088 
	}
}

1091 
	$ßa711x_£t_l¸
(
i2c_˛õ¡
 *
˛õ¡
, 
v4l2_¶i˚d_vbi_f‹m©
 *
fmt
)

1093 
ßa711x_°©e
 *
°©e
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

1094 
is_50hz
 = (
°©e
->
°d
 & 
V4L2_STD_625_50
);

1095 
u8
 
l¸
[24];

1096 
i
, 
x
;

1100 i‡(!
	`ßa711x_has_ªg
(
°©e
->
idít
,
R_41_LCR_BASE
))

1105 i‡(
°©e
->
idít
 !
V4L2_IDENT_SAA7115
)

1109 
i
 = 0; i <= 23; i++)

1110 
l¸
[
i
] = 0xff;

1112 i‡(
fmt
->
£rvi˚_£t
 == 0) {

1114 i‡(
is_50hz
)

1115 
i
 = 6; i <= 23; i++)

1116 
l¸
[
i
] = 0xdd;

1118 
i
 = 10; i <= 21; i++)

1119 
l¸
[
i
] = 0xdd;

1123 i‡(
is_50hz
) {

1124 
i
 = 0; i <= 5; i++)

1125 
fmt
->
£rvi˚_löes
[0][
i
] =

1126 
fmt
->
£rvi˚_löes
[1][
i
] = 0;

1129 
i
 = 0; i <= 9; i++)

1130 
fmt
->
£rvi˚_löes
[0][
i
] =

1131 
fmt
->
£rvi˚_löes
[1][
i
] = 0;

1132 
i
 = 22; i <= 23; i++)

1133 
fmt
->
£rvi˚_löes
[0][
i
] =

1134 
fmt
->
£rvi˚_löes
[1][
i
] = 0;

1138 
i
 = 6; i <= 23; i++) {

1139 
l¸
[
i
] = 0;

1140 
x
 = 0; x <= 1; x++) {

1141 
fmt
->
£rvi˚_löes
[1-
x
][
i
]) {

1143 
l¸
[
i
] |0x‡<< (4 * 
x
);

1145 
V4L2_SLICED_TELETEXT_B
:

1146 
l¸
[
i
] |1 << (4 * 
x
);

1148 
V4L2_SLICED_CAPTION_525
:

1149 
l¸
[
i
] |4 << (4 * 
x
);

1151 
V4L2_SLICED_WSS_625
:

1152 
l¸
[
i
] |5 << (4 * 
x
);

1154 
V4L2_SLICED_VPS
:

1155 
l¸
[
i
] |7 << (4 * 
x
);

1163 
i
 = 2; i <= 23; i++) {

1164 
	`ßa711x_wrôe
(
˛õ¡
, 
i
 - 2 + 
R_41_LCR_BASE
, 
l¸
[i]);

1168 
	`ßa711x_wrôîegs
(
˛õ¡
, 
fmt
->
£rvi˚_£t
 == 0 ?

1169 
ßa7115_cfg_vbi_⁄
 :

1170 
ßa7115_cfg_vbi_off
);

1171 
	}
}

1173 
	$ßa711x_gë_v4lfmt
(
i2c_˛õ¡
 *
˛õ¡
, 
v4l2_f‹m©
 *
fmt
)

1175 
u16
 
l¸2vbi
[] = {

1176 0, 
V4L2_SLICED_TELETEXT_B
, 0,

1177 0, 
V4L2_SLICED_CAPTION_525
,

1178 
V4L2_SLICED_WSS_625
, 0,

1179 
V4L2_SLICED_VPS
, 0, 0, 0, 0,

1182 
v4l2_¶i˚d_vbi_f‹m©
 *
¶i˚d
 = &
fmt
->fmt.sliced;

1183 
i
;

1185 i‡(
fmt
->
ty≥
 !
V4L2_BUF_TYPE_SLICED_VBI_CAPTURE
)

1186  -
EINVAL
;

1187 
	`mem£t
(
¶i˚d
, 0, (*sliced));

1189 i‡(
	`ßa711x_ªad
(
˛õ¡
, 
R_80_GLOBAL_CNTL_1
) & 0x10)

1191 
i
 = 2; i <= 23; i++) {

1192 
u8
 
v
 = 
	`ßa711x_ªad
(
˛õ¡
, 
i
 - 2 + 
R_41_LCR_BASE
);

1194 
¶i˚d
->
£rvi˚_löes
[0][
i
] = 
l¸2vbi
[
v
 >> 4];

1195 
¶i˚d
->
£rvi˚_löes
[1][
i
] = 
l¸2vbi
[
v
 & 0xf];

1196 
¶i˚d
->
£rvi˚_£t
 |=

1197 
¶i˚d
->
£rvi˚_löes
[0][
i
] | sliced->service_lines[1][i];

1200 
	}
}

1202 
	$ßa711x_£t_v4lfmt
(
i2c_˛õ¡
 *
˛õ¡
, 
v4l2_f‹m©
 *
fmt
)

1204 i‡(
fmt
->
ty≥
 =
V4L2_BUF_TYPE_SLICED_VBI_CAPTURE
) {

1205 
	`ßa711x_£t_l¸
(
˛õ¡
, &
fmt
->fmt.
¶i˚d
);

1208 i‡(
fmt
->
ty≥
 !
V4L2_BUF_TYPE_VIDEO_CAPTURE
)

1209  -
EINVAL
;

1211  
	`ßa711x_£t_size
(
˛õ¡
,
fmt
->fmt.
pix
.
width
,fmt->fmt.pix.
height
);

1212 
	}
}

1220 
	$ßa711x_decode_vbi_löe
(
i2c_˛õ¡
 *
˛õ¡
,

1221 
v4l2_decode_vbi_löe
 *
vbi
)

1223 c⁄° 
vbi_no_d©a_∑âîn
[] = {

1226 
ßa711x_°©e
 *
°©e
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

1227 
u8
 *
p
 = 
vbi
->p;

1228 
u32
 
wss
;

1229 
id1
, 
id2
;

1231 
vbi
->
ty≥
 = 0;

1232 
id1
 = 
p
[2];

1233 
id2
 = 
p
[3];

1235 i‡(
°©e
->
°d
 & 
V4L2_STD_525_60
)

1236 
id1
 ^= 0x40;

1239 
p
 += 4;

1240 
vbi
->
p
 =Ö;

1243 
vbi
->
is_£c⁄d_fõld
 = ((
id1
 & 0x40) != 0);

1244 
vbi
->
löe
 = (
id1
 & 0x3f) << 3;

1245 
vbi
->
löe
 |(
id2
 & 0x70) >> 4;

1248 
id2
 &= 0xf;

1252 i‡(!
	`memcmp
(
p
, 
vbi_no_d©a_∑âîn
, (vbi_no_data_pattern)))

1256 
id2
) {

1258 
vbi
->
ty≥
 = 
V4L2_SLICED_TELETEXT_B
;

1261 i‡(!
	`ßa711x_odd_∑rôy
(
p
[0]) || !saa711x_odd_parity(p[1]))

1263 
vbi
->
ty≥
 = 
V4L2_SLICED_CAPTION_525
;

1266 
wss
 = 
	`ßa711x_decode_wss
(
p
);

1267 i‡(
wss
 == -1)

1269 
p
[0] = 
wss
 & 0xff;

1270 
p
[1] = 
wss
 >> 8;

1271 
vbi
->
ty≥
 = 
V4L2_SLICED_WSS_625
;

1274 i‡(
	`ßa711x_decode_vps
(
p
,Ö) != 0)

1276 
vbi
->
ty≥
 = 
V4L2_SLICED_VPS
;

1281 
	}
}

1285 
	$ßa711x_comm™d
(
i2c_˛õ¡
 *
˛õ¡
, 
cmd
, *
¨g
)

1287 
ßa711x_°©e
 *
°©e
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

1291 
cmd
) {

1292 
VIDIOC_S_FMT
:

1293  
	`ßa711x_£t_v4lfmt
(
˛õ¡
, (
v4l2_f‹m©
 *)
¨g
);

1295 
VIDIOC_G_FMT
:

1296  
	`ßa711x_gë_v4lfmt
(
˛õ¡
, (
v4l2_f‹m©
 *)
¨g
);

1298 
VIDIOC_INT_AUDIO_CLOCK_FREQ
:

1299  
	`ßa711x_£t_audio_˛ock_‰eq
(
˛õ¡
, *(
u32
 *)
¨g
);

1301 
VIDIOC_G_TUNER
:

1303 
v4l2_tu√r
 *
vt
 = 
¨g
;

1304 
°©us
;

1306 i‡(
°©e
->
ødio
)

1308 
°©us
 = 
	`ßa711x_ªad
(
˛õ¡
, 
R_1F_STATUS_BYTE_2_VD_DEC
);

1311 
vt
->
sig«l
 = ((
°©us
 & (1 << 6)) == 0) ? 0xffff : 0x0;

1315 
VIDIOC_LOG_STATUS
:

1316 
	`ßa711x_log_°©us
(
˛õ¡
);

1319 
VIDIOC_G_CTRL
:

1320  
	`ßa711x_gë_v4l˘æ
(
˛õ¡
, (
v4l2_c⁄åﬁ
 *)
¨g
);

1322 
VIDIOC_S_CTRL
:

1323  
	`ßa711x_£t_v4l˘æ
(
˛õ¡
, (
v4l2_c⁄åﬁ
 *)
¨g
);

1325 
VIDIOC_QUERYCTRL
:

1327 
v4l2_quîy˘æ
 *
qc
 = 
¨g
;

1329 
qc
->
id
) {

1330 
V4L2_CID_BRIGHTNESS
:

1331 
V4L2_CID_CONTRAST
:

1332 
V4L2_CID_SATURATION
:

1333 
V4L2_CID_HUE
:

1334  
	`v4l2_˘æ_quîy_fûl_°d
(
qc
);

1336  -
EINVAL
;

1340 
VIDIOC_G_STD
:

1341 *(
v4l2_°d_id
 *)
¨g
 = 
	`ßa711x_gë_v4l°d
(
˛õ¡
);

1344 
VIDIOC_S_STD
:

1345 
°©e
->
ødio
 = 0;

1346 
	`ßa711x_£t_v4l°d
(
˛õ¡
, *(
v4l2_°d_id
 *)
¨g
);

1349 
AUDC_SET_RADIO
:

1350 
°©e
->
ødio
 = 1;

1353 
VIDIOC_INT_G_VIDEO_ROUTING
:

1355 
v4l2_routög
 *
rouã
 = 
¨g
;

1357 
rouã
->
öput
 = 
°©e
->input;

1358 
rouã
->
ouçut
 = 
°©e
->output;

1362 
VIDIOC_INT_S_VIDEO_ROUTING
:

1364 
v4l2_routög
 *
rouã
 = 
¨g
;

1368 i‡(
°©e
->
idít
 =
V4L2_IDENT_SAA7113
 &&

1369 (
rouã
->
öput
 =
SAA7115_COMPOSITE4
 ||

1370 
rouã
->
öput
 =
SAA7115_COMPOSITE5
)) {

1371  -
EINVAL
;

1373 i‡(
rouã
->
öput
 > 
SAA7115_SVIDEO3
)

1374  -
EINVAL
;

1375 i‡(
rouã
->
ouçut
 > 
SAA7115_IPORT_ON
)

1376  -
EINVAL
;

1377 i‡(
°©e
->
öput
 =
rouã
->öpuà&& sèã->
ouçut
 ==Ñoute->output)

1381 
°©e
->
öput
 = 
rouã
->input;

1384 
	`ßa711x_wrôe
(
˛õ¡
, 
R_02_INPUT_CNTL_1
,

1385 (
	`ßa711x_ªad
(
˛õ¡
, 
R_02_INPUT_CNTL_1
) & 0xf0) |

1386 
°©e
->
öput
);

1389 
	`ßa711x_wrôe
(
˛õ¡
, 
R_09_LUMA_CNTL
,

1390 (
	`ßa711x_ªad
(
˛õ¡
, 
R_09_LUMA_CNTL
) & 0x7f) |

1391 (
°©e
->
öput
 >
SAA7115_SVIDEO0
 ? 0x80 : 0x0));

1393 
°©e
->
ouçut
 = 
rouã
->output;

1394 i‡(
°©e
->
idít
 =
V4L2_IDENT_SAA7114
 ||

1395 
°©e
->
idít
 =
V4L2_IDENT_SAA7115
) {

1396 
	`ßa711x_wrôe
(
˛õ¡
, 
R_83_X_PORT_I_O_ENA_AND_OUT_CLK
,

1397 (
	`ßa711x_ªad
(
˛õ¡
, 
R_83_X_PORT_I_O_ENA_AND_OUT_CLK
) & 0xfe) |

1398 (
°©e
->
ouçut
 & 0x01));

1403 
VIDIOC_STREAMON
:

1404 
VIDIOC_STREAMOFF
:

1408 i‡(
°©e
->
íabÀ
 !(
cmd
 =
VIDIOC_STREAMON
)) {

1409 
°©e
->
íabÀ
 = (
cmd
 =
VIDIOC_STREAMON
);

1410 
	`ßa711x_wrôe
(
˛õ¡
,

1411 
R_87_I_PORT_I_O_ENA_OUT_CLK_AND_GATED
,

1412 
°©e
->
íabÀ
);

1416 
VIDIOC_INT_S_CRYSTAL_FREQ
:

1418 
v4l2_¸y°Æ_‰eq
 *
‰eq
 = 
¨g
;

1420 i‡(
‰eq
->‰eq !
SAA7115_FREQ_32_11_MHZ
 &&

1421 
‰eq
->‰eq !
SAA7115_FREQ_24_576_MHZ
)

1422  -
EINVAL
;

1423 
°©e
->
¸y°Æ_‰eq
 = 
‰eq
->freq;

1424 
°©e
->
cgcdiv
 = (
‰eq
->
Êags
 & 
SAA7115_FREQ_FL_CGCDIV
) ? 3 : 4;

1425 
°©e
->
ucgc
 = (
‰eq
->
Êags
 & 
SAA7115_FREQ_FL_UCGC
) ? 1 : 0;

1426 
°©e
->
≠Œ
 = (
‰eq
->
Êags
 & 
SAA7115_FREQ_FL_APLL
) ? 1 : 0;

1427 
	`ßa711x_£t_audio_˛ock_‰eq
(
˛õ¡
, 
°©e
->
aud˛k_‰eq
);

1431 
VIDIOC_INT_DECODE_VBI_LINE
:

1432 
	`ßa711x_decode_vbi_löe
(
˛õ¡
, 
¨g
);

1435 
VIDIOC_INT_RESET
:

1437 
	`ßa711x_wrôîegs
(
˛õ¡
, 
ßa7115_cfg_ª£t_sˇÀr
);

1440 
VIDIOC_INT_G_VBI_DATA
:

1442 
v4l2_¶i˚d_vbi_d©a
 *
d©a
 = 
¨g
;

1447 
d©a
->
id
) {

1448 
V4L2_SLICED_WSS_625
:

1449 i‡(
	`ßa711x_ªad
(
˛õ¡
, 0x6b) & 0xc0)

1450  -
EIO
;

1451 
d©a
->d©a[0] = 
	`ßa711x_ªad
(
˛õ¡
, 0x6c);

1452 
d©a
->d©a[1] = 
	`ßa711x_ªad
(
˛õ¡
, 0x6d);

1454 
V4L2_SLICED_CAPTION_525
:

1455 i‡(
d©a
->
fõld
 == 0) {

1457 i‡(
	`ßa711x_ªad
(
˛õ¡
, 0x66) & 0x30)

1458  -
EIO
;

1459 
d©a
->d©a[0] = 
	`ßa711x_ªad
(
˛õ¡
, 0x69);

1460 
d©a
->d©a[1] = 
	`ßa711x_ªad
(
˛õ¡
, 0x6a);

1464 i‡(
	`ßa711x_ªad
(
˛õ¡
, 0x66) & 0xc0)

1465  -
EIO
;

1466 
d©a
->d©a[0] = 
	`ßa711x_ªad
(
˛õ¡
, 0x67);

1467 
d©a
->d©a[1] = 
	`ßa711x_ªad
(
˛õ¡
, 0x68);

1470  -
EINVAL
;

1476 
VIDIOC_DBG_G_REGISTER
:

1477 
VIDIOC_DBG_S_REGISTER
:

1479 
v4l2_ªgi°î
 *
ªg
 = 
¨g
;

1481 i‡(!
	`v4l2_chù_m©ch_i2c_˛õ¡
(
˛õ¡
, 
ªg
->
m©ch_ty≥
,Ñeg->
m©ch_chù
))

1482  -
EINVAL
;

1483 i‡(!
	`ˇ∑bÀ
(
CAP_SYS_ADMIN
))

1484  -
EPERM
;

1485 i‡(
cmd
 =
VIDIOC_DBG_G_REGISTER
)

1486 
ªg
->
vÆ
 = 
	`ßa711x_ªad
(
˛õ¡
,Ñeg->reg & 0xff);

1488 
	`ßa711x_wrôe
(
˛õ¡
, 
ªg
->ªg & 0xff,Ñeg->
vÆ
 & 0xff);

1493 
VIDIOC_INT_G_CHIP_IDENT
:

1494 *
ürg
 = 
°©e
->
idít
;

1498  -
EINVAL
;

1502 
	}
}

1506 
i2c_drivî
 
	gi2c_drivî_ßa711x
;

1508 
	$ßa711x_©èch
(
i2c_ad≠ãr
 *
ad≠ãr
, 
addªss
, 
köd
)

1510 
i2c_˛õ¡
 *
˛õ¡
;

1511 
ßa711x_°©e
 *
°©e
;

1513 
vîsi⁄
;

1514 
«me
[17];

1515 
u8
 
chù_id
;

1517 i‡(!
	`i2c_check_fun˘i⁄Æôy
(
ad≠ãr
, 
I2C_FUNC_SMBUS_BYTE_DATA
))

1520 
˛õ¡
 = 
	`kzÆloc
((
i2c_˛õ¡
), 
GFP_KERNEL
);

1522 i‡(
˛õ¡
 == 0)

1523  -
ENOMEM
;

1525 
˛õ¡
->
addr
 = 
addªss
;

1526 
˛õ¡
->
ad≠ãr
 =ádapter;

1527 
˛õ¡
->
drivî
 = &
i2c_drivî_ßa711x
;

1528 
	`¢¥ötf
(
˛õ¡
->
«me
, (client->name) - 1, "saa711x");

1530 i‡(
köd
 < 0) {

1532 
vîsi⁄
 = 
	`i2c_smbus_ªad_byã_d©a
 (
˛õ¡
, 
SAA7113H_VERSION_ID_REG
);

1535 i‡(
vîsi⁄
 == -1){

1536 
	`¥ötk
("i2¯î∏©ádd∏0x%x\n",
addªss
);

1541 i‡((
vîsi⁄
 & 0xf0Ë!
SAA7113H_I2C_VERSION_ID
) {

1542 
	`¥ötk
 ("unknow¿SAA711x chù found, chù vîsi⁄: %#x\n", 
vîsi⁄
);

1549 
	`¥ötk
 ("video decoder chipáttached,"

1550 "Ñev 0x%02xáà%#02x\n", 
vîsi⁄
,

1551 (
˛õ¡
->
addr
 << 1));

1555 
	`¥ötk
 ("detection skipped\n");

1560 
i
 = 0; i < 0x0f; i++) {

1561 
	`ßa711x_wrôe
(
˛õ¡
, 0, 
i
);

1562 
«me
[
i
] = (
	`ßa711x_ªad
(
˛õ¡
, 0) & 0x0f) + '0';

1563 i‡(
«me
[
i
] > '9')

1564 
«me
[
i
] += 'a' - '9' - 1;

1565 
	`¥ötk
("«mê[%d] i†%d\n",
i
,
«me
[i]);

1567 
«me
[
i
] = '\0';

1569 
	`ßa711x_wrôe
(
˛õ¡
, 0, 5);

1570 
chù_id
 = 
	`ßa711x_ªad
(
˛õ¡
, 0) & 0x0f;

1572 
chù_id
 = 3 ;

1576 i‡(
	`memcmp
(
«me
, "1f711", 5)) {

1577 
	`¥ötk
("llll\n");

1578 
	`v4l_dbg
(1, 
debug
, 
˛õ¡
, "chip found @ 0x%x (ID %s) doesÇot matchá known saa711x chip.\n",

1579 
addªss
 << 1, 
«me
);

1584 
	`¢¥ötf
(
˛õ¡
->
«me
, (˛õ¡->«meË- 1, "ßa711%d",
chù_id
);

1585 
	`¥ötk
("SAA711%d found (%sË@ 0x%x (%s)\n", 
chù_id
, 
«me
, 
addªss
 << 1, 
ad≠ãr
->name);

1587 
°©e
 = 
	`kzÆloc
((
ßa711x_°©e
), 
GFP_KERNEL
);

1588 
	`i2c_£t_˛õ¡d©a
(
˛õ¡
, 
°©e
);

1589 i‡(
°©e
 =
NULL
) {

1590 
	`¥ötk
("state is NULL\n");

1591 
	`k‰ì
(
˛õ¡
);

1592  -
ENOMEM
;

1595 
°©e
->
öput
 = -1;

1596 
°©e
->
ouçut
 = 
SAA7115_IPORT_ON
;

1597 
°©e
->
íabÀ
 = 1;

1598 
°©e
->
ødio
 = 0;

1599 
°©e
->
bright
 = 128;

1600 
°©e
->
c⁄åa°
 = 64;

1601 
°©e
->
hue
 = 0;

1602 
°©e
->
ßt
 = 64;

1603 
chù_id
) {

1605 
°©e
->
idít
 = 
V4L2_IDENT_SAA7111
;

1608 
°©e
->
idít
 = 
V4L2_IDENT_SAA7113
;

1611 
°©e
->
idít
 = 
V4L2_IDENT_SAA7114
;

1614 
°©e
->
idít
 = 
V4L2_IDENT_SAA7115
;

1617 
°©e
->
idít
 = 
V4L2_IDENT_SAA7118
;

1620 
°©e
->
idít
 = 
V4L2_IDENT_SAA7111
;

1625 
°©e
->
aud˛k_‰eq
 = 48000;

1628 
°©e
->
¸y°Æ_‰eq
 = 
SAA7115_FREQ_24_576_MHZ
;

1629 
°©e
->
idít
) {

1630 
V4L2_IDENT_SAA7111
:

1631 
	`ßa711x_wrôîegs
(
˛õ¡
, 
ßa7111_öô
);

1633 
V4L2_IDENT_SAA7113
:

1634 
	`ßa711x_wrôîegs
(
˛õ¡
, 
ßa7113_öô
);

1637 
°©e
->
¸y°Æ_‰eq
 = 
SAA7115_FREQ_32_11_MHZ
;

1638 
	`ßa711x_wrôîegs
(
˛õ¡
, 
ßa7115_öô_auto_öput
);

1640 
	`ßa711x_wrôîegs
(
˛õ¡
, 
ßa7115_öô_misc
);

1642 
	`ßa711x_£t_v4l°d
(
˛õ¡
, 
V4L2_STD_PAL
);

1644 
˛õ¡
->
d©a
 = &
öãæa˚_öput
;

1645 
öãæa˚_öput
.
£ns‹
 = 
˛õ¡
;

1646 
	`ˇmif_ªgi°î_cis
(
˛õ¡
);

1649 
	`i2c_©èch_˛õ¡
(
˛õ¡
);

1651 
	`¥ötk
("SAA7113 driver OK!\n");

1653 
	}
}

1655 
	$ßa711x_¥obe
(
i2c_ad≠ãr
 *
ad≠
)

1657  
	`i2c_¥obe
(
ad≠
, &
addr_d©a
, 
ßa711x_©èch
);

1658 
	}
};

1660 
	$ßa711x_dëach
(
i2c_˛õ¡
 *
˛õ¡
)

1662 
ßa711x_°©e
 *
°©e
 = 
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

1663 
îr
;

1665 
îr
 = 
	`i2c_dëach_˛õ¡
(
˛õ¡
);

1666 i‡(
îr
) {

1667  
îr
;

1670 
	`k‰ì
(
°©e
);

1671 
	`k‰ì
(
˛õ¡
);

1673 
	}
}

1678 
i2c_drivî
 
	gi2c_drivî_ßa711x
 = {

1679 .
drivî
 = {

1680 .
«me
 = "saa711x",

1682 .
	gid
 = 
I2C_DRIVERID_SAA711X
,

1683 .
	g©èch_ad≠ãr
 = 
ßa711x_¥obe
,

1684 .
	gdëach_˛õ¡
 = 
ßa711x_dëach
,

1685 .
	gcomm™d
 = 
ßa711x_comm™d
,

1689 
__öô
 
	$ßa711x_öô_moduÀ
()

1691  
	`i2c_add_drivî
(&
i2c_drivî_ßa711x
);

1692 
	}
}

1694 
__exô
 
	$ßa711x_˛ónup_moduÀ
()

1696 
	`i2c_dñ_drivî
(&
i2c_drivî_ßa711x
);

1697 
	}
}

1699 
moduÀ_öô
(
ßa711x_öô_moduÀ
);

1700 
moduÀ_exô
(
ßa711x_˛ónup_moduÀ
);

	@saa7113h.h

1 #i‚de‡
__SAA7113H_H


2 
	#__SAA7113H_H


	)

4 
	~<löux/i2c.h
>

5 
	~<löux/videodev.h
>

6 
	~<löux/video_decodî.h
>

10 
	#SAA7113H_DEVICE_NAME
 "SAA7113H"

	)

17 
	#SAA7113H_NR_REGISTER
 99

	)

20 
__u8
 
	mID
;

21 } 
	tßa7113h_r00_t
, 
	tßa7113h_chù_vîsi⁄_t
;

24 
__u8
 
	mIDEL
 : 1;

28 
__u8
 
	m_X_
 : 4;

29 } 
	tßa7113h_r01_t
, 
	tßa7113h_ö¸emít_dñay_t
;

32 
__u8
 
	mMODE
 : 4;

51 
__u8
 
	mGULD
 : 2;

53 
__u8
 
	mFUSE
 : 2;

60 } 
	tßa7113h_r02_t
, 
	tßa7113h_™Æog_öput_c⁄åﬁ_1_t
;

64 
__u8
 
	mGAI1_MSB
 : 1;

65 
__u8
 
	mGAI2_MSB
 : 1;

66 
__u8
 
	mGAFIX
 : 1;

72 
__u8
 
	mHOLDG
 : 1;

78 
__u8
 
	mWPOFF
 : 1;

84 
__u8
 
	mVBSL
 : 1;

91 
__u8
 
	mHLNRS
 : 1;

97 
__u8
 
	m_X_
 : 1;

98 } 
	tßa7113h_r03_t
, 
	tßa7113h_™Æog_öput_c⁄åﬁ_2_t
;

102 
__u8
 
	mGAI1
 : 8;

109 } 
	tßa7113h_r04_t
, 
	tßa7113h_™Æog_öput_c⁄åﬁ_3_t
;

112 
__u8
 
	mGAI2
 : 8;

119 } 
	tßa7113h_r05_t
, 
	tßa7113h_™Æog_öput_c⁄åﬁ_4_t
;

122 
__u8
 
	mHSB
 : 8;

127 } 
	tßa7113h_r06_t
, 
	tßa7113h_h‹iz⁄èl_sync_°¨t_t
;

130 
__u8
 
	mHSS
 : 8;

135 } 
	tßa7113h_r07_t
, 
	tßa7113h_h‹iz⁄èl_sync_°›_t
;

138 
__u8
 
	mVNOI
 : 2;

146 
	#SAA7113H_HPLL_CLOSED
 0

	)

147 
	#SAA7113H_HPLL_OPEN
 1

	)

149 
__u8
 
	mHPLL
 : 1;

155 
	#SAA7113H_HTC_TV
 0

	)

156 
	#SAA7113H_HTC_VTR
 1

	)

157 
	#SAA7113H_HTC_FAST
 3

	)

159 
__u8
 
	mHTC
 : 2;

168 
__u8
 
	mFOET
 : 1;

174 
	#SAA7113H_FSEL_50HZ
 0

	)

175 
	#SAA7113H_FSEL_60HZ
 1

	)

177 
__u8
 
	mFSEL
 : 1;

183 
	#SAA7113H_AUFD_AUTO
 1

	)

184 
	#SAA7113H_AUFD_FIXED
 0

	)

186 
__u8
 
	mAUFD
 : 1;

191 } 
	tßa7113h_r08_t
, 
	tßa7113h_sync_c⁄åﬁ_t
;

194 
__u8
 
	mAPER
 : 2;

202 
__u8
 
	mUPTCV
 : 1;

208 
__u8
 
	mVBLB
 : 1;

215 
__u8
 
	mBPSS
 : 2;

223 
__u8
 
	mPREF
 : 1;

224 
__u8
 
	mBYPS
 : 1;

229 } 
	tßa7113h_r09_t
, 
	tßa7113h_lumö™˚_c⁄åﬁ_t
;

232 
	#SAA7113H_BRIG_NTSCJ
 0x95

	)

233 
	#SAA7113H_BRIG_CCIR
 0x80

	)

234 
__u8
 
	mBRIG
 : 8;

235 } 
	tßa7113h_r0a_t
, 
	tßa7113h_lumö™˚_brighäess_t
;

238 
	#SAA7113H_CONT_NTSCJ
 0x48

	)

239 
__u8
 
	mCONT
 : 8;

247 } 
	tßa7113h_r0b_t
, 
	tßa7113h_lumö™˚_c⁄åa°_t
;

250 
__u8
 
	mSATN
 : 8;

257 } 
	tßa7113h_r0c_t
, 
	tßa7113h_chromö™˚_ßtuøti⁄_t
;

260 
__u8
 
	mHUE
 : 8;

265 } 
	tßa7113h_r0d_t
, 
	tßa7113h_chromö™˚_hue_c⁄åﬁ_t
;

268 
__u8
 
	mCHBW
 : 2;

276 
__u8
 
	mFCTC
 : 1;

282 
__u8
 
	mDCCF
 : 1;

288 
	#SAA7113H_CSTD_PALB
 0

	)

289 
	#SAA7113H_CSTD_NTSCM
 0

	)

290 
	#SAA7113H_CSTD_NTSCJ
 0

	)

291 
	#SAA7113H_CSTD_NTSC50
 1

	)

292 
	#SAA7113H_CSTD_PAL60
 1

	)

293 
	#SAA7113H_CSTD_PALN
 2

	)

294 
	#SAA7113H_CSTD_NTSC60
 2

	)

295 
	#SAA7113H_CSTD_NTSCN
 3

	)

296 
	#SAA7113H_CSTD_PALM
 3

	)

297 
	#SAA7113H_CSTD_SECAM
 5

	)

299 
__u8
 
	mCSTD
 : 3;

310 
__u8
 
	mCDT0
 : 1;

317 } 
	tßa7113h_r0e_t
, 
	tßa7113h_chromö™˚_c⁄åﬁ_t
;

320 
__u8
 
	mCGAIN
 : 7;

325 
__u8
 
	mACGC
 : 1;

330 } 
	tßa7113h_r0f_t
, 
	tßa7113h_chromö™˚_gaö_c⁄åﬁ_t
;

333 
__u8
 
	mYDEL
 : 3;

335 
__u8
 
	mVRLN
 : 1;

343 
__u8
 
	mHDEL
 : 2;

345 
__u8
 
	mOFTS
 : 2;

352 } 
	tßa7113h_r10_t
, 
	tßa7113h_f‹m©_dñay_c⁄åﬁ_t
;

355 
__u8
 
	mCOLO
 : 1;

357 
__u8
 
	mVIPB
 : 1;

363 
	#SAA7113H_OERT_DISABLE
 0

	)

364 
	#SAA7113H_OERT_ENABLE
 1

	)

366 
__u8
 
	mOERT
 : 1;

372 
	#SAA7113H_OEYC_DISABLE
 0

	)

373 
	#SAA7113H_OEYC_ENABLE
 1

	)

375 
__u8
 
	mOEYC
 : 1;

381 
__u8
 
	mHLSEL
 : 1;

389 
__u8
 
	mGPSW0
 : 1;

391 
__u8
 
	mCM99
 : 1;

397 
__u8
 
	mGPSW1
 : 1;

398 } 
	tßa7113h_r11_t
, 
	tßa7113h_ouçut_c⁄åﬁ_1_t
;

401 
__u8
 
	mRTSE0
 : 4;

413 
__u8
 
	mRTSE1
 : 4;

414 } 
	tßa7113h_r12_t
, 
	tßa7113h_ouçut_c⁄åﬁ_2_t
;

417 
__u8
 
	mAOSL
 : 2;

424 
__u8
 
	m_X_
 : 1;

425 
__u8
 
	mFIDP
 : 1;

430 
__u8
 
	mOLDSB
 : 1;

431 
__u8
 
	m_XX_
 : 2;

432 
__u8
 
	mADLSB
 : 1;

433 } 
	tßa7113h_r13_t
, 
	tßa7113h_ouçut_c⁄åﬁ_3_t
;

435 
__u8
 
	tßa7113h_r14_t
;

438 
__u8
 
	mVSTA
 : 8;

439 } 
	tßa7113h_r15_t
, 
	tßa7113h_VGATE_°¨t_t
;

442 
__u8
 
	mVSTO
 : 8;

443 } 
	tßa7113h_r16_t
, 
	tßa7113h_VGATE_°›_t
;

446 
__u8
 
	mVSTA_MSB
 : 1;

447 
__u8
 
	mVSTO_MSB
 : 1;

448 
__u8
 
	m_X_
 : 6;

449 } 
	tßa7113h_r17_t
, 
	tßa7113h_VGATE_MSB_t
;

451 
__u8
 
	tßa7113h_r18_t
;

452 
__u8
 
	tßa7113h_r19_t
;

453 
__u8
 
	tßa7113h_r1a_t
;

454 
__u8
 
	tßa7113h_r1b_t
;

455 
__u8
 
	tßa7113h_r1c_t
;

456 
__u8
 
	tßa7113h_r1d_t
;

457 
__u8
 
	tßa7113h_r1e_t
;

460 
__u8
 
	mRDCAP
 : 1;

461 
__u8
 
	mCOPRO
 : 1;

462 
__u8
 
	mWIPA
 : 1;

463 
__u8
 
	mGLIMB
 : 1;

464 
__u8
 
	mGLIMT
 : 1;

465 
__u8
 
	mFIDT
 : 1;

466 
__u8
 
	mHLVLN
 : 1;

467 
__u8
 
	mINTL
 : 1;

468 } 
	tßa7113h_r1f_t
, 
	tßa7113h_decodî_°©us_t
;

470 
__u8
 
	tßa7113h_r20_t
;

471 
__u8
 
	tßa7113h_r21_t
;

472 
__u8
 
	tßa7113h_r22_t
;

473 
__u8
 
	tßa7113h_r23_t
;

474 
__u8
 
	tßa7113h_r24_t
;

475 
__u8
 
	tßa7113h_r25_t
;

476 
__u8
 
	tßa7113h_r26_t
;

477 
__u8
 
	tßa7113h_r27_t
;

478 
__u8
 
	tßa7113h_r28_t
;

479 
__u8
 
	tßa7113h_r29_t
;

480 
__u8
 
	tßa7113h_r2a_t
;

481 
__u8
 
	tßa7113h_r2b_t
;

482 
__u8
 
	tßa7113h_r2c_t
;

483 
__u8
 
	tßa7113h_r2d_t
;

484 
__u8
 
	tßa7113h_r2e_t
;

485 
__u8
 
	tßa7113h_r2f_t
;

486 
__u8
 
	tßa7113h_r30_t
;

487 
__u8
 
	tßa7113h_r31_t
;

488 
__u8
 
	tßa7113h_r32_t
;

489 
__u8
 
	tßa7113h_r33_t
;

490 
__u8
 
	tßa7113h_r34_t
;

491 
__u8
 
	tßa7113h_r35_t
;

492 
__u8
 
	tßa7113h_r36_t
;

493 
__u8
 
	tßa7113h_r37_t
;

494 
__u8
 
	tßa7113h_r38_t
;

495 
__u8
 
	tßa7113h_r39_t
;

496 
__u8
 
	tßa7113h_r3a_t
;

497 
__u8
 
	tßa7113h_r3b_t
;

498 
__u8
 
	tßa7113h_r3c_t
;

499 
__u8
 
	tßa7113h_r3d_t
;

500 
__u8
 
	tßa7113h_r3e_t
;

501 
__u8
 
	tßa7113h_r3f_t
;

504 
__u8
 
	m_X_
 : 1;

505 
__u8
 
	m_SLCK_
 : 2;

513 
__u8
 
	m_AMPS_
 : 1;

515 
__u8
 
	m_XX_
 : 1;

517 
__u8
 
	mFCE
 : 1;

523 
__u8
 
	mHAM_N
 : 1;

529 
__u8
 
	mFISET
 : 1;

534 } 
	tßa7113h_r40_t
, 
	tßa7113h_¶i˚r_c⁄åﬁ_1_t
;

556 
__u8
 
	mLCR
 : 8;

557 } 
	tßa7113h_r41_t
, 
	tßa7113h_löe_c⁄åﬁ_2_t
;

560 
__u8
 
	mLCR
 : 8;

561 } 
	tßa7113h_r42_t
, 
	tßa7113h_löe_c⁄åﬁ_3_t
;

564 
__u8
 
	mLCR
 : 8;

565 } 
	tßa7113h_r43_t
, 
	tßa7113h_löe_c⁄åﬁ_4_t
;

568 
__u8
 
	mLCR
 : 8;

569 } 
	tßa7113h_r44_t
, 
	tßa7113h_löe_c⁄åﬁ_5_t
;

572 
__u8
 
	mLCR
 : 8;

573 } 
	tßa7113h_r45_t
, 
	tßa7113h_löe_c⁄åﬁ_6_t
;

576 
__u8
 
	mLCR
 : 8;

577 } 
	tßa7113h_r46_t
, 
	tßa7113h_löe_c⁄åﬁ_7_t
;

580 
__u8
 
	mLCR
 : 8;

581 } 
	tßa7113h_r47_t
, 
	tßa7113h_löe_c⁄åﬁ_8_t
;

584 
__u8
 
	mLCR
 : 8;

585 } 
	tßa7113h_r48_t
, 
	tßa7113h_löe_c⁄åﬁ_9_t
;

588 
__u8
 
	mLCR
 : 8;

589 } 
	tßa7113h_r49_t
, 
	tßa7113h_löe_c⁄åﬁ_10_t
;

592 
__u8
 
	mLCR
 : 8;

593 } 
	tßa7113h_r4a_t
, 
	tßa7113h_löe_c⁄åﬁ_11_t
;

596 
__u8
 
	mLCR
 : 8;

597 } 
	tßa7113h_r4b_t
, 
	tßa7113h_löe_c⁄åﬁ_12_t
;

600 
__u8
 
	mLCR
 : 8;

601 } 
	tßa7113h_r4c_t
, 
	tßa7113h_löe_c⁄åﬁ_13_t
;

604 
__u8
 
	mLCR
 : 8;

605 } 
	tßa7113h_r4d_t
, 
	tßa7113h_löe_c⁄åﬁ_14_t
;

608 
__u8
 
	mLCR
 : 8;

609 } 
	tßa7113h_r4e_t
, 
	tßa7113h_löe_c⁄åﬁ_15_t
;

612 
__u8
 
	mLCR
 : 8;

613 } 
	tßa7113h_r4f_t
, 
	tßa7113h_löe_c⁄åﬁ_16_t
;

616 
__u8
 
	mLCR
 : 8;

617 } 
	tßa7113h_r50_t
, 
	tßa7113h_löe_c⁄åﬁ_17_t
;

620 
__u8
 
	mLCR
 : 8;

621 } 
	tßa7113h_r51_t
, 
	tßa7113h_löe_c⁄åﬁ_18_t
;

624 
__u8
 
	mLCR
 : 8;

625 } 
	tßa7113h_r52_t
, 
	tßa7113h_löe_c⁄åﬁ_19_t
;

628 
__u8
 
	mLCR
 : 8;

629 } 
	tßa7113h_r53_t
, 
	tßa7113h_löe_c⁄åﬁ_20_t
;

632 
__u8
 
	mLCR
 : 8;

633 } 
	tßa7113h_r54_t
, 
	tßa7113h_löe_c⁄åﬁ_21_t
;

636 
__u8
 
	mLCR
 : 8;

637 } 
	tßa7113h_r55_t
, 
	tßa7113h_löe_c⁄åﬁ_22_t
;

640 
__u8
 
	mLCR
 : 8;

641 } 
	tßa7113h_r56_t
, 
	tßa7113h_löe_c⁄åﬁ_23_t
;

644 
__u8
 
	mLCR
 : 8;

645 } 
	tßa7113h_r57_t
, 
	tßa7113h_löe_c⁄åﬁ_24_t
;

648 
__u8
 
	mFC
 : 8;

649 } 
	tßa7113h_r58_t
, 
	tßa7113h_¥ogømmabÀ_‰ammög_code_t
;

652 
__u8
 
	mHOFF
 : 8;

653 } 
	tßa7113h_r59_t
, 
	tßa7113h_¶i˚r_h‹iz⁄èl_off£t_t
;

656 
__u8
 
	mVOFF
 : 8;

657 } 
	tßa7113h_r5a_t
, 
	tßa7113h_¶i˚r_vîtiˇl_off£t_t
;

660 
__u8
 
	mHOFF_MSB
 : 2;

661 
__u8
 
	m_X_
 : 1;

662 
__u8
 
	mVOFF_MSB
 : 1;

663 
__u8
 
	m_XX_
 : 2;

664 
__u8
 
	mFOFF
 : 1;

665 } 
	tßa7113h_r5b_t
, 
	tßa7113h_¶i˚r_exåa_off£ts_t
;

667 
__u8
 
	tßa7113h_r5c_t
;

668 
__u8
 
	tßa7113h_r5d_t
;

671 
__u8
 
	mSDID
 : 6;

672 
__u8
 
	m_X_
 : 2;

673 } 
	tßa7113h_r5e_t
, 
	tßa7113h_¶i˚d_d©a_id_code_t
;

675 
__u8
 
	tßa7113h_r5f_t
;

678 
__u8
 
	m_X_
 : 2;

679 
__u8
 
	mCV
 : 1;

680 
__u8
 
	mPPV
 : 1;

681 
__u8
 
	mVPSV
 : 1;

682 
__u8
 
	mFC7V
 : 1;

683 
__u8
 
	mFC8V
 : 1;

684 
__u8
 
	m_XX_
 : 1;

685 } 
	tßa7113h_r60_t
, 
	tßa7113h_¶i˚r_°©us_1_t
;

688 
__u8
 
	mLNHI
 : 5;

689 
__u8
 
	mF21_N
 : 1;

690 
__u8
 
	m_X_
 : 2;

691 } 
	tßa7113h_r61_t
, 
	tßa7113h_¶i˚r_°©us_2_t
;

694 
__u8
 
	mDT
 : 4;

695 
__u8
 
	mLNLO
 : 4;

696 } 
	tßa7113h_r62_t
, 
	tßa7113h_¶i˚r_°©us_3_t
;

701 
ßa7113h_r00_t
 
	mchù_vîsi⁄
;

702 
ßa7113h_r01_t
 
	mö¸emít_dñay
;

703 
ßa7113h_r02_t
 
	m™Æog_öput_c⁄åﬁ_1
;

704 
ßa7113h_r03_t
 
	m™Æog_öput_c⁄åﬁ_2
;

705 
ßa7113h_r04_t
 
	m™Æog_öput_c⁄åﬁ_3
;

706 
ßa7113h_r05_t
 
	m™Æog_öput_c⁄åﬁ_4
;

707 
ßa7113h_r06_t
 
	mh‹iz⁄èl_sync_°¨t
;

708 
ßa7113h_r07_t
 
	mh‹iz⁄èl_sync_°›
;

709 
ßa7113h_r08_t
 
	msync_c⁄åﬁ
;

710 
ßa7113h_r09_t
 
	mlumö™˚_c⁄åﬁ
;

711 
ßa7113h_r0a_t
 
	mlumö™˚_brighäess
;

712 
ßa7113h_r0b_t
 
	mlumö™˚_c⁄åa°
;

713 
ßa7113h_r0c_t
 
	mchromö™˚_ßtuøti⁄
;

714 
ßa7113h_r0d_t
 
	mchromö™˚_hue_c⁄åﬁ
;

715 
ßa7113h_r0e_t
 
	mchromö™˚_c⁄åﬁ
;

716 
ßa7113h_r0f_t
 
	mchromö™˚_gaö_c⁄åﬁ
;

717 
ßa7113h_r10_t
 
	mf‹m©_dñay_c⁄åﬁ
;

718 
ßa7113h_r11_t
 
	mouçut_c⁄åﬁ_1
;

719 
ßa7113h_r12_t
 
	mouçut_c⁄åﬁ_2
;

720 
ßa7113h_r13_t
 
	mouçut_c⁄åﬁ_3
;

721 
ßa7113h_r14_t
 
	mª£rved_r14
;

722 
ßa7113h_r15_t
 
	mVGATE_°¨t
;

723 
ßa7113h_r16_t
 
	mVGATE_°›
;

724 
ßa7113h_r17_t
 
	mVGATE_MSB
;

725 
ßa7113h_r18_t
 
	mª£rved_r18
;

726 
ßa7113h_r19_t
 
	mª£rved_r19
;

727 
ßa7113h_r1a_t
 
	mª£rved_r1a
;

728 
ßa7113h_r1b_t
 
	mª£rved_r1b
;

729 
ßa7113h_r1c_t
 
	mª£rved_r1c
;

730 
ßa7113h_r1d_t
 
	mª£rved_r1d
;

731 
ßa7113h_r1e_t
 
	mª£rved_r1e
;

732 
ßa7113h_r1f_t
 
	mdecodî_°©us
;

735 
ßa7113h_r20_t
 
	mª£rved_r20
;

736 
ßa7113h_r21_t
 
	mª£rved_r21
;

737 
ßa7113h_r22_t
 
	mª£rved_r22
;

738 
ßa7113h_r23_t
 
	mª£rved_r23
;

739 
ßa7113h_r24_t
 
	mª£rved_r24
;

740 
ßa7113h_r25_t
 
	mª£rved_r25
;

741 
ßa7113h_r26_t
 
	mª£rved_r26
;

742 
ßa7113h_r27_t
 
	mª£rved_r27
;

743 
ßa7113h_r28_t
 
	mª£rved_r28
;

744 
ßa7113h_r29_t
 
	mª£rved_r29
;

745 
ßa7113h_r2a_t
 
	mª£rved_r2a
;

746 
ßa7113h_r2b_t
 
	mª£rved_r2b
;

747 
ßa7113h_r2c_t
 
	mª£rved_r2c
;

748 
ßa7113h_r2d_t
 
	mª£rved_r2d
;

749 
ßa7113h_r2e_t
 
	mª£rved_r2e
;

750 
ßa7113h_r2f_t
 
	mª£rved_r2f
;

751 
ßa7113h_r30_t
 
	mª£rved_r30
;

752 
ßa7113h_r31_t
 
	mª£rved_r31
;

753 
ßa7113h_r32_t
 
	mª£rved_r32
;

754 
ßa7113h_r33_t
 
	mª£rved_r33
;

755 
ßa7113h_r34_t
 
	mª£rved_r34
;

756 
ßa7113h_r35_t
 
	mª£rved_r35
;

757 
ßa7113h_r36_t
 
	mª£rved_r36
;

758 
ßa7113h_r37_t
 
	mª£rved_r37
;

759 
ßa7113h_r38_t
 
	mª£rved_r38
;

760 
ßa7113h_r39_t
 
	mª£rved_r39
;

761 
ßa7113h_r3a_t
 
	mª£rved_r3a
;

762 
ßa7113h_r3b_t
 
	mª£rved_r3b
;

763 
ßa7113h_r3c_t
 
	mª£rved_r3c
;

764 
ßa7113h_r3d_t
 
	mª£rved_r3d
;

765 
ßa7113h_r3e_t
 
	mª£rved_r3e
;

766 
ßa7113h_r3f_t
 
	mª£rved_r3f
;

769 
ßa7113h_r40_t
 
	m¶i˚r_c⁄åﬁ_1
;

770 
ßa7113h_r41_t
 
	mlöe_c⁄åﬁ_2
;

771 
ßa7113h_r42_t
 
	mlöe_c⁄åﬁ_3
;

772 
ßa7113h_r43_t
 
	mlöe_c⁄åﬁ_4
;

773 
ßa7113h_r44_t
 
	mlöe_c⁄åﬁ_5
;

774 
ßa7113h_r45_t
 
	mlöe_c⁄åﬁ_6
;

775 
ßa7113h_r46_t
 
	mlöe_c⁄åﬁ_7
;

776 
ßa7113h_r47_t
 
	mlöe_c⁄åﬁ_8
;

777 
ßa7113h_r48_t
 
	mlöe_c⁄åﬁ_9
;

778 
ßa7113h_r49_t
 
	mlöe_c⁄åﬁ_10
;

779 
ßa7113h_r4a_t
 
	mlöe_c⁄åﬁ_11
;

780 
ßa7113h_r4b_t
 
	mlöe_c⁄åﬁ_12
;

781 
ßa7113h_r4c_t
 
	mlöe_c⁄åﬁ_13
;

782 
ßa7113h_r4d_t
 
	mlöe_c⁄åﬁ_14
;

783 
ßa7113h_r4e_t
 
	mlöe_c⁄åﬁ_15
;

784 
ßa7113h_r4f_t
 
	mlöe_c⁄åﬁ_16
;

785 
ßa7113h_r50_t
 
	mlöe_c⁄åﬁ_17
;

786 
ßa7113h_r51_t
 
	mlöe_c⁄åﬁ_18
;

787 
ßa7113h_r52_t
 
	mlöe_c⁄åﬁ_19
;

788 
ßa7113h_r53_t
 
	mlöe_c⁄åﬁ_20
;

789 
ßa7113h_r54_t
 
	mlöe_c⁄åﬁ_21
;

790 
ßa7113h_r55_t
 
	mlöe_c⁄åﬁ_22
;

791 
ßa7113h_r56_t
 
	mlöe_c⁄åﬁ_23
;

792 
ßa7113h_r57_t
 
	mlöe_c⁄åﬁ_24
;

793 
ßa7113h_r58_t
 
	m¥ogømmabÀ_‰ammög_code
;

794 
ßa7113h_r59_t
 
	m¶i˚r_h‹iz⁄èl_off£t
;

795 
ßa7113h_r5a_t
 
	m¶i˚r_vîtiˇl_off£t
;

796 
ßa7113h_r5b_t
 
	m¶i˚r_exåa_off£ts
;

797 
ßa7113h_r5c_t
 
	mª£rved_r5c
;

798 
ßa7113h_r5d_t
 
	mª£rved_r5d
;

799 
ßa7113h_r5e_t
 
	m¶i˚d_d©a_id_code
;

800 
ßa7113h_r5f_t
 
	mª£rved_r5f
;

801 
ßa7113h_r60_t
 
	m¶i˚r_°©us_1
;

802 
ßa7113h_r61_t
 
	m¶i˚r_°©us_2
;

803 
ßa7113h_r61_t
 
	m¶i˚r_°©us_3
;

804 } 
	tßa7113h_ªg_m≠_t
;

	@saa711x_regs.h

16 
	#R_00_CHIP_VERSION
 0x00

	)

19 
	#R_01_INC_DELAY
 0x01

	)

20 
	#R_02_INPUT_CNTL_1
 0x02

	)

21 
	#R_03_INPUT_CNTL_2
 0x03

	)

22 
	#R_04_INPUT_CNTL_3
 0x04

	)

23 
	#R_05_INPUT_CNTL_4
 0x05

	)

25 
	#R_06_H_SYNC_START
 0x06

	)

26 
	#R_07_H_SYNC_STOP
 0x07

	)

27 
	#R_08_SYNC_CNTL
 0x08

	)

28 
	#R_09_LUMA_CNTL
 0x09

	)

29 
	#R_0A_LUMA_BRIGHT_CNTL
 0x0a

	)

30 
	#R_0B_LUMA_CONTRAST_CNTL
 0x0b

	)

31 
	#R_0C_CHROMA_SAT_CNTL
 0x0c

	)

32 
	#R_0D_CHROMA_HUE_CNTL
 0x0d

	)

33 
	#R_0E_CHROMA_CNTL_1
 0x0e

	)

34 
	#R_0F_CHROMA_GAIN_CNTL
 0x0f

	)

35 
	#R_10_CHROMA_CNTL_2
 0x10

	)

36 
	#R_11_MODE_DELAY_CNTL
 0x11

	)

37 
	#R_12_RT_SIGNAL_CNTL
 0x12

	)

38 
	#R_13_RT_X_PORT_OUT_CNTL
 0x13

	)

39 
	#R_14_ANAL_ADC_COMPAT_CNTL
 0x14

	)

40 
	#R_15_VGATE_START_FID_CHG
 0x15

	)

41 
	#R_16_VGATE_STOP
 0x16

	)

42 
	#R_17_MISC_VGATE_CONF_AND_MSB
 0x17

	)

43 
	#R_18_RAW_DATA_GAIN_CNTL
 0x18

	)

44 
	#R_19_RAW_DATA_OFF_CNTL
 0x19

	)

45 
	#R_1A_COLOR_KILL_LVL_CNTL
 0x1a

	)

46 
	#R_1B_MISC_TVVCRDET
 0x1b

	)

47 
	#R_1C_ENHAN_COMB_CTRL1
 0x1c

	)

48 
	#R_1D_ENHAN_COMB_CTRL2
 0x1d

	)

49 
	#R_1E_STATUS_BYTE_1_VD_DEC
 0x1e

	)

50 
	#R_1F_STATUS_BYTE_2_VD_DEC
 0x1f

	)

53 
	#R_23_INPUT_CNTL_5
 0x23

	)

54 
	#R_24_INPUT_CNTL_6
 0x24

	)

55 
	#R_25_INPUT_CNTL_7
 0x25

	)

56 
	#R_29_COMP_DELAY
 0x29

	)

57 
	#R_2A_COMP_BRIGHT_CNTL
 0x2a

	)

58 
	#R_2B_COMP_CONTRAST_CNTL
 0x2b

	)

59 
	#R_2C_COMP_SAT_CNTL
 0x2c

	)

60 
	#R_2D_INTERRUPT_MASK_1
 0x2d

	)

61 
	#R_2E_INTERRUPT_MASK_2
 0x2e

	)

62 
	#R_2F_INTERRUPT_MASK_3
 0x2f

	)

65 
	#R_30_AUD_MAST_CLK_CYCLES_PER_FIELD
 0x30

	)

66 
	#R_34_AUD_MAST_CLK_NOMINAL_INC
 0x34

	)

67 
	#R_38_CLK_RATIO_AMXCLK_TO_ASCLK
 0x38

	)

68 
	#R_39_CLK_RATIO_ASCLK_TO_ALRCLK
 0x39

	)

69 
	#R_3A_AUD_CLK_GEN_BASIC_SETUP
 0x3a

	)

72 
	#R_40_SLICER_CNTL_1
 0x40

	)

73 
	#R_41_LCR_BASE
 0x41

	)

74 
	#R_58_PROGRAM_FRAMING_CODE
 0x58

	)

75 
	#R_59_H_OFF_FOR_SLICER
 0x59

	)

76 
	#R_5A_V_OFF_FOR_SLICER
 0x5a

	)

77 
	#R_5B_FLD_OFF_AND_MSB_FOR_H_AND_V_OFF
 0x5b

	)

78 
	#R_5D_DID
 0x5d

	)

79 
	#R_5E_SDID
 0x5e

	)

80 
	#R_60_SLICER_STATUS_BYTE_0
 0x60

	)

81 
	#R_61_SLICER_STATUS_BYTE_1
 0x61

	)

82 
	#R_62_SLICER_STATUS_BYTE_2
 0x62

	)

86 
	#R_80_GLOBAL_CNTL_1
 0x80

	)

87 
	#R_81_V_SYNC_FLD_ID_SRC_SEL_AND_RETIMED_V_F
 0x81

	)

88 
	#R_83_X_PORT_I_O_ENA_AND_OUT_CLK
 0x83

	)

89 
	#R_84_I_PORT_SIGNAL_DEF
 0x84

	)

90 
	#R_85_I_PORT_SIGNAL_POLAR
 0x85

	)

91 
	#R_86_I_PORT_FIFO_FLAG_CNTL_AND_ARBIT
 0x86

	)

92 
	#R_87_I_PORT_I_O_ENA_OUT_CLK_AND_GATED
 0x87

	)

93 
	#R_88_POWER_SAVE_ADC_PORT_CNTL
 0x88

	)

94 
	#R_8F_STATUS_INFO_SCALER
 0x8f

	)

97 
	#R_90_A_TASK_HANDLING_CNTL
 0x90

	)

98 
	#R_91_A_X_PORT_FORMATS_AND_CONF
 0x91

	)

99 
	#R_92_A_X_PORT_INPUT_REFERENCE_SIGNAL
 0x92

	)

100 
	#R_93_A_I_PORT_OUTPUT_FORMATS_AND_CONF
 0x93

	)

101 
	#R_94_A_HORIZ_INPUT_WINDOW_START
 0x94

	)

102 
	#R_95_A_HORIZ_INPUT_WINDOW_START_MSB
 0x95

	)

103 
	#R_96_A_HORIZ_INPUT_WINDOW_LENGTH
 0x96

	)

104 
	#R_97_A_HORIZ_INPUT_WINDOW_LENGTH_MSB
 0x97

	)

105 
	#R_98_A_VERT_INPUT_WINDOW_START
 0x98

	)

106 
	#R_99_A_VERT_INPUT_WINDOW_START_MSB
 0x99

	)

107 
	#R_9A_A_VERT_INPUT_WINDOW_LENGTH
 0x9a

	)

108 
	#R_9B_A_VERT_INPUT_WINDOW_LENGTH_MSB
 0x9b

	)

109 
	#R_9C_A_HORIZ_OUTPUT_WINDOW_LENGTH
 0x9c

	)

110 
	#R_9D_A_HORIZ_OUTPUT_WINDOW_LENGTH_MSB
 0x9d

	)

111 
	#R_9E_A_VERT_OUTPUT_WINDOW_LENGTH
 0x9e

	)

112 
	#R_9F_A_VERT_OUTPUT_WINDOW_LENGTH_MSB
 0x9f

	)

114 
	#R_A0_A_HORIZ_PRESCALING
 0xa0

	)

115 
	#R_A1_A_ACCUMULATION_LENGTH
 0xa1

	)

116 
	#R_A2_A_PRESCALER_DC_GAIN_AND_FIR_PREFILTER
 0xa2

	)

117 
	#R_A4_A_LUMA_BRIGHTNESS_CNTL
 0xa4

	)

118 
	#R_A5_A_LUMA_CONTRAST_CNTL
 0xa5

	)

119 
	#R_A6_A_CHROMA_SATURATION_CNTL
 0xa6

	)

121 
	#R_A8_A_HORIZ_LUMA_SCALING_INC
 0xa8

	)

122 
	#R_A9_A_HORIZ_LUMA_SCALING_INC_MSB
 0xa9

	)

123 
	#R_AA_A_HORIZ_LUMA_PHASE_OFF
 0xØ

	)

124 
	#R_AC_A_HORIZ_CHROMA_SCALING_INC
 0xac

	)

125 
	#R_AD_A_HORIZ_CHROMA_SCALING_INC_MSB
 0xad

	)

126 
	#R_AE_A_HORIZ_CHROMA_PHASE_OFF
 0x´

	)

127 
	#R_AF_A_HORIZ_CHROMA_PHASE_OFF_MSB
 0xaf

	)

129 
	#R_B0_A_VERT_LUMA_SCALING_INC
 0xb0

	)

130 
	#R_B1_A_VERT_LUMA_SCALING_INC_MSB
 0xb1

	)

131 
	#R_B2_A_VERT_CHROMA_SCALING_INC
 0xb2

	)

132 
	#R_B3_A_VERT_CHROMA_SCALING_INC_MSB
 0xb3

	)

133 
	#R_B4_A_VERT_SCALING_MODE_CNTL
 0xb4

	)

134 
	#R_B8_A_VERT_CHROMA_PHASE_OFF_00
 0xb8

	)

135 
	#R_B9_A_VERT_CHROMA_PHASE_OFF_01
 0xb9

	)

136 
	#R_BA_A_VERT_CHROMA_PHASE_OFF_10
 0xba

	)

137 
	#R_BB_A_VERT_CHROMA_PHASE_OFF_11
 0xbb

	)

138 
	#R_BC_A_VERT_LUMA_PHASE_OFF_00
 0xbc

	)

139 
	#R_BD_A_VERT_LUMA_PHASE_OFF_01
 0xbd

	)

140 
	#R_BE_A_VERT_LUMA_PHASE_OFF_10
 0xbe

	)

141 
	#R_BF_A_VERT_LUMA_PHASE_OFF_11
 0xbf

	)

144 
	#R_C0_B_TASK_HANDLING_CNTL
 0xc0

	)

145 
	#R_C1_B_X_PORT_FORMATS_AND_CONF
 0xc1

	)

146 
	#R_C2_B_INPUT_REFERENCE_SIGNAL_DEFINITION
 0xc2

	)

147 
	#R_C3_B_I_PORT_FORMATS_AND_CONF
 0xc3

	)

148 
	#R_C4_B_HORIZ_INPUT_WINDOW_START
 0xc4

	)

149 
	#R_C5_B_HORIZ_INPUT_WINDOW_START_MSB
 0xc5

	)

150 
	#R_C6_B_HORIZ_INPUT_WINDOW_LENGTH
 0xc6

	)

151 
	#R_C7_B_HORIZ_INPUT_WINDOW_LENGTH_MSB
 0xc7

	)

152 
	#R_C8_B_VERT_INPUT_WINDOW_START
 0xc8

	)

153 
	#R_C9_B_VERT_INPUT_WINDOW_START_MSB
 0xc9

	)

154 
	#R_CA_B_VERT_INPUT_WINDOW_LENGTH
 0xˇ

	)

155 
	#R_CB_B_VERT_INPUT_WINDOW_LENGTH_MSB
 0xcb

	)

156 
	#R_CC_B_HORIZ_OUTPUT_WINDOW_LENGTH
 0xcc

	)

157 
	#R_CD_B_HORIZ_OUTPUT_WINDOW_LENGTH_MSB
 0xcd

	)

158 
	#R_CE_B_VERT_OUTPUT_WINDOW_LENGTH
 0x˚

	)

159 
	#R_CF_B_VERT_OUTPUT_WINDOW_LENGTH_MSB
 0xcf

	)

161 
	#R_D0_B_HORIZ_PRESCALING
 0xd0

	)

162 
	#R_D1_B_ACCUMULATION_LENGTH
 0xd1

	)

163 
	#R_D2_B_PRESCALER_DC_GAIN_AND_FIR_PREFILTER
 0xd2

	)

164 
	#R_D4_B_LUMA_BRIGHTNESS_CNTL
 0xd4

	)

165 
	#R_D5_B_LUMA_CONTRAST_CNTL
 0xd5

	)

166 
	#R_D6_B_CHROMA_SATURATION_CNTL
 0xd6

	)

168 
	#R_D8_B_HORIZ_LUMA_SCALING_INC
 0xd8

	)

169 
	#R_D9_B_HORIZ_LUMA_SCALING_INC_MSB
 0xd9

	)

170 
	#R_DA_B_HORIZ_LUMA_PHASE_OFF
 0xda

	)

171 
	#R_DC_B_HORIZ_CHROMA_SCALING
 0xdc

	)

172 
	#R_DD_B_HORIZ_CHROMA_SCALING_MSB
 0xdd

	)

173 
	#R_DE_B_HORIZ_PHASE_OFFSET_CRHOMA
 0xde

	)

175 
	#R_E0_B_VERT_LUMA_SCALING_INC
 0xe0

	)

176 
	#R_E1_B_VERT_LUMA_SCALING_INC_MSB
 0xe1

	)

177 
	#R_E2_B_VERT_CHROMA_SCALING_INC
 0xe2

	)

178 
	#R_E3_B_VERT_CHROMA_SCALING_INC_MSB
 0xe3

	)

179 
	#R_E4_B_VERT_SCALING_MODE_CNTL
 0xe4

	)

180 
	#R_E8_B_VERT_CHROMA_PHASE_OFF_00
 0xe8

	)

181 
	#R_E9_B_VERT_CHROMA_PHASE_OFF_01
 0xe9

	)

182 
	#R_EA_B_VERT_CHROMA_PHASE_OFF_10
 0xó

	)

183 
	#R_EB_B_VERT_CHROMA_PHASE_OFF_11
 0xeb

	)

184 
	#R_EC_B_VERT_LUMA_PHASE_OFF_00
 0xec

	)

185 
	#R_ED_B_VERT_LUMA_PHASE_OFF_01
 0xed

	)

186 
	#R_EE_B_VERT_LUMA_PHASE_OFF_10
 0xì

	)

187 
	#R_EF_B_VERT_LUMA_PHASE_OFF_11
 0xef

	)

190 
	#R_F0_LFCO_PER_LINE
 0xf0

	)

191 
	#R_F1_P_I_PARAM_SELECT
 0xf1

	)

192 
	#R_F2_NOMINAL_PLL2_DTO
 0xf2

	)

193 
	#R_F3_PLL_INCREMENT
 0xf3

	)

194 
	#R_F4_PLL2_STATUS
 0xf4

	)

195 
	#R_F5_PULSGEN_LINE_LENGTH
 0xf5

	)

196 
	#R_F6_PULSE_A_POS_LSB_AND_PULSEGEN_CONFIG
 0xf6

	)

197 
	#R_F7_PULSE_A_POS_MSB
 0xf7

	)

198 
	#R_F8_PULSE_B_POS
 0xf8

	)

199 
	#R_F9_PULSE_B_POS_MSB
 0xf9

	)

200 
	#R_FA_PULSE_C_POS
 0xÁ

	)

201 
	#R_FB_PULSE_C_POS_MSB
 0xfb

	)

202 
	#R_FF_S_PLL_MAX_PHASE_ERR_THRESH_NUM_LINES
 0xff

	)

206 
	sßa711x_ªg_des¸
 {

207 
u8
 
	mªg
;

208 
	mcou¡
;

209 *
	m«me
;

212 
ßa711x_ªg_des¸
 
	gßa711x_ªgs
[] = {

214 {
R_00_CHIP_VERSION
,1,

220 {
R_01_INC_DELAY
,1,

222 {
R_02_INPUT_CNTL_1
,1,

224 {
R_03_INPUT_CNTL_2
,1,

226 {
R_04_INPUT_CNTL_3
,1,

228 {
R_05_INPUT_CNTL_4
,1,

232 {
R_06_H_SYNC_START
,1,

234 {
R_07_H_SYNC_STOP
,1,

236 {
R_08_SYNC_CNTL
,1,

238 {
R_09_LUMA_CNTL
,1,

240 {
R_0A_LUMA_BRIGHT_CNTL
,1,

242 {
R_0B_LUMA_CONTRAST_CNTL
,1,

244 {
R_0C_CHROMA_SAT_CNTL
,1,

246 {
R_0D_CHROMA_HUE_CNTL
,1,

248 {
R_0E_CHROMA_CNTL_1
,1,

250 {
R_0F_CHROMA_GAIN_CNTL
,1,

252 {
R_10_CHROMA_CNTL_2
,1,

254 {
R_11_MODE_DELAY_CNTL
,1,

256 {
R_12_RT_SIGNAL_CNTL
,1,

258 {
R_13_RT_X_PORT_OUT_CNTL
,1,

260 {
R_14_ANAL_ADC_COMPAT_CNTL
,1,

262 {
R_15_VGATE_START_FID_CHG
, 1,

264 {
R_16_VGATE_STOP
,1,

266 {
R_17_MISC_VGATE_CONF_AND_MSB
, 1,

268 {
R_18_RAW_DATA_GAIN_CNTL
,1,

270 {
R_19_RAW_DATA_OFF_CNTL
,1,

272 {
R_1A_COLOR_KILL_LVL_CNTL
,1,

274 { 
R_1B_MISC_TVVCRDET
, 1,

276 { 
R_1C_ENHAN_COMB_CTRL1
, 1,

278 { 
R_1D_ENHAN_COMB_CTRL2
, 1,

280 {
R_1E_STATUS_BYTE_1_VD_DEC
,1,

282 {
R_1F_STATUS_BYTE_2_VD_DEC
,1,

287 {
R_23_INPUT_CNTL_5
,1,

289 {
R_24_INPUT_CNTL_6
,1,

291 {
R_25_INPUT_CNTL_7
,1,

294 {
R_29_COMP_DELAY
,1,

296 {
R_2A_COMP_BRIGHT_CNTL
,1,

298 {
R_2B_COMP_CONTRAST_CNTL
,1,

300 {
R_2C_COMP_SAT_CNTL
,1,

302 {
R_2D_INTERRUPT_MASK_1
,1,

304 {
R_2E_INTERRUPT_MASK_2
,1,

306 {
R_2F_INTERRUPT_MASK_3
,1,

310 {
R_30_AUD_MAST_CLK_CYCLES_PER_FIELD
,3,

313 {
R_34_AUD_MAST_CLK_NOMINAL_INC
,3,

316 {
R_38_CLK_RATIO_AMXCLK_TO_ASCLK
,1,

318 {
R_39_CLK_RATIO_ASCLK_TO_ALRCLK
,1,

320 {
R_3A_AUD_CLK_GEN_BASIC_SETUP
,1,

325 {
R_40_SLICER_CNTL_1
,1,

327 {
R_41_LCR
,23,

329 {
R_58_PROGRAM_FRAMING_CODE
,1,

331 {
R_59_H_OFF_FOR_SLICER
,1,

333 {
R_5A_V_OFF_FOR_SLICER
,1,

335 {
R_5B_FLD_OFF_AND_MSB_FOR_H_AND_V_OFF
,1,

337 {
R_5D_DID
,1,

339 {
R_5E_SDID
,1,

341 {
R_60_SLICER_STATUS_BYTE_0
,1,

343 {
R_61_SLICER_STATUS_BYTE_1
,1,

345 {
R_62_SLICER_STATUS_BYTE_2
,1,

351 {
R_80_GLOBAL_CNTL_1
,1,

353 {
R_81_V_SYNC_FLD_ID_SRC_SEL_AND_RETIMED_V_F
,1,

356 {
R_83_X_PORT_I_O_ENA_AND_OUT_CLK
,1,

358 {
R_84_I_PORT_SIGNAL_DEF
,1,

360 {
R_85_I_PORT_SIGNAL_POLAR
,1,

362 {
R_86_I_PORT_FIFO_FLAG_CNTL_AND_ARBIT
,1,

364 {
R_87_I_PORT_I_O_ENA_OUT_CLK_AND_GATED
, 1,

366 {
R_88_POWER_SAVE_ADC_PORT_CNTL
,1,

369 {
R_8F_STATUS_INFO_SCALER
,1,

374 {
R_90_A_TASK_HANDLING_CNTL
,1,

376 {
R_91_A_X_PORT_FORMATS_AND_CONF
,1,

378 {
R_92_A_X_PORT_INPUT_REFERENCE_SIGNAL
,1,

380 {
R_93_A_I_PORT_OUTPUT_FORMATS_AND_CONF
,1,

382 {
R_94_A_HORIZ_INPUT_WINDOW_START
,2,

384 {
R_96_A_HORIZ_INPUT_WINDOW_LENGTH
,2,

386 {
R_98_A_VERT_INPUT_WINDOW_START
,2,

388 {
R_9A_A_VERT_INPUT_WINDOW_LENGTH
,2,

390 {
R_9C_A_HORIZ_OUTPUT_WINDOW_LENGTH
,2,

392 {
R_9E_A_VERT_OUTPUT_WINDOW_LENGTH
,2,

396 {
R_A0_A_HORIZ_PRESCALING
,1,

398 {
R_A1_A_ACCUMULATION_LENGTH
,1,

400 {
R_A2_A_PRESCALER_DC_GAIN_AND_FIR_PREFILTER
,1,

403 {
R_A4_A_LUMA_BRIGHTNESS_CNTL
,1,

405 {
R_A5_A_LUMA_CONTRAST_CNTL
,1,

407 {
R_A6_A_CHROMA_SATURATION_CNTL
,1,

412 {
R_A8_A_HORIZ_LUMA_SCALING_INC
,2,

414 {
R_AA_A_HORIZ_LUMA_PHASE_OFF
,1,

417 {
R_AC_A_HORIZ_CHROMA_SCALING_INC
,2,

419 {
R_AE_A_HORIZ_CHROMA_PHASE_OFF
,1,

424 {
R_B0_A_VERT_LUMA_SCALING_INC
,2,

426 {
R_B2_A_VERT_CHROMA_SCALING_INC
,2,

428 {
R_B4_A_VERT_SCALING_MODE_CNTL
,1,

431 {
R_B8_A_VERT_CHROMA_PHASE_OFF_00
,1,

433 {
R_B9_A_VERT_CHROMA_PHASE_OFF_01
,1,

435 {
R_BA_A_VERT_CHROMA_PHASE_OFF_10
,1,

437 {
R_BB_A_VERT_CHROMA_PHASE_OFF_11
,1,

439 {
R_BC_A_VERT_LUMA_PHASE_OFF_00
,1,

441 {
R_BD_A_VERT_LUMA_PHASE_OFF_01
,1,

443 {
R_BE_A_VERT_LUMA_PHASE_OFF_10
,1,

445 {
R_BF_A_VERT_LUMA_PHASE_OFF_11
,1,

450 {
R_C0_B_TASK_HANDLING_CNTL
,1,

452 {
R_C1_B_X_PORT_FORMATS_AND_CONF
,1,

454 {
R_C2_B_INPUT_REFERENCE_SIGNAL_DEFINITION
,1,

456 {
R_C3_B_I_PORT_FORMATS_AND_CONF
,1,

458 {
R_C4_B_HORIZ_INPUT_WINDOW_START
,2,

460 {
R_C6_B_HORIZ_INPUT_WINDOW_LENGTH
,2,

462 {
R_C8_B_VERT_INPUT_WINDOW_START
,2,

464 {
R_CA_B_VERT_INPUT_WINDOW_LENGTH
,2,

466 {
R_CC_B_HORIZ_OUTPUT_WINDOW_LENGTH
,2,

468 {
R_CE_B_VERT_OUTPUT_WINDOW_LENGTH
,2,

472 {
R_D0_B_HORIZ_PRESCALING
,1,

474 {
R_D1_B_ACCUMULATION_LENGTH
,1,

476 {
R_D2_B_PRESCALER_DC_GAIN_AND_FIR_PREFILTER
,1,

479 {
R_D4_B_LUMA_BRIGHTNESS_CNTL
,1,

481 {
R_D5_B_LUMA_CONTRAST_CNTL
,1,

483 {
R_D6_B_CHROMA_SATURATION_CNTL
,1,

488 {
R_D8_B_HORIZ_LUMA_SCALING_INC
,2,

490 {
R_DA_B_HORIZ_LUMA_PHASE_OFF
,1,

493 {
R_DC_B_HORIZ_CHROMA_SCALING
,2,

495 {
R_DE_B_HORIZ_PHASE_OFFSET_CRHOMA
,1,

500 {
R_E0_B_VERT_LUMA_SCALING_INC
,2,

502 {
R_E2_B_VERT_CHROMA_SCALING_INC
,2,

504 {
R_E4_B_VERT_SCALING_MODE_CNTL
,1,

507 {
R_E8_B_VERT_CHROMA_PHASE_OFF_00
,1,

509 {
R_E9_B_VERT_CHROMA_PHASE_OFF_01
,1,

511 {
R_EA_B_VERT_CHROMA_PHASE_OFF_10
,1,

513 {
R_EB_B_VERT_CHROMA_PHASE_OFF_11
,1,

515 {
R_EC_B_VERT_LUMA_PHASE_OFF_00
,1,

517 {
R_ED_B_VERT_LUMA_PHASE_OFF_01
,1,

519 {
R_EE_B_VERT_LUMA_PHASE_OFF_10
,1,

521 {
R_EF_B_VERT_LUMA_PHASE_OFF_11
,1,

525 { 
R_F0_LFCO_PER_LINE
, 1,

527 { 
R_F1_P_I_PARAM_SELECT
,1,

529 { 
R_F2_NOMINAL_PLL2_DTO
,1,

531 {
R_F3_PLL_INCREMENT
,1,

533 {
R_F4_PLL2_STATUS
,1,

535 {
R_F5_PULSGEN_LINE_LENGTH
,1,

537 {
R_F6_PULSE_A_POS_LSB_AND_PULSEGEN_CONFIG
,1,

539 {
R_F7_PULSE_A_POS_MSB
,1,

541 {
R_F8_PULSE_B_POS
,2,

543 {
R_FA_PULSE_C_POS
,2,

546 {
R_FF_S_PLL_MAX_PHASE_ERR_THRESH_NUM_LINES
,1,

	@tuner-simple.h

17 #i‚de‡
__TUNER_SIMPLE_H__


18 
	#__TUNER_SIMPLE_H__


	)

20 
	~<löux/i2c.h
>

21 
	~"dvb_‰⁄ãnd.h
"

23 
sim∂e_tu√r_c⁄fig


24 
	gxf


27 
	gty≥
;

28 
tu√πy≥
 *
	gtun
;

31 #i‡
deföed
(
CONFIG_TUNER_SIMPLE
Ë|| (deföed(
CONFIG_TUNER_SIMPLE_MODULE
Ë&& deföed(
MODULE
))

32 
dvb_‰⁄ãnd
 *
sim∂e_tu√r_©èch
(dvb_‰⁄ãnd *
„
,

33 
i2c_ad≠ãr
 *
i2c_ad≠
,

34 
u8
 
i2c_addr
,

35 
sim∂e_tu√r_c⁄fig
 *
cfg
);

37 
ölöe
 
dvb_‰⁄ãnd
 *
	$sim∂e_tu√r_©èch
(
dvb_‰⁄ãnd
 *
„
,

38 
i2c_ad≠ãr
 *
i2c_ad≠
,

39 
u8
 
i2c_addr
,

40 
sim∂e_tu√r_c⁄fig
 *
cfg
)

42 
	`¥ötk
(
KERN_WARNING
 "%s: drivî dißbÀd by Kc⁄fig\n", 
__FUNCTION__
);

43  
NULL
;

44 
	}
}

	@videocodec.h

144 #i‚de‡
__LINUX_VIDEOCODEC_H


145 
	#__LINUX_VIDEOCODEC_H


	)

147 
	~<löux/videodev.h
>

150 
	#CODEC_DO_COMPRESSION
 0

	)

151 
	#CODEC_DO_EXPANSION
 1

	)

155 
	#CODEC_FLAG_JPEG
 0x00000001L

156 
	#CODEC_FLAG_MPEG
 0x00000002L

157 
	#CODEC_FLAG_DIVX
 0x00000004L

158 
	#CODEC_FLAG_WAVELET
 0x00000008L

160 

	)

161 
	#CODEC_FLAG_MAGIC
 0x00000800L

162 
	#CODEC_FLAG_HARDWARE
 0x00001000L

163 
	#CODEC_FLAG_VFE
 0x00002000L

164 
	#CODEC_FLAG_ENCODER
 0x00004000L

165 
	#CODEC_FLAG_DECODER
 0x00008000L

166 
	#CODEC_FLAG_NEEDIRQ
 0x00010000L

167 
	#CODEC_FLAG_RDWRPIC
 0x00020000L

168 

	)

170 
	#CODEC_MODE_BJPG
 0x0001

171 
	#CODEC_MODE_LJPG
 0x0002

172 
	#CODEC_MODE_MPEG1
 0x0003

173 
	#CODEC_MODE_MPEG2
 0x0004

174 
	#CODEC_MODE_MPEG4
 0x0005

175 
	#CODEC_MODE_MSDIVX
 0x0006

176 
	#CODEC_MODE_ODIVX
 0x0007

177 
	#CODEC_MODE_WAVELET
 0x0008

178 

	)

181 
	#CODEC_TYPE_NONE
 0

	)

182 
	#CODEC_TYPE_L64702
 1

	)

183 
	#CODEC_TYPE_ZR36050
 2

	)

184 
	#CODEC_TYPE_ZR36016
 3

	)

185 
	#CODEC_TYPE_ZR36060
 4

	)

189 
	#CODEC_G_STATUS
 0x0000

	)

190 
	#CODEC_S_CODEC_MODE
 0x0001

	)

191 
	#CODEC_G_CODEC_MODE
 0x8001

	)

192 
	#CODEC_S_VFE
 0x0002

	)

193 
	#CODEC_G_VFE
 0x8002

	)

194 
	#CODEC_S_MMAP
 0x0003

	)

196 
	#CODEC_S_JPEG_TDS_BYTE
 0x0010

	)

197 
	#CODEC_G_JPEG_TDS_BYTE
 0x8010

	)

198 
	#CODEC_S_JPEG_SCALE
 0x0011

	)

199 
	#CODEC_G_JPEG_SCALE
 0x8011

	)

200 
	#CODEC_S_JPEG_HDT_DATA
 0x0018

	)

201 
	#CODEC_G_JPEG_HDT_DATA
 0x8018

	)

202 
	#CODEC_S_JPEG_QDT_DATA
 0x0019

	)

203 
	#CODEC_G_JPEG_QDT_DATA
 0x8019

	)

204 
	#CODEC_S_JPEG_APP_DATA
 0x001A

	)

205 
	#CODEC_G_JPEG_APP_DATA
 0x801A

	)

206 
	#CODEC_S_JPEG_COM_DATA
 0x001B

	)

207 
	#CODEC_G_JPEG_COM_DATA
 0x801B

	)

209 
	#CODEC_S_PRIVATE
 0x1000

	)

210 
	#CODEC_G_PRIVATE
 0x9000

	)

212 
	#CODEC_G_FLAG
 0x8000

	)

216 
	#CODEC_TRANSFER_KERNEL
 0

	)

217 
	#CODEC_TRANSFER_USER
 1

	)

224 
	sv„_pﬁ¨ôy
 {

225 
	mvsync_pﬁ
:1;

226 
	mhsync_pﬁ
:1;

227 
	mfõld_pﬁ
:1;

228 
	mbœnk_pﬁ
:1;

229 
	msubimg_pﬁ
:1;

230 
	mp€_pﬁ
:1;

231 
	mpvÆid_pﬁ
:1;

232 
	mv˛k_pﬁ
:1;

235 
	sv„_£âögs
 {

236 
__u32
 
	mx
, 
	my
;

237 
__u32
 
	mwidth
, 
	mheight
;

238 
__u16
 
	mdecim©i⁄
;

239 
__u16
 
	mÊags
;

244 
__u16
 
	mquÆôy
;

247 
	stvn‹m
 {

248 
u16
 
	mWt
, 
	mWa
, 
	mHSèπ
, 
	mHSyncSèπ
, 
	mHt
, 
	mHa
, 
	mVSèπ
;

251 
	sj≥g_com_m¨kî
 {

252 
	mÀn
;

253 
	md©a
[60];

256 
	sj≥g_≠p_m¨kî
 {

257 
	m≠≤
;

258 
	mÀn
;

259 
	md©a
[60];

262 
	svideocodec
 {

263 
moduÀ
 *
	mow√r
;

265 
	m«me
[32];

266 
	mmagic
;

267 
	mÊags
;

268 
	mty≥
;

272 
videocodec_ma°î
 *
	mma°î_d©a
;

276 *
	md©a
;

279 (*
	m£tup
Ë(
videocodec
 * 
	mcodec
);

280 (*
	mun£t
Ë(
videocodec
 * 
	mcodec
);

284 (*
	m£t_mode
Ë(
videocodec
 * 
	mcodec
,

285 
	mmode
);

287 (*
	m£t_video
Ë(
videocodec
 * 
	mcodec
,

288 
tvn‹m
 * 
	mn‹m
,

289 
v„_£âögs
 * 
	mˇp
,

290 
v„_pﬁ¨ôy
 * 
	mpﬁ
);

292 (*
	mc⁄åﬁ
Ë(
videocodec
 * 
	mcodec
,

293 
	mty≥
,

294 
	msize
,

295 *
	md©a
);

299 (*
	m£tup_öãºu±
Ë(
videocodec
 * 
	mcodec
,

300 
	mmode
);

301 (*
	mh™dÀ_öãºu±
Ë(
videocodec
 * 
	mcodec
,

302 
	msour˚
,

303 
	mÊag
);

305 (*
	mput_image
Ë(
videocodec
 * 
	mcodec
,

306 
	må_ty≥
,

307 
	mblock
,

308 *
	m‰_num
,

309 *
	mÊag
,

310 
	msize
,

311 *
	mbuf
);

312 (*
	mgë_image
Ë(
videocodec
 * 
	mcodec
,

313 
	må_ty≥
,

314 
	mblock
,

315 *
	m‰_num
,

316 *
	mÊag
,

317 
	msize
,

318 *
	mbuf
);

321 
	svideocodec_ma°î
 {

323 
	m«me
[32];

324 
	mmagic
;

325 
	mÊags
;

326 
	mty≥
;

328 *
	md©a
;

330 
__u32
(*
ªadªg
Ë(
videocodec
 * 
	mcodec
,

331 
__u16
 
	mªg
);

332 (*
	mwrôîeg
Ë(
videocodec
 * 
	mcodec
,

333 
__u16
 
	mªg
,

334 
__u32
 
	mvÆue
);

346 
videocodec
 *
videocodec_©èch
(
videocodec_ma°î
 *);

348 
videocodec_dëach
(
videocodec
 *);

352 
videocodec_ªgi°î
(c⁄° 
videocodec
 *);

354 
videocodec_uƒegi°î
(c⁄° 
videocodec
 *);

	@videodev2_s3c.h

1 #i‚de‡
__VIDEODEV2_S3C_H_


2 
	#__VIDEODEV2_S3C_H_


	)

4 
	~<löux/videodev2.h
>

6 
	#V4L2_INPUT_TYPE_MSDMA
 3

	)

7 
	#V4L2_INPUT_TYPE_INTERLACE
 4

	)

14 
	#V4L2_CID_ORIGINAL
 (
V4L2_CID_PRIVATE_BASE
 + 0)

	)

15 
	#V4L2_CID_ARBITRARY
 (
V4L2_CID_PRIVATE_BASE
 + 1)

	)

16 
	#V4L2_CID_NEGATIVE
 (
V4L2_CID_PRIVATE_BASE
 + 2)

	)

17 
	#V4L2_CID_ART_FREEZE
 (
V4L2_CID_PRIVATE_BASE
 + 3)

	)

18 
	#V4L2_CID_EMBOSSING
 (
V4L2_CID_PRIVATE_BASE
 + 4)

	)

19 
	#V4L2_CID_SILHOUETTE
 (
V4L2_CID_PRIVATE_BASE
 + 5)

	)

22 
	#V4L2_CID_ROTATE_90
 (
V4L2_CID_PRIVATE_BASE
 + 6)

	)

23 
	#V4L2_CID_ROTATE_180
 (
V4L2_CID_PRIVATE_BASE
 + 7)

	)

24 
	#V4L2_CID_ROTATE_270
 (
V4L2_CID_PRIVATE_BASE
 + 8)

	)

25 
	#V4L2_CID_ROTATE_BYPASS
 (
V4L2_CID_PRIVATE_BASE
 + 9)

	)

28 
	#V4L2_CID_ZOOMIN
 (
V4L2_CID_PRIVATE_BASE
 + 10)

	)

29 
	#V4L2_CID_ZOOMOUT
 (
V4L2_CID_PRIVATE_BASE
 + 11)

	)

35 
	#VIDIOC_S_CAMERA_START
 
	`_IO
 ('V', 
BASE_VIDIOC_PRIVATE
 + 0)

	)

36 
	#VIDIOC_S_CAMERA_STOP
 
	`_IO
 ('V', 
BASE_VIDIOC_PRIVATE
 + 1)

	)

37 
	#VIDIOC_MSDMA_START
 
	`_IOW
 ('V', 
BASE_VIDIOC_PRIVATE
 + 2, 
v4l2_msdma_f‹m©
)

	)

38 
	#VIDIOC_MSDMA_STOP
 
	`_IOW
 ('V', 
BASE_VIDIOC_PRIVATE
 + 3, 
v4l2_msdma_f‹m©
)

	)

39 
	#VIDIOC_S_MSDMA
 
	`_IOW
 ('V', 
BASE_VIDIOC_PRIVATE
 + 4, 
v4l2_msdma_f‹m©
)

	)

40 
	#VIDIOC_S_INTERLACE_MODE
 
	`_IOW
 ('V', 
BASE_VIDIOC_PRIVATE
 + 5, 
v4l2_öãæa˚_f‹m©
)

	)

45 
	#S3C_VIDEO_DECODER_PAL
 1

	)

46 
	#S3C_VIDEO_DECODER_NTSC
 2

	)

47 
	#S3C_VIDEO_DECODER_SECAM
 4

	)

48 
	#S3C_VIDEO_DECODER_AUTO
 8

	)

49 
	#S3C_VIDEO_DECODER_CCIR
 16

	)

51 
	#S3C_DECODER_INIT
 
	`_IOW
 ('V', 
BASE_VIDIOC_PRIVATE
 + 14, 
s3c_video_decodî_öô
Ë

	)

52 
	#S3C_DECODER_GET_CAPABILITIES
 
	`_IOR
 ('V', 
BASE_VIDIOC_PRIVATE
 + 6, 
s3c_video_decodî_ˇ∑bûôy
)

	)

53 
	#S3C_DECODER_GET_STATUS
 
	`_IOR
 ('V', 
BASE_VIDIOC_PRIVATE
 + 7, )

	)

54 
	#S3C_DECODER_SET_NORM
 
	`_IOW
 ('V', 
BASE_VIDIOC_PRIVATE
 + 8, )

	)

55 
	#S3C_DECODER_SET_INPUT
 
	`_IOW
 ('V', 
BASE_VIDIOC_PRIVATE
 + 9, Ë

	)

56 
	#S3C_DECODER_SET_OUTPUT
 
	`_IOW
 ('V', 
BASE_VIDIOC_PRIVATE
 + 10, Ë

	)

57 
	#S3C_DECODER_ENABLE_OUTPUT
 
	`_IOW
 ('V', 
BASE_VIDIOC_PRIVATE
 + 11, Ë

	)

58 
	#S3C_DECODER_SET_PICTURE
 
	`_IOW
 ('V', 
BASE_VIDIOC_PRIVATE
 + 12, 
video_pi˘uª
)

	)

59 
	#S3C_DECODER_SET_GPIO
 
	`_IOW
 ('V', 
BASE_VIDIOC_PRIVATE
 + 13, Ë

	)

60 
	#S3C_DECODER_SET_VBI_BYPASS
 
	`_IOW
 ('V', 
BASE_VIDIOC_PRIVATE
 + 15, Ë

	)

61 
	#S3C_DECODER_DUMP
 
	`_IO
 ('V', 
BASE_VIDIOC_PRIVATE
 + 16Ë

	)

63 
	ev4l2_msdma_öput
 {

64 
	mV4L2_MSDMA_CODEC
 = 1,

65 
	mV4L2_MSDMA_PREVIEW
 = 2,

68 
	sv4l2_msdma_f‹m©


70 
__u32
 
	mwidth
;

71 
__u32
 
	mheight
;

72 
__u32
 
	mpixñf‹m©
;

73 
v4l2_msdma_öput
 
	möput_∑th
;

76 
	sv4l2_öãæa˚_f‹m©


78 
__u32
 
	mwidth
;

79 
__u32
 
	mheight
;

82 
	ss3c_video_decodî_öô
 {

83 
	mÀn
;

84 c⁄° *
	md©a
;

87 
	ss3c_video_decodî_ˇ∑bûôy
 {

88 
__u32
 
	mÊags
;

89 
	möputs
;

90 
	mouçuts
;

94 
v4l2_öput
 
	gfimc_öputs
[] = {

96 .
ödex
 = 0,

97 .
	g«me
 = "S3C FIMC External Camera Input",

98 .
	gty≥
 = 
V4L2_INPUT_TYPE_CAMERA
,

99 .
	gaudio£t
 = 1,

100 .
	gtu√r
 = 0,

101 .
	g°d
 = 
V4L2_STD_PAL_BG
 | 
V4L2_STD_NTSC_M
,

102 .
	g°©us
 = 0,

105 .
	gödex
 = 1,

106 .
	g«me
 = "Memory Input (MSDMA)",

107 .
	gty≥
 = 
V4L2_INPUT_TYPE_MSDMA
,

108 .
	gaudio£t
 = 2,

109 .
	gtu√r
 = 0,

110 .
	g°d
 = 
V4L2_STD_PAL_BG
 | 
V4L2_STD_NTSC_M
,

111 .
	g°©us
 = 0,

115 
v4l2_ouçut
 
	gfimc_ouçuts
[] = {

117 .
ödex
 = 0,

118 .
	g«me
 = "Pingpong Memory Output",

119 .
	gty≥
 = 0,

120 .
	gaudio£t
 = 0,

121 .
	gmoduœt‹
 = 0,

122 .
	g°d
 = 0,

125 .
	gödex
 = 1,

126 .
	g«me
 = "LCD FIFO Output",

127 .
	gty≥
 = 0,

128 .
	gaudio£t
 = 0,

129 .
	gmoduœt‹
 = 0,

130 .
	g°d
 = 0,

134 c⁄° 
v4l2_fmtdesc
 
	gfimc_codec_f‹m©s
[] = {

136 .
ödex
 = 0,

137 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
,

138 .
	gÊags
 = 
FORMAT_FLAGS_PACKED
,

139 .
	gdes¸ùti⁄
 = "16 bpp RGB,Üe",

140 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_RGB565
,

143 .
	gödex
 = 1,

144 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
,

145 .
	gÊags
 = 
FORMAT_FLAGS_PACKED
,

146 .
	gdes¸ùti⁄
 = "32 bpp RGB,Üe",

147 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_BGR32
,

150 .
	gödex
 = 2,

151 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
,

152 .
	gÊags
 = 
FORMAT_FLAGS_PLANAR
,

153 .
	gdes¸ùti⁄
 = "4:2:2,Ölanar, Y-Cb-Cr",

154 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_YUV422P
,

158 .
	gödex
 = 3,

159 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
,

160 .
	gÊags
 = 
FORMAT_FLAGS_PLANAR
,

161 .
	gdes¸ùti⁄
 = "4:2:0,Ölanar, Y-Cb-Cr",

162 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_YUV420
,

166 c⁄° 
v4l2_fmtdesc
 
	gfimc_¥evõw_f‹m©s
[] = {

168 .
ödex
 = 0,

169 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_OVERLAY
,

170 .
	gÊags
 = 
FORMAT_FLAGS_PACKED
,

171 .
	gdes¸ùti⁄
 = "16 bpp RGB,Üe",

172 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_RGB565
,

175 .
	gödex
 = 1,

176 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_OVERLAY
,

177 .
	gÊags
 = 
FORMAT_FLAGS_PACKED
,

178 .
	gdes¸ùti⁄
 = "24 bpp RGB,Üe",

179 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_RGB24
,

182 .
	gödex
 = 2,

183 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_OVERLAY
,

184 .
	gÊags
 = 
FORMAT_FLAGS_PACKED
,

185 .
	gdes¸ùti⁄
 = "32 bpp RGB,Üe",

186 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_BGR32
,

189 .
	gödex
 = 3,

190 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_OVERLAY
,

191 .
	gÊags
 = 
FORMAT_FLAGS_PLANAR
,

192 .
	gdes¸ùti⁄
 = "4:2:2,Ölanar, Y-Cb-Cr",

193 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_YUV422P
,

197 .
	gödex
 = 4,

198 .
	gty≥
 = 
V4L2_BUF_TYPE_VIDEO_OVERLAY
,

199 .
	gÊags
 = 
FORMAT_FLAGS_PLANAR
,

200 .
	gdes¸ùti⁄
 = "4:2:0,Ölanar, Y-Cb-Cr",

201 .
	gpixñf‹m©
 = 
V4L2_PIX_FMT_YUV420
,

205 
	#NUMBER_OF_PREVIEW_FORMATS
 
	`ARRAY_SIZE
(
fimc_¥evõw_f‹m©s
)

	)

206 
	#NUMBER_OF_CODEC_FORMATS
 
	`ARRAY_SIZE
(
fimc_codec_f‹m©s
)

	)

207 
	#NUMBER_OF_INPUTS
 
	`ARRAY_SIZE
(
fimc_öputs
)

	)

208 
	#NUMBER_OF_OUTPUTS
 
	`ARRAY_SIZE
(
fimc_ouçuts
)

	)

	@/usr/include/asm/page.h

1 #ifde‡
__i386__


2 
	~"∑ge_32.h
"

4 
	~"∑ge_64.h
"

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 #i‚de‡
__ASSEMBLY__


6 
	tumode_t
;

13 
__sig√d__
 
	t__s8
;

14 
	t__u8
;

16 
__sig√d__
 
	t__s16
;

17 
	t__u16
;

19 
__sig√d__
 
	t__s32
;

20 
	t__u32
;

22 #ifde‡
__i386__


23 #ifde‡
__GNUC__


24 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

25 
__exãnsi⁄__
 
	t__u64
;

28 
__sig√d__
 
	t__s64
;

29 
	t__u64
;

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

23 #unde‡
NR_OPEN


24 
	#NR_OPEN
 (1024*1024Ë

	)

25 
	#INR_OPEN
 1024

	)

27 
	#BLOCK_SIZE_BITS
 10

	)

28 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

30 
	#SEEK_SET
 0

	)

31 
	#SEEK_CUR
 1

	)

32 
	#SEEK_END
 2

	)

33 
	#SEEK_MAX
 
SEEK_END


	)

36 
	sfûes_°©_°ru˘
 {

37 
	mƒ_fûes
;

38 
	mƒ_‰ì_fûes
;

39 
	mmax_fûes
;

41 
fûes_°©_°ru˘
 
fûes_°©
;

42 
gë_max_fûes
();

44 
	söodes_°©_t
 {

45 
	mƒ_öodes
;

46 
	mƒ_unu£d
;

47 
	mdummy
[5];

49 
öodes_°©_t
 
öodes_°©
;

51 
Àa£s_íabÀ
, 
Àa£_bªak_time
;

53 #ifde‡
CONFIG_DNOTIFY


54 
dú_nŸify_íabÀ
;

57 
	#NR_FILE
 8192

	)

59 
	#MAY_EXEC
 1

	)

60 
	#MAY_WRITE
 2

	)

61 
	#MAY_READ
 4

	)

62 
	#MAY_APPEND
 8

	)

64 
	#FMODE_READ
 1

	)

65 
	#FMODE_WRITE
 2

	)

68 
	#FMODE_LSEEK
 4

	)

69 
	#FMODE_PREAD
 8

	)

70 
	#FMODE_PWRITE
 
FMODE_PREAD


	)

75 
	#FMODE_EXEC
 16

	)

77 
	#RW_MASK
 1

	)

78 
	#RWA_MASK
 2

	)

79 
	#READ
 0

	)

80 
	#WRITE
 1

	)

81 
	#READA
 2

	)

82 
	#SWRITE
 3

	)

83 
	#READ_SYNC
 (
READ
 | (1 << 
BIO_RW_SYNC
))

	)

84 
	#READ_META
 (
READ
 | (1 << 
BIO_RW_META
))

	)

85 
	#WRITE_SYNC
 (
WRITE
 | (1 << 
BIO_RW_SYNC
))

	)

86 
	#WRITE_BARRIER
 ((1 << 
BIO_RW
Ë| (1 << 
BIO_RW_BARRIER
))

	)

88 
	#SEL_IN
 1

	)

89 
	#SEL_OUT
 2

	)

90 
	#SEL_EX
 4

	)

93 
	#FS_REQUIRES_DEV
 1

	)

94 
	#FS_BINARY_MOUNTDATA
 2

	)

95 
	#FS_HAS_SUBTYPE
 4

	)

96 
	#FS_REVAL_DOT
 16384

	)

97 
	#FS_RENAME_DOES_D_MOVE
 32768

	)

104 
	#MS_RDONLY
 1

	)

105 
	#MS_NOSUID
 2

	)

106 
	#MS_NODEV
 4

	)

107 
	#MS_NOEXEC
 8

	)

108 
	#MS_SYNCHRONOUS
 16

	)

109 
	#MS_REMOUNT
 32

	)

110 
	#MS_MANDLOCK
 64

	)

111 
	#MS_DIRSYNC
 128

	)

112 
	#MS_NOATIME
 1024

	)

113 
	#MS_NODIRATIME
 2048

	)

114 
	#MS_BIND
 4096

	)

115 
	#MS_MOVE
 8192

	)

116 
	#MS_REC
 16384

	)

117 
	#MS_VERBOSE
 32768

	)

119 
	#MS_SILENT
 32768

	)

120 
	#MS_POSIXACL
 (1<<16Ë

	)

121 
	#MS_UNBINDABLE
 (1<<17Ë

	)

122 
	#MS_PRIVATE
 (1<<18Ë

	)

123 
	#MS_SLAVE
 (1<<19Ë

	)

124 
	#MS_SHARED
 (1<<20Ë

	)

125 
	#MS_RELATIME
 (1<<21Ë

	)

126 
	#MS_KERNMOUNT
 (1<<22Ë

	)

127 
	#MS_ACTIVE
 (1<<30)

	)

128 
	#MS_NOUSER
 (1<<31)

	)

133 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
)

	)

138 
	#MS_MGC_VAL
 0xC0ED0000

	)

139 
	#MS_MGC_MSK
 0xffff0000

	)

143 
	#S_SYNC
 1

	)

144 
	#S_NOATIME
 2

	)

145 
	#S_APPEND
 4

	)

146 
	#S_IMMUTABLE
 8

	)

147 
	#S_DEAD
 16

	)

148 
	#S_NOQUOTA
 32

	)

149 
	#S_DIRSYNC
 64

	)

150 
	#S_NOCMTIME
 128

	)

151 
	#S_SWAPFILE
 256

	)

152 
	#S_PRIVATE
 512

	)

167 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

169 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

170 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
) || \

171 ((
öode
)->
i_Êags
 & 
S_SYNC
))

	)

172 
	#IS_DIRSYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
|
MS_DIRSYNC
) || \

173 ((
öode
)->
i_Êags
 & (
S_SYNC
|
S_DIRSYNC
)))

	)

174 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

175 
	#IS_NOATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_RDONLY
|
MS_NOATIME
)

	)

177 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

178 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

179 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

180 
	#IS_POSIXACL
(
öode
Ë
	`__IS_FLG
(öode, 
MS_POSIXACL
)

	)

182 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

183 
	#IS_NOCMTIME
(
öode
Ë((öode)->
i_Êags
 & 
S_NOCMTIME
)

	)

184 
	#IS_SWAPFILE
(
öode
Ë((öode)->
i_Êags
 & 
S_SWAPFILE
)

	)

185 
	#IS_PRIVATE
(
öode
Ë((öode)->
i_Êags
 & 
S_PRIVATE
)

	)

190 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

191 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

192 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

193 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

194 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

195 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

196 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

197 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

198 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

199 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

200 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

201 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

203 
	#BLKPG
 
	`_IO
(0x12,105)

	)

207 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

208 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

213 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

214 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

215 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

216 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

217 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

218 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

219 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

221 
	#BMAP_IOCTL
 1

	)

222 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

223 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

225 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

226 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

227 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

228 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

229 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

230 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

231 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

232 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

237 
	#FS_SECRM_FL
 0x00000001

	)

238 
	#FS_UNRM_FL
 0x00000002

	)

239 
	#FS_COMPR_FL
 0x00000004

	)

240 
	#FS_SYNC_FL
 0x00000008

	)

241 
	#FS_IMMUTABLE_FL
 0x00000010

	)

242 
	#FS_APPEND_FL
 0x00000020

	)

243 
	#FS_NODUMP_FL
 0x00000040

	)

244 
	#FS_NOATIME_FL
 0x00000080

	)

246 
	#FS_DIRTY_FL
 0x00000100

	)

247 
	#FS_COMPRBLK_FL
 0x00000200

	)

248 
	#FS_NOCOMP_FL
 0x00000400

	)

249 
	#FS_ECOMPR_FL
 0x00000800

	)

251 
	#FS_BTREE_FL
 0x00001000

	)

252 
	#FS_INDEX_FL
 0x00001000

	)

253 
	#FS_IMAGIC_FL
 0x00002000

	)

254 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

255 
	#FS_NOTAIL_FL
 0x00008000

	)

256 
	#FS_DIRSYNC_FL
 0x00010000

	)

257 
	#FS_TOPDIR_FL
 0x00020000

	)

258 
	#FS_EXTENT_FL
 0x00080000

	)

259 
	#FS_DIRECTIO_FL
 0x00100000

	)

260 
	#FS_RESERVED_FL
 0x80000000

	)

262 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

263 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

266 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

267 
	#SYNC_FILE_RANGE_WRITE
 2

	)

268 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/i2c.h

26 #i‚de‡
_LINUX_I2C_H


27 
	#_LINUX_I2C_H


	)

29 
	~<löux/ty≥s.h
>

67 
	si2c_msg
 {

68 
__u16
 
	maddr
;

69 
__u16
 
	mÊags
;

70 
	#I2C_M_TEN
 0x0010

	)

71 
	#I2C_M_RD
 0x0001

	)

72 
	#I2C_M_NOSTART
 0x4000

	)

73 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

74 
	#I2C_M_IGNORE_NAK
 0x1000

	)

75 
	#I2C_M_NO_RD_ACK
 0x0800

	)

76 
	#I2C_M_RECV_LEN
 0x0400

	)

77 
__u16
 
	mÀn
;

78 
__u8
 *
	mbuf
;

83 
	#I2C_FUNC_I2C
 0x00000001

	)

84 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

85 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

86 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

87 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

88 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

89 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

90 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

91 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

92 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

93 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

94 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

95 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

96 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

97 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

98 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

99 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

100 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK_2
 0x10000000

	)

101 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK_2
 0x20000000

	)

103 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

104 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

105 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

106 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

107 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

108 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

109 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

110 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

111 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

112 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

113 
	#I2C_FUNC_SMBUS_I2C_BLOCK_2
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK_2
 | \

114 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK_2
)

	)

116 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

117 
I2C_FUNC_SMBUS_BYTE
 | \

118 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

119 
I2C_FUNC_SMBUS_WORD_DATA
 | \

120 
I2C_FUNC_SMBUS_PROC_CALL
 | \

121 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

122 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

123 
I2C_FUNC_SMBUS_PEC
)

	)

128 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

129 
	ui2c_smbus_d©a
 {

130 
__u8
 
	mbyã
;

131 
__u16
 
	mw‹d
;

132 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

137 
	#I2C_SMBUS_READ
 1

	)

138 
	#I2C_SMBUS_WRITE
 0

	)

142 
	#I2C_SMBUS_QUICK
 0

	)

143 
	#I2C_SMBUS_BYTE
 1

	)

144 
	#I2C_SMBUS_BYTE_DATA
 2

	)

145 
	#I2C_SMBUS_WORD_DATA
 3

	)

146 
	#I2C_SMBUS_PROC_CALL
 4

	)

147 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

148 
	#I2C_SMBUS_I2C_BLOCK_BROKEN
 6

	)

149 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

150 
	#I2C_SMBUS_I2C_BLOCK_DATA
 8

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

9 
	#SI_LOAD_SHIFT
 16

	)

10 
	ssysöfo
 {

11 
	mu±ime
;

12 
	mlﬂds
[3];

13 
	mtŸÆøm
;

14 
	m‰ìøm
;

15 
	msh¨edøm
;

16 
	mbuf„ºam
;

17 
	mtŸÆsw≠
;

18 
	m‰ìsw≠
;

19 
	m¥ocs
;

20 
	m∑d
;

21 
	mtŸÆhigh
;

22 
	m‰ìhigh
;

23 
	mmem_unô
;

24 
	m_f
[20-2*()-()];

28 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()([1 - 2*!!(c⁄dôi⁄)]))

	)

34 
	#BUILD_BUG_ON_ZERO
(
e
Ë(([1 - 2 * !!”)]Ë- 1)

	)

37 
	#__FUNCTION__
 (
__func__
)

	)

40 #ifde‡
CONFIG_NUMA


41 
	#NUMA_BUILD
 1

	)

43 
	#NUMA_BUILD
 0

	)

	@/usr/include/linux/major.h

1 #i‚de‡
_LINUX_MAJOR_H


2 
	#_LINUX_MAJOR_H


	)

9 
	#UNNAMED_MAJOR
 0

	)

10 
	#MEM_MAJOR
 1

	)

11 
	#RAMDISK_MAJOR
 1

	)

12 
	#FLOPPY_MAJOR
 2

	)

13 
	#PTY_MASTER_MAJOR
 2

	)

14 
	#IDE0_MAJOR
 3

	)

15 
	#HD_MAJOR
 
IDE0_MAJOR


	)

16 
	#PTY_SLAVE_MAJOR
 3

	)

17 
	#TTY_MAJOR
 4

	)

18 
	#TTYAUX_MAJOR
 5

	)

19 
	#LP_MAJOR
 6

	)

20 
	#VCS_MAJOR
 7

	)

21 
	#LOOP_MAJOR
 7

	)

22 
	#SCSI_DISK0_MAJOR
 8

	)

23 
	#SCSI_TAPE_MAJOR
 9

	)

24 
	#MD_MAJOR
 9

	)

25 
	#MISC_MAJOR
 10

	)

26 
	#SCSI_CDROM_MAJOR
 11

	)

27 
	#MUX_MAJOR
 11

	)

28 
	#XT_DISK_MAJOR
 13

	)

29 
	#INPUT_MAJOR
 13

	)

30 
	#SOUND_MAJOR
 14

	)

31 
	#CDU31A_CDROM_MAJOR
 15

	)

32 
	#JOYSTICK_MAJOR
 15

	)

33 
	#GOLDSTAR_CDROM_MAJOR
 16

	)

34 
	#OPTICS_CDROM_MAJOR
 17

	)

35 
	#SANYO_CDROM_MAJOR
 18

	)

36 
	#CYCLADES_MAJOR
 19

	)

37 
	#CYCLADESAUX_MAJOR
 20

	)

38 
	#MITSUMI_X_CDROM_MAJOR
 20

	)

39 
	#MFM_ACORN_MAJOR
 21

	)

40 
	#SCSI_GENERIC_MAJOR
 21

	)

41 
	#IDE1_MAJOR
 22

	)

42 
	#DIGICU_MAJOR
 22

	)

43 
	#DIGI_MAJOR
 23

	)

44 
	#MITSUMI_CDROM_MAJOR
 23

	)

45 
	#CDU535_CDROM_MAJOR
 24

	)

46 
	#STL_SERIALMAJOR
 24

	)

47 
	#MATSUSHITA_CDROM_MAJOR
 25

	)

48 
	#STL_CALLOUTMAJOR
 25

	)

49 
	#MATSUSHITA_CDROM2_MAJOR
 26

	)

50 
	#QIC117_TAPE_MAJOR
 27

	)

51 
	#MATSUSHITA_CDROM3_MAJOR
 27

	)

52 
	#MATSUSHITA_CDROM4_MAJOR
 28

	)

53 
	#STL_SIOMEMMAJOR
 28

	)

54 
	#ACSI_MAJOR
 28

	)

55 
	#AZTECH_CDROM_MAJOR
 29

	)

56 
	#GRAPHDEV_MAJOR
 29

	)

57 
	#CM206_CDROM_MAJOR
 32

	)

58 
	#IDE2_MAJOR
 33

	)

59 
	#IDE3_MAJOR
 34

	)

60 
	#Z8530_MAJOR
 34

	)

61 
	#XPRAM_MAJOR
 35

	)

62 
	#NETLINK_MAJOR
 36

	)

63 
	#PS2ESDI_MAJOR
 36

	)

64 
	#IDETAPE_MAJOR
 37

	)

65 
	#Z2RAM_MAJOR
 37

	)

66 
	#APBLOCK_MAJOR
 38

	)

67 
	#DDV_MAJOR
 39

	)

68 
	#NBD_MAJOR
 43

	)

69 
	#RISCOM8_NORMAL_MAJOR
 48

	)

70 
	#DAC960_MAJOR
 48

	)

71 
	#RISCOM8_CALLOUT_MAJOR
 49

	)

72 
	#MKISS_MAJOR
 55

	)

73 
	#DSP56K_MAJOR
 55

	)

75 
	#IDE4_MAJOR
 56

	)

76 
	#IDE5_MAJOR
 57

	)

78 
	#SCSI_DISK1_MAJOR
 65

	)

79 
	#SCSI_DISK2_MAJOR
 66

	)

80 
	#SCSI_DISK3_MAJOR
 67

	)

81 
	#SCSI_DISK4_MAJOR
 68

	)

82 
	#SCSI_DISK5_MAJOR
 69

	)

83 
	#SCSI_DISK6_MAJOR
 70

	)

84 
	#SCSI_DISK7_MAJOR
 71

	)

86 
	#COMPAQ_SMART2_MAJOR
 72

	)

87 
	#COMPAQ_SMART2_MAJOR1
 73

	)

88 
	#COMPAQ_SMART2_MAJOR2
 74

	)

89 
	#COMPAQ_SMART2_MAJOR3
 75

	)

90 
	#COMPAQ_SMART2_MAJOR4
 76

	)

91 
	#COMPAQ_SMART2_MAJOR5
 77

	)

92 
	#COMPAQ_SMART2_MAJOR6
 78

	)

93 
	#COMPAQ_SMART2_MAJOR7
 79

	)

95 
	#SPECIALIX_NORMAL_MAJOR
 75

	)

96 
	#SPECIALIX_CALLOUT_MAJOR
 76

	)

98 
	#AURORA_MAJOR
 79

	)

100 
	#I2O_MAJOR
 80

	)

102 
	#SHMIQ_MAJOR
 85

	)

103 
	#SCSI_CHANGER_MAJOR
 86

	)

105 
	#IDE6_MAJOR
 88

	)

106 
	#IDE7_MAJOR
 89

	)

107 
	#IDE8_MAJOR
 90

	)

108 
	#IDE9_MAJOR
 91

	)

110 
	#DASD_MAJOR
 94

	)

112 
	#MDISK_MAJOR
 95

	)

114 
	#UBD_MAJOR
 98

	)

116 
	#PP_MAJOR
 99

	)

117 
	#JSFD_MAJOR
 99

	)

119 
	#PHONE_MAJOR
 100

	)

121 
	#COMPAQ_CISS_MAJOR
 104

	)

122 
	#COMPAQ_CISS_MAJOR1
 105

	)

123 
	#COMPAQ_CISS_MAJOR2
 106

	)

124 
	#COMPAQ_CISS_MAJOR3
 107

	)

125 
	#COMPAQ_CISS_MAJOR4
 108

	)

126 
	#COMPAQ_CISS_MAJOR5
 109

	)

127 
	#COMPAQ_CISS_MAJOR6
 110

	)

128 
	#COMPAQ_CISS_MAJOR7
 111

	)

130 
	#VIODASD_MAJOR
 112

	)

131 
	#VIOCD_MAJOR
 113

	)

133 
	#ATARAID_MAJOR
 114

	)

135 
	#SCSI_DISK8_MAJOR
 128

	)

136 
	#SCSI_DISK9_MAJOR
 129

	)

137 
	#SCSI_DISK10_MAJOR
 130

	)

138 
	#SCSI_DISK11_MAJOR
 131

	)

139 
	#SCSI_DISK12_MAJOR
 132

	)

140 
	#SCSI_DISK13_MAJOR
 133

	)

141 
	#SCSI_DISK14_MAJOR
 134

	)

142 
	#SCSI_DISK15_MAJOR
 135

	)

144 
	#UNIX98_PTY_MASTER_MAJOR
 128

	)

145 
	#UNIX98_PTY_MAJOR_COUNT
 8

	)

146 
	#UNIX98_PTY_SLAVE_MAJOR
 (
UNIX98_PTY_MASTER_MAJOR
+
UNIX98_PTY_MAJOR_COUNT
)

	)

148 
	#RTF_MAJOR
 150

	)

149 
	#RAW_MAJOR
 162

	)

151 
	#USB_ACM_MAJOR
 166

	)

152 
	#USB_ACM_AUX_MAJOR
 167

	)

153 
	#USB_CHAR_MAJOR
 180

	)

155 
	#MMC_BLOCK_MAJOR
 179

	)

157 
	#VXVM_MAJOR
 199

	)

158 
	#VXSPEC_MAJOR
 200

	)

159 
	#VXDMP_MAJOR
 201

	)

161 
	#XENVBD_MAJOR
 202

	)

163 
	#MSR_MAJOR
 202

	)

164 
	#CPUID_MAJOR
 203

	)

166 
	#OSST_MAJOR
 206

	)

168 
	#IBM_TTY3270_MAJOR
 227

	)

169 
	#IBM_FS3270_MAJOR
 228

	)

171 
	#VIOTAPE_MAJOR
 230

	)

	@/usr/include/linux/poll.h

1 #i‚de‡
_LINUX_POLL_H


2 
	#_LINUX_POLL_H


	)

4 
	~<asm/pﬁl.h
>

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

24 
	#CLONE_STOPPED
 0x02000000

	)

25 
	#CLONE_NEWUTS
 0x04000000

	)

26 
	#CLONE_NEWIPC
 0x08000000

	)

27 
	#CLONE_NEWUSER
 0x10000000

	)

28 
	#CLONE_NEWPID
 0x20000000

	)

29 
	#CLONE_NEWNET
 0x40000000

	)

34 
	#SCHED_NORMAL
 0

	)

35 
	#SCHED_FIFO
 1

	)

36 
	#SCHED_RR
 2

	)

37 
	#SCHED_BATCH
 3

	)

39 
	#SCHED_IDLE
 5

	)

	@/usr/include/linux/signal.h

1 #i‚de‡
_LINUX_SIGNAL_H


2 
	#_LINUX_SIGNAL_H


	)

4 
	~<asm/sig«l.h
>

5 
	~<asm/sigöfo.h
>

	@/usr/include/linux/tty.h

1 #i‚de‡
_LINUX_TTY_H


2 
	#_LINUX_TTY_H


	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

5 
	~<löux/posix_ty≥s.h
>

6 
	~<asm/ty≥s.h
>

8 #i‚de‡
__KERNEL_STRICT_NAMES


10 
__u32
 
	t__kî√l_dev_t
;

12 
__kî√l_fd_£t
 
	tfd_£t
;

13 
__kî√l_dev_t
 
	tdev_t
;

14 
__kî√l_öo_t
 
	töo_t
;

15 
__kî√l_mode_t
 
	tmode_t
;

16 
__kî√l_∆ök_t
 
	t∆ök_t
;

17 
__kî√l_off_t
 
	toff_t
;

18 
__kî√l_pid_t
 
	tpid_t
;

19 
__kî√l_daddr_t
 
	tdaddr_t
;

20 
__kî√l_key_t
 
	tkey_t
;

21 
__kî√l_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

22 
__kî√l_timî_t
 
	ttimî_t
;

23 
__kî√l_˛ockid_t
 
	t˛ockid_t
;

24 
__kî√l_mqd_t
 
	tmqd_t
;

26 
__kî√l_uid_t
 
	tuid_t
;

27 
__kî√l_gid_t
 
	tgid_t
;

29 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

30 
__kî√l_loff_t
 
	tloff_t
;

37 #i‚de‡
_SIZE_T


38 
	#_SIZE_T


	)

39 
__kî√l_size_t
 
	tsize_t
;

42 #i‚de‡
_SSIZE_T


43 
	#_SSIZE_T


	)

44 
__kî√l_ssize_t
 
	tssize_t
;

47 #i‚de‡
_PTRDIFF_T


48 
	#_PTRDIFF_T


	)

49 
__kî√l_±rdiff_t
 
	t±rdiff_t
;

52 #i‚de‡
_TIME_T


53 
	#_TIME_T


	)

54 
__kî√l_time_t
 
	ttime_t
;

57 #i‚de‡
_CLOCK_T


58 
	#_CLOCK_T


	)

59 
__kî√l_˛ock_t
 
	t˛ock_t
;

62 #i‚de‡
_CADDR_T


63 
	#_CADDR_T


	)

64 
__kî√l_ˇddr_t
 
	tˇddr_t
;

68 
	tu_ch¨
;

69 
	tu_sh‹t
;

70 
	tu_öt
;

71 
	tu_l⁄g
;

74 
	tunch¨
;

75 
	tush‹t
;

76 
	tuöt
;

77 
	tul⁄g
;

79 #i‚de‡
__BIT_TYPES_DEFINED__


80 
	#__BIT_TYPES_DEFINED__


	)

82 
__u8
 
	tu_öt8_t
;

83 
__s8
 
	töt8_t
;

84 
__u16
 
	tu_öt16_t
;

85 
__s16
 
	töt16_t
;

86 
__u32
 
	tu_öt32_t
;

87 
__s32
 
	töt32_t
;

91 
__u8
 
	tuöt8_t
;

92 
__u16
 
	tuöt16_t
;

93 
__u32
 
	tuöt32_t
;

95 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

96 
__u64
 
	tuöt64_t
;

97 
__u64
 
	tu_öt64_t
;

98 
__s64
 
	töt64_t
;

102 
	#Æig√d_u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

103 
	#Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

104 
	#Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

112 #ifde‡
CONFIG_LBD


113 
u64
 
	t£˘‹_t
;

115 
	t£˘‹_t
;

121 #ifde‡
CONFIG_LSF


122 
u64
 
	tblk˙t_t
;

124 
	tblk˙t_t
;

131 #i‚de‡
pgoff_t


132 
	#pgoff_t
 

	)

142 #ifde‡
__CHECKER__


143 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

145 
	#__bôwi£__


	)

147 #ifde‡
__CHECK_ENDIAN__


148 
	#__bôwi£
 
__bôwi£__


	)

150 
	#__bôwi£


	)

153 
__u16
 
	t__bôwi£
 
	t__À16
;

154 
__u16
 
	t__bôwi£
 
	t__be16
;

155 
__u32
 
	t__bôwi£
 
	t__À32
;

156 
__u32
 
	t__bôwi£
 
	t__be32
;

157 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

158 
__u64
 
	t__bôwi£
 
	t__À64
;

159 
__u64
 
	t__bôwi£
 
	t__be64
;

161 
__u16
 
	t__bôwi£
 
	t__sum16
;

162 
__u32
 
	t__bôwi£
 
	t__wsum
;

165 
	su°©
 {

166 
__kî√l_daddr_t
 
	mf_t‰ì
;

167 
__kî√l_öo_t
 
	mf_töode
;

168 
	mf_‚ame
[6];

169 
	mf_Âack
[6];

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 132632

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/linux/video_decoder.h

1 #i‚de‡
_LINUX_VIDEO_DECODER_H


2 
	#_LINUX_VIDEO_DECODER_H


	)

4 
	#HAVE_VIDEO_DECODER
 1

	)

6 
	svideo_decodî_ˇ∑bûôy
 {

7 
__u32
 
	mÊags
;

8 
	#VIDEO_DECODER_PAL
 1

	)

9 
	#VIDEO_DECODER_NTSC
 2

	)

10 
	#VIDEO_DECODER_SECAM
 4

	)

11 
	#VIDEO_DECODER_AUTO
 8

	)

12 
	#VIDEO_DECODER_CCIR
 16

	)

13 
	möputs
;

14 
	mouçuts
;

21 
	#DECODER_STATUS_GOOD
 1

	)

22 
	#DECODER_STATUS_COLOR
 2

	)

23 
	#DECODER_STATUS_PAL
 4

	)

24 
	#DECODER_STATUS_NTSC
 8

	)

25 
	#DECODER_STATUS_SECAM
 16

	)

27 
	svideo_decodî_öô
 {

28 
	mÀn
;

29 c⁄° *
	md©a
;

32 
	#DECODER_GET_CAPABILITIES
 
	`_IOR
('d', 1, 
video_decodî_ˇ∑bûôy
)

	)

33 
	#DECODER_GET_STATUS
 
	`_IOR
('d', 2, )

	)

34 
	#DECODER_SET_NORM
 
	`_IOW
('d', 3, )

	)

35 
	#DECODER_SET_INPUT
 
	`_IOW
('d', 4, Ë

	)

36 
	#DECODER_SET_OUTPUT
 
	`_IOW
('d', 5, Ë

	)

37 
	#DECODER_ENABLE_OUTPUT
 
	`_IOW
('d', 6, Ë

	)

38 
	#DECODER_SET_PICTURE
 
	`_IOW
('d', 7, 
video_pi˘uª
)

	)

39 
	#DECODER_SET_GPIO
 
	`_IOW
('d', 8, Ë

	)

40 
	#DECODER_INIT
 
	`_IOW
('d', 9, 
video_decodî_öô
Ë

	)

41 
	#DECODER_SET_VBI_BYPASS
 
	`_IOW
('d', 10, Ë

	)

43 
	#DECODER_DUMP
 
	`_IO
('d', 192Ë

	)

	@/usr/include/linux/videodev.h

12 #i‚de‡
__LINUX_VIDEODEV_H


13 
	#__LINUX_VIDEODEV_H


	)

15 
	~<löux/videodev2.h
>

17 #i‡
deföed
(
CONFIG_VIDEO_V4L1_COMPAT
Ë|| !deföed (
__KERNEL__
)

19 
	svideo_ˇ∑bûôy


21 
	m«me
[32];

22 
	mty≥
;

23 
	mch™√ls
;

24 
	maudios
;

25 
	mmaxwidth
;

26 
	mmaxheight
;

27 
	mmöwidth
;

28 
	mmöheight
;

32 
	svideo_ch™√l


34 
	mch™√l
;

35 
	m«me
[32];

36 
	mtu√rs
;

37 
__u32
 
	mÊags
;

38 
	#VIDEO_VC_TUNER
 1

	)

39 
	#VIDEO_VC_AUDIO
 2

	)

40 
__u16
 
	mty≥
;

41 
	#VIDEO_TYPE_TV
 1

	)

42 
	#VIDEO_TYPE_CAMERA
 2

	)

43 
__u16
 
	mn‹m
;

46 
	svideo_tu√r


48 
	mtu√r
;

49 
	m«me
[32];

50 
	møngñow
, 
	møngehigh
;

51 
__u32
 
	mÊags
;

52 
	#VIDEO_TUNER_PAL
 1

	)

53 
	#VIDEO_TUNER_NTSC
 2

	)

54 
	#VIDEO_TUNER_SECAM
 4

	)

55 
	#VIDEO_TUNER_LOW
 8

	)

56 
	#VIDEO_TUNER_NORM
 16

	)

57 
	#VIDEO_TUNER_STEREO_ON
 128

	)

58 
	#VIDEO_TUNER_RDS_ON
 256

	)

59 
	#VIDEO_TUNER_MBS_ON
 512

	)

60 
__u16
 
	mmode
;

61 
	#VIDEO_MODE_PAL
 0

	)

62 
	#VIDEO_MODE_NTSC
 1

	)

63 
	#VIDEO_MODE_SECAM
 2

	)

64 
	#VIDEO_MODE_AUTO
 3

	)

65 
__u16
 
	msig«l
;

68 
	svideo_pi˘uª


70 
__u16
 
	mbrighäess
;

71 
__u16
 
	mhue
;

72 
__u16
 
	mcﬁour
;

73 
__u16
 
	mc⁄åa°
;

74 
__u16
 
	mwhôíess
;

75 
__u16
 
	mdïth
;

76 
__u16
 
	m∑Àâe
;

77 
	#VIDEO_PALETTE_GREY
 1

	)

78 
	#VIDEO_PALETTE_HI240
 2

	)

79 
	#VIDEO_PALETTE_RGB565
 3

	)

80 
	#VIDEO_PALETTE_RGB24
 4

	)

81 
	#VIDEO_PALETTE_RGB32
 5

	)

82 
	#VIDEO_PALETTE_RGB555
 6

	)

83 
	#VIDEO_PALETTE_YUV422
 7

	)

84 
	#VIDEO_PALETTE_YUYV
 8

	)

85 
	#VIDEO_PALETTE_UYVY
 9

	)

86 
	#VIDEO_PALETTE_YUV420
 10

	)

87 
	#VIDEO_PALETTE_YUV411
 11

	)

88 
	#VIDEO_PALETTE_RAW
 12

	)

89 
	#VIDEO_PALETTE_YUV422P
 13

	)

90 
	#VIDEO_PALETTE_YUV411P
 14

	)

91 
	#VIDEO_PALETTE_YUV420P
 15

	)

92 
	#VIDEO_PALETTE_YUV410P
 16

	)

93 
	#VIDEO_PALETTE_PLANAR
 13

	)

94 
	#VIDEO_PALETTE_COMPONENT
 7

	)

97 
	svideo_audio


99 
	maudio
;

100 
__u16
 
	mvﬁume
;

101 
__u16
 
	mbass
, 
	måebÀ
;

102 
__u32
 
	mÊags
;

103 
	#VIDEO_AUDIO_MUTE
 1

	)

104 
	#VIDEO_AUDIO_MUTABLE
 2

	)

105 
	#VIDEO_AUDIO_VOLUME
 4

	)

106 
	#VIDEO_AUDIO_BASS
 8

	)

107 
	#VIDEO_AUDIO_TREBLE
 16

	)

108 
	#VIDEO_AUDIO_BALANCE
 32

	)

109 
	m«me
[16];

110 
	#VIDEO_SOUND_MONO
 1

	)

111 
	#VIDEO_SOUND_STEREO
 2

	)

112 
	#VIDEO_SOUND_LANG1
 4

	)

113 
	#VIDEO_SOUND_LANG2
 8

	)

114 
__u16
 
	mmode
;

115 
__u16
 
	mbÆ™˚
;

116 
__u16
 
	m°ï
;

119 
	svideo_˛ù


121 
__s32
 
	mx
,
	my
;

122 
__s32
 
	mwidth
, 
	mheight
;

123 
video_˛ù
 *
	m√xt
;

126 
	svideo_wödow


128 
__u32
 
	mx
,
	my
;

129 
__u32
 
	mwidth
,
	mheight
;

130 
__u32
 
	mchromakey
;

131 
__u32
 
	mÊags
;

132 
video_˛ù
 *
	m˛ùs
;

133 
	m˛ùcou¡
;

134 
	#VIDEO_WINDOW_INTERLACE
 1

	)

135 
	#VIDEO_WINDOW_CHROMAKEY
 16

	)

136 
	#VIDEO_CLIP_BITMAP
 -1

	)

138 
	#VIDEO_CLIPMAP_SIZE
 (128 * 625)

	)

141 
	svideo_ˇ±uª


143 
__u32
 
	mx
,
	my
;

144 
__u32
 
	mwidth
, 
	mheight
;

145 
__u16
 
	mdecim©i⁄
;

146 
__u16
 
	mÊags
;

147 
	#VIDEO_CAPTURE_ODD
 0

	)

148 
	#VIDEO_CAPTURE_EVEN
 1

	)

151 
	svideo_buf„r


153 *
	mba£
;

154 
	mheight
,
	mwidth
;

155 
	mdïth
;

156 
	mbyã•îlöe
;

159 
	svideo_mm≠


161 
	m‰ame
;

162 
	mheight
,
	mwidth
;

163 
	mf‹m©
;

166 
	svideo_key


168 
__u8
 
	mkey
[8];

169 
__u32
 
	mÊags
;

172 
	svideo_mbuf


174 
	msize
;

175 
	m‰ames
;

176 
	moff£ts
[
VIDEO_MAX_FRAME
];

179 
	#VIDEO_NO_UNIT
 (-1)

	)

181 
	svideo_unô


183 
	mvideo
;

184 
	mvbi
;

185 
	mødio
;

186 
	maudio
;

187 
	mãÀãxt
;

190 
	svbi_f‹m©
 {

191 
__u32
 
	mßm∂ög_øã
;

192 
__u32
 
	mßm∂es_≥r_löe
;

193 
__u32
 
	mßm∂e_f‹m©
;

194 
__s32
 
	m°¨t
[2];

195 
__u32
 
	mcou¡
[2];

196 
__u32
 
	mÊags
;

197 
	#VBI_UNSYNC
 1

	)

198 
	#VBI_INTERLACED
 2

	)

203 
	svideo_öfo


205 
__u32
 
	m‰ame_cou¡
;

206 
__u32
 
	mh_size
;

207 
__u32
 
	mv_size
;

208 
__u32
 
	msm±e_timecode
;

209 
__u32
 
	mpi˘uª_ty≥
;

210 
__u32
 
	mãmp‹Æ_ª„ªn˚
;

211 
__u8
 
	mu£r_d©a
[256];

216 
	svideo_∂ay_mode


218 
	mmode
;

219 
	mp1
;

220 
	mp2
;

224 
	svideo_code


226 
	mlﬂdwh©
[16];

227 
	md©asize
;

228 
__u8
 *
	md©a
;

231 
	#VIDIOCGCAP
 
	`_IOR
('v',1,
video_ˇ∑bûôy
Ë

	)

232 
	#VIDIOCGCHAN
 
	`_IOWR
('v',2,
video_ch™√l
Ë

	)

233 
	#VIDIOCSCHAN
 
	`_IOW
('v',3,
video_ch™√l
Ë

	)

234 
	#VIDIOCGTUNER
 
	`_IOWR
('v',4,
video_tu√r
Ë

	)

235 
	#VIDIOCSTUNER
 
	`_IOW
('v',5,
video_tu√r
Ë

	)

236 
	#VIDIOCGPICT
 
	`_IOR
('v',6,
video_pi˘uª
Ë

	)

237 
	#VIDIOCSPICT
 
	`_IOW
('v',7,
video_pi˘uª
Ë

	)

238 
	#VIDIOCCAPTURE
 
	`_IOW
('v',8,Ë

	)

239 
	#VIDIOCGWIN
 
	`_IOR
('v',9, 
video_wödow
Ë

	)

240 
	#VIDIOCSWIN
 
	`_IOW
('v',10, 
video_wödow
Ë

	)

241 
	#VIDIOCGFBUF
 
	`_IOR
('v',11, 
video_buf„r
Ë

	)

242 
	#VIDIOCSFBUF
 
	`_IOW
('v',12, 
video_buf„r
Ë

	)

243 
	#VIDIOCKEY
 
	`_IOR
('v',13, 
video_key
Ë

	)

244 
	#VIDIOCGFREQ
 
	`_IOR
('v',14, Ë

	)

245 
	#VIDIOCSFREQ
 
	`_IOW
('v',15, Ë

	)

246 
	#VIDIOCGAUDIO
 
	`_IOR
('v',16, 
video_audio
Ë

	)

247 
	#VIDIOCSAUDIO
 
	`_IOW
('v',17, 
video_audio
Ë

	)

248 
	#VIDIOCSYNC
 
	`_IOW
('v',18, Ë

	)

249 
	#VIDIOCMCAPTURE
 
	`_IOW
('v',19, 
video_mm≠
Ë

	)

250 
	#VIDIOCGMBUF
 
	`_IOR
('v',20, 
video_mbuf
Ë

	)

251 
	#VIDIOCGUNIT
 
	`_IOR
('v',21, 
video_unô
Ë

	)

252 
	#VIDIOCGCAPTURE
 
	`_IOR
('v',22, 
video_ˇ±uª
Ë

	)

253 
	#VIDIOCSCAPTURE
 
	`_IOW
('v',23, 
video_ˇ±uª
Ë

	)

254 
	#VIDIOCSPLAYMODE
 
	`_IOW
('v',24, 
video_∂ay_mode
Ë

	)

255 
	#VIDIOCSWRITEMODE
 
	`_IOW
('v',25, Ë

	)

256 
	#VIDIOCGPLAYINFO
 
	`_IOR
('v',26, 
video_öfo
Ë

	)

257 
	#VIDIOCSMICROCODE
 
	`_IOW
('v',27, 
video_code
Ë

	)

258 
	#VIDIOCGVBIFMT
 
	`_IOR
('v',28, 
vbi_f‹m©
Ë

	)

259 
	#VIDIOCSVBIFMT
 
	`_IOW
('v',29, 
vbi_f‹m©
Ë

	)

262 
	#BASE_VIDIOCPRIVATE
 192

	)

265 
	#VID_WRITE_MPEG_AUD
 0

	)

266 
	#VID_WRITE_MPEG_VID
 1

	)

267 
	#VID_WRITE_OSD
 2

	)

268 
	#VID_WRITE_TTX
 3

	)

269 
	#VID_WRITE_CC
 4

	)

270 
	#VID_WRITE_MJPEG
 5

	)

273 
	#VID_PLAY_VID_OUT_MODE
 0

	)

275 
	#VID_PLAY_GENLOCK
 1

	)

278 
	#VID_PLAY_NORMAL
 2

	)

279 
	#VID_PLAY_PAUSE
 3

	)

280 
	#VID_PLAY_SINGLE_FRAME
 4

	)

281 
	#VID_PLAY_FAST_FORWARD
 5

	)

282 
	#VID_PLAY_SLOW_MOTION
 6

	)

283 
	#VID_PLAY_IMMEDIATE_NORMAL
 7

	)

284 
	#VID_PLAY_SWITCH_CHANNELS
 8

	)

285 
	#VID_PLAY_FREEZE_FRAME
 9

	)

286 
	#VID_PLAY_STILL_MODE
 10

	)

287 
	#VID_PLAY_MASTER_MODE
 11

	)

289 
	#VID_PLAY_MASTER_NONE
 1

	)

290 
	#VID_PLAY_MASTER_VIDEO
 2

	)

291 
	#VID_PLAY_MASTER_AUDIO
 3

	)

292 
	#VID_PLAY_ACTIVE_SCANLINES
 12

	)

294 
	#VID_PLAY_RESET
 13

	)

295 
	#VID_PLAY_END_MARK
 14

	)

	@/usr/include/linux/videodev2.h

56 #i‚de‡
__LINUX_VIDEODEV2_H


57 
	#__LINUX_VIDEODEV2_H


	)

58 
	#__u£r


	)

59 
	~<sys/time.h
>

60 
	~<löux/ty≥s.h
>

66 
	#VIDEO_MAX_FRAME
 32

	)

68 
	#VID_TYPE_CAPTURE
 1

	)

69 
	#VID_TYPE_TUNER
 2

	)

70 
	#VID_TYPE_TELETEXT
 4

	)

71 
	#VID_TYPE_OVERLAY
 8

	)

72 
	#VID_TYPE_CHROMAKEY
 16

	)

73 
	#VID_TYPE_CLIPPING
 32

	)

74 
	#VID_TYPE_FRAMERAM
 64

	)

75 
	#VID_TYPE_SCALES
 128

	)

76 
	#VID_TYPE_MONOCHROME
 256

	)

77 
	#VID_TYPE_SUBCAPTURE
 512

	)

78 
	#VID_TYPE_MPEG_DECODER
 1024

	)

79 
	#VID_TYPE_MPEG_ENCODER
 2048

	)

80 
	#VID_TYPE_MJPEG_DECODER
 4096

	)

81 
	#VID_TYPE_MJPEG_ENCODER
 8192

	)

88 
	#v4l2_fourcc
(
a
,
b
,
c
,
d
)\

89 (((
__u32
)(
a
)<<0)|((__u32)(
b
)<<8)|((__u32)(
c
)<<16)|((__u32)(
d
)<<24))

	)

94 
	ev4l2_fõld
 {

95 
	mV4L2_FIELD_ANY
 = 0,

99 
	mV4L2_FIELD_NONE
 = 1,

100 
	mV4L2_FIELD_TOP
 = 2,

101 
	mV4L2_FIELD_BOTTOM
 = 3,

102 
	mV4L2_FIELD_INTERLACED
 = 4,

103 
	mV4L2_FIELD_SEQ_TB
 = 5,

105 
	mV4L2_FIELD_SEQ_BT
 = 6,

106 
	mV4L2_FIELD_ALTERNATE
 = 7,

108 
	mV4L2_FIELD_INTERLACED_TB
 = 8,

111 
	mV4L2_FIELD_INTERLACED_BT
 = 9,

115 
	#V4L2_FIELD_HAS_TOP
(
fõld
) \

116 ((
fõld
Ë=
V4L2_FIELD_TOP
 ||\

117 (
fõld
Ë=
V4L2_FIELD_INTERLACED
 ||\

118 (
fõld
Ë=
V4L2_FIELD_INTERLACED_TB
 ||\

119 (
fõld
Ë=
V4L2_FIELD_INTERLACED_BT
 ||\

120 (
fõld
Ë=
V4L2_FIELD_SEQ_TB
 ||\

121 (
fõld
Ë=
V4L2_FIELD_SEQ_BT
)

	)

122 
	#V4L2_FIELD_HAS_BOTTOM
(
fõld
) \

123 ((
fõld
Ë=
V4L2_FIELD_BOTTOM
 ||\

124 (
fõld
Ë=
V4L2_FIELD_INTERLACED
 ||\

125 (
fõld
Ë=
V4L2_FIELD_INTERLACED_TB
 ||\

126 (
fõld
Ë=
V4L2_FIELD_INTERLACED_BT
 ||\

127 (
fõld
Ë=
V4L2_FIELD_SEQ_TB
 ||\

128 (
fõld
Ë=
V4L2_FIELD_SEQ_BT
)

	)

129 
	#V4L2_FIELD_HAS_BOTH
(
fõld
) \

130 ((
fõld
Ë=
V4L2_FIELD_INTERLACED
 ||\

131 (
fõld
Ë=
V4L2_FIELD_INTERLACED_TB
 ||\

132 (
fõld
Ë=
V4L2_FIELD_INTERLACED_BT
 ||\

133 (
fõld
Ë=
V4L2_FIELD_SEQ_TB
 ||\

134 (
fõld
Ë=
V4L2_FIELD_SEQ_BT
)

	)

136 
	ev4l2_buf_ty≥
 {

137 
	mV4L2_BUF_TYPE_VIDEO_CAPTURE
 = 1,

138 
	mV4L2_BUF_TYPE_VIDEO_OUTPUT
 = 2,

139 
	mV4L2_BUF_TYPE_VIDEO_OVERLAY
 = 3,

140 
	mV4L2_BUF_TYPE_VBI_CAPTURE
 = 4,

141 
	mV4L2_BUF_TYPE_VBI_OUTPUT
 = 5,

142 
	mV4L2_BUF_TYPE_SLICED_VBI_CAPTURE
 = 6,

143 
	mV4L2_BUF_TYPE_SLICED_VBI_OUTPUT
 = 7,

146 
	mV4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY
 = 8,

148 
	mV4L2_BUF_TYPE_PRIVATE
 = 0x80,

151 
	ev4l2_˘æ_ty≥
 {

152 
	mV4L2_CTRL_TYPE_INTEGER
 = 1,

153 
	mV4L2_CTRL_TYPE_BOOLEAN
 = 2,

154 
	mV4L2_CTRL_TYPE_MENU
 = 3,

155 
	mV4L2_CTRL_TYPE_BUTTON
 = 4,

156 
	mV4L2_CTRL_TYPE_INTEGER64
 = 5,

157 
	mV4L2_CTRL_TYPE_CTRL_CLASS
 = 6,

160 
	ev4l2_tu√r_ty≥
 {

161 
	mV4L2_TUNER_RADIO
 = 1,

162 
	mV4L2_TUNER_ANALOG_TV
 = 2,

163 
	mV4L2_TUNER_DIGITAL_TV
 = 3,

166 
	ev4l2_mem‹y
 {

167 
	mV4L2_MEMORY_MMAP
 = 1,

168 
	mV4L2_MEMORY_USERPTR
 = 2,

169 
	mV4L2_MEMORY_OVERLAY
 = 3,

173 
	ev4l2_cﬁ‹•a˚
 {

175 
	mV4L2_COLORSPACE_SMPTE170M
 = 1,

178 
	mV4L2_COLORSPACE_SMPTE240M
 = 2,

181 
	mV4L2_COLORSPACE_REC709
 = 3,

184 
	mV4L2_COLORSPACE_BT878
 = 4,

187 
	mV4L2_COLORSPACE_470_SYSTEM_M
 = 5,

188 
	mV4L2_COLORSPACE_470_SYSTEM_BG
 = 6,

194 
	mV4L2_COLORSPACE_JPEG
 = 7,

197 
	mV4L2_COLORSPACE_SRGB
 = 8,

200 
	ev4l2_¥i‹ôy
 {

201 
	mV4L2_PRIORITY_UNSET
 = 0,

202 
	mV4L2_PRIORITY_BACKGROUND
 = 1,

203 
	mV4L2_PRIORITY_INTERACTIVE
 = 2,

204 
	mV4L2_PRIORITY_RECORD
 = 3,

205 
	mV4L2_PRIORITY_DEFAULT
 = 
V4L2_PRIORITY_INTERACTIVE
,

208 
	sv4l2_ª˘
 {

209 
__s32
 
	mÀ·
;

210 
__s32
 
	mt›
;

211 
__s32
 
	mwidth
;

212 
__s32
 
	mheight
;

215 
	sv4l2_‰a˘
 {

216 
__u32
 
	mnumî©‹
;

217 
__u32
 
	mdíomö©‹
;

223 
	sv4l2_ˇ∑bûôy


225 
__u8
 
	mdrivî
[16];

226 
__u8
 
	mˇrd
[32];

227 
__u8
 
	mbus_öfo
[32];

228 
__u32
 
	mvîsi⁄
;

229 
__u32
 
	mˇ∑bûôõs
;

230 
__u32
 
	mª£rved
[4];

234 
	#V4L2_CAP_VIDEO_CAPTURE
 0x00000001

	)

235 
	#V4L2_CAP_VIDEO_OUTPUT
 0x00000002

	)

236 
	#V4L2_CAP_VIDEO_OVERLAY
 0x00000004

	)

237 
	#V4L2_CAP_VBI_CAPTURE
 0x00000010

	)

238 
	#V4L2_CAP_VBI_OUTPUT
 0x00000020

	)

239 
	#V4L2_CAP_SLICED_VBI_CAPTURE
 0x00000040

	)

240 
	#V4L2_CAP_SLICED_VBI_OUTPUT
 0x00000080

	)

241 
	#V4L2_CAP_RDS_CAPTURE
 0x00000100

	)

242 
	#V4L2_CAP_VIDEO_OUTPUT_OVERLAY
 0x00000200

	)

244 
	#V4L2_CAP_TUNER
 0x00010000

	)

245 
	#V4L2_CAP_AUDIO
 0x00020000

	)

246 
	#V4L2_CAP_RADIO
 0x00040000

	)

248 
	#V4L2_CAP_READWRITE
 0x01000000

	)

249 
	#V4L2_CAP_ASYNCIO
 0x02000000

	)

250 
	#V4L2_CAP_STREAMING
 0x04000000

	)

255 
	sv4l2_pix_f‹m©


257 
__u32
 
	mwidth
;

258 
__u32
 
	mheight
;

259 
__u32
 
	mpixñf‹m©
;

260 
v4l2_fõld
 
	mfõld
;

261 
__u32
 
	mbyã•îlöe
;

262 
__u32
 
	msizeimage
;

263 
v4l2_cﬁ‹•a˚
 
	mcﬁ‹•a˚
;

264 
__u32
 
	m¥iv
;

268 
	#V4L2_PIX_FMT_RGB332
 
	`v4l2_fourcc
('R','G','B','1'Ë

	)

269 
	#V4L2_PIX_FMT_RGB444
 
	`v4l2_fourcc
('R','4','4','4'Ë

	)

270 
	#V4L2_PIX_FMT_RGB555
 
	`v4l2_fourcc
('R','G','B','O'Ë

	)

271 
	#V4L2_PIX_FMT_RGB565
 
	`v4l2_fourcc
('R','G','B','P'Ë

	)

272 
	#V4L2_PIX_FMT_RGB555X
 
	`v4l2_fourcc
('R','G','B','Q'Ë

	)

273 
	#V4L2_PIX_FMT_RGB565X
 
	`v4l2_fourcc
('R','G','B','R'Ë

	)

274 
	#V4L2_PIX_FMT_BGR24
 
	`v4l2_fourcc
('B','G','R','3'Ë

	)

275 
	#V4L2_PIX_FMT_RGB24
 
	`v4l2_fourcc
('R','G','B','3'Ë

	)

276 
	#V4L2_PIX_FMT_BGR32
 
	`v4l2_fourcc
('B','G','R','4'Ë

	)

277 
	#V4L2_PIX_FMT_RGB32
 
	`v4l2_fourcc
('R','G','B','4'Ë

	)

278 
	#V4L2_PIX_FMT_GREY
 
	`v4l2_fourcc
('G','R','E','Y'Ë

	)

279 
	#V4L2_PIX_FMT_PAL8
 
	`v4l2_fourcc
('P','A','L','8'Ë

	)

280 
	#V4L2_PIX_FMT_YVU410
 
	`v4l2_fourcc
('Y','V','U','9'Ë

	)

281 
	#V4L2_PIX_FMT_YVU420
 
	`v4l2_fourcc
('Y','V','1','2'Ë

	)

282 
	#V4L2_PIX_FMT_YUYV
 
	`v4l2_fourcc
('Y','U','Y','V'Ë

	)

283 
	#V4L2_PIX_FMT_UYVY
 
	`v4l2_fourcc
('U','Y','V','Y'Ë

	)

284 
	#V4L2_PIX_FMT_YUV422P
 
	`v4l2_fourcc
('4','2','2','P'Ë

	)

285 
	#V4L2_PIX_FMT_YUV411P
 
	`v4l2_fourcc
('4','1','1','P'Ë

	)

286 
	#V4L2_PIX_FMT_Y41P
 
	`v4l2_fourcc
('Y','4','1','P'Ë

	)

287 
	#V4L2_PIX_FMT_YUV444
 
	`v4l2_fourcc
('Y','4','4','4'Ë

	)

288 
	#V4L2_PIX_FMT_YUV555
 
	`v4l2_fourcc
('Y','U','V','O'Ë

	)

289 
	#V4L2_PIX_FMT_YUV565
 
	`v4l2_fourcc
('Y','U','V','P'Ë

	)

290 
	#V4L2_PIX_FMT_YUV32
 
	`v4l2_fourcc
('Y','U','V','4'Ë

	)

293 
	#V4L2_PIX_FMT_NV12
 
	`v4l2_fourcc
('N','V','1','2'Ë

	)

294 
	#V4L2_PIX_FMT_NV21
 
	`v4l2_fourcc
('N','V','2','1'Ë

	)

297 
	#V4L2_PIX_FMT_YUV410
 
	`v4l2_fourcc
('Y','U','V','9'Ë

	)

298 
	#V4L2_PIX_FMT_YUV420
 
	`v4l2_fourcc
('Y','U','1','2'Ë

	)

299 
	#V4L2_PIX_FMT_YYUV
 
	`v4l2_fourcc
('Y','Y','U','V'Ë

	)

300 
	#V4L2_PIX_FMT_HI240
 
	`v4l2_fourcc
('H','I','2','4'Ë

	)

301 
	#V4L2_PIX_FMT_HM12
 
	`v4l2_fourcc
('H','M','1','2'Ë

	)

304 
	#V4L2_PIX_FMT_SBGGR8
 
	`v4l2_fourcc
('B','A','8','1'Ë

	)

307 
	#V4L2_PIX_FMT_MJPEG
 
	`v4l2_fourcc
('M','J','P','G'Ë

	)

308 
	#V4L2_PIX_FMT_JPEG
 
	`v4l2_fourcc
('J','P','E','G'Ë

	)

309 
	#V4L2_PIX_FMT_DV
 
	`v4l2_fourcc
('d','v','s','d'Ë

	)

310 
	#V4L2_PIX_FMT_MPEG
 
	`v4l2_fourcc
('M','P','E','G'Ë

	)

313 
	#V4L2_PIX_FMT_WNVA
 
	`v4l2_fourcc
('W','N','V','A'Ë

	)

314 
	#V4L2_PIX_FMT_SN9C10X
 
	`v4l2_fourcc
('S','9','1','0'Ë

	)

315 
	#V4L2_PIX_FMT_PWC1
 
	`v4l2_fourcc
('P','W','C','1'Ë

	)

316 
	#V4L2_PIX_FMT_PWC2
 
	`v4l2_fourcc
('P','W','C','2'Ë

	)

317 
	#V4L2_PIX_FMT_ET61X251
 
	`v4l2_fourcc
('E','6','2','5'Ë

	)

322 
	sv4l2_fmtdesc


324 
__u32
 
	mödex
;

325 
v4l2_buf_ty≥
 
	mty≥
;

326 
__u32
 
	mÊags
;

327 
__u8
 
	mdes¸ùti⁄
[32];

328 
__u32
 
	mpixñf‹m©
;

329 
__u32
 
	mª£rved
[4];

332 
	#V4L2_FMT_FLAG_COMPRESSED
 0x0001

	)

339 
	ev4l2_‰msizëy≥s


341 
	mV4L2_FRMSIZE_TYPE_DISCRETE
 = 1,

342 
	mV4L2_FRMSIZE_TYPE_CONTINUOUS
 = 2,

343 
	mV4L2_FRMSIZE_TYPE_STEPWISE
 = 3,

346 
	sv4l2_‰msize_dis¸ëe


348 
__u32
 
	mwidth
;

349 
__u32
 
	mheight
;

352 
	sv4l2_‰msize_°ïwi£


354 
__u32
 
	mmö_width
;

355 
__u32
 
	mmax_width
;

356 
__u32
 
	m°ï_width
;

357 
__u32
 
	mmö_height
;

358 
__u32
 
	mmax_height
;

359 
__u32
 
	m°ï_height
;

362 
	sv4l2_‰msizìnum


364 
__u32
 
	mödex
;

365 
__u32
 
	mpixñ_f‹m©
;

366 
__u32
 
	mty≥
;

369 
v4l2_‰msize_dis¸ëe
 
	mdis¸ëe
;

370 
v4l2_‰msize_°ïwi£
 
	m°ïwi£
;

373 
__u32
 
	mª£rved
[2];

379 
	ev4l2_‰mivÆty≥s


381 
	mV4L2_FRMIVAL_TYPE_DISCRETE
 = 1,

382 
	mV4L2_FRMIVAL_TYPE_CONTINUOUS
 = 2,

383 
	mV4L2_FRMIVAL_TYPE_STEPWISE
 = 3,

386 
	sv4l2_‰mivÆ_°ïwi£


388 
v4l2_‰a˘
 
	mmö
;

389 
v4l2_‰a˘
 
	mmax
;

390 
v4l2_‰a˘
 
	m°ï
;

393 
	sv4l2_‰mivÆíum


395 
__u32
 
	mödex
;

396 
__u32
 
	mpixñ_f‹m©
;

397 
__u32
 
	mwidth
;

398 
__u32
 
	mheight
;

399 
__u32
 
	mty≥
;

402 
v4l2_‰a˘
 
	mdis¸ëe
;

403 
v4l2_‰mivÆ_°ïwi£
 
	m°ïwi£
;

406 
__u32
 
	mª£rved
[2];

413 
	sv4l2_timecode


415 
__u32
 
	mty≥
;

416 
__u32
 
	mÊags
;

417 
__u8
 
	m‰ames
;

418 
__u8
 
	m£c⁄ds
;

419 
__u8
 
	mmöuãs
;

420 
__u8
 
	mhours
;

421 
__u8
 
	mu£rbôs
[4];

425 
	#V4L2_TC_TYPE_24FPS
 1

	)

426 
	#V4L2_TC_TYPE_25FPS
 2

	)

427 
	#V4L2_TC_TYPE_30FPS
 3

	)

428 
	#V4L2_TC_TYPE_50FPS
 4

	)

429 
	#V4L2_TC_TYPE_60FPS
 5

	)

432 
	#V4L2_TC_FLAG_DROPFRAME
 0x0001

	)

433 
	#V4L2_TC_FLAG_COLORFRAME
 0x0002

	)

434 
	#V4L2_TC_USERBITS_fõld
 0x000C

	)

435 
	#V4L2_TC_USERBITS_USERDEFINED
 0x0000

	)

436 
	#V4L2_TC_USERBITS_8BITCHARS
 0x0008

	)

439 
	sv4l2_j≥gcom¥essi⁄


441 
	mquÆôy
;

443 
	mAPPn
;

445 
	mAPP_Àn
;

446 
	mAPP_d©a
[60];

448 
	mCOM_Àn
;

449 
	mCOM_d©a
[60];

451 
__u32
 
	mj≥g_m¨kîs
;

461 
	#V4L2_JPEG_MARKER_DHT
 (1<<3Ë

	)

462 
	#V4L2_JPEG_MARKER_DQT
 (1<<4Ë

	)

463 
	#V4L2_JPEG_MARKER_DRI
 (1<<5Ë

	)

464 
	#V4L2_JPEG_MARKER_COM
 (1<<6Ë

	)

465 
	#V4L2_JPEG_MARKER_APP
 (1<<7Ë

	)

472 
	sv4l2_ªque°buf„rs


474 
__u32
 
	mcou¡
;

475 
v4l2_buf_ty≥
 
	mty≥
;

476 
v4l2_mem‹y
 
	mmem‹y
;

477 
__u32
 
	mª£rved
[2];

480 
	sv4l2_buf„r


482 
__u32
 
	mödex
;

483 
v4l2_buf_ty≥
 
	mty≥
;

484 
__u32
 
	mbyãsu£d
;

485 
__u32
 
	mÊags
;

486 
v4l2_fõld
 
	mfõld
;

487 
timevÆ
 
	mtime°amp
;

488 
v4l2_timecode
 
	mtimecode
;

489 
__u32
 
	m£quí˚
;

492 
v4l2_mem‹y
 
	mmem‹y
;

494 
__u32
 
	moff£t
;

495 
	mu£Ωå
;

496 } 
	mm
;

497 
__u32
 
	mÀngth
;

498 
__u32
 
	möput
;

499 
__u32
 
	mª£rved
;

503 
	#V4L2_BUF_FLAG_MAPPED
 0x0001

	)

504 
	#V4L2_BUF_FLAG_QUEUED
 0x0002

	)

505 
	#V4L2_BUF_FLAG_DONE
 0x0004

	)

506 
	#V4L2_BUF_FLAG_KEYFRAME
 0x0008

	)

507 
	#V4L2_BUF_FLAG_PFRAME
 0x0010

	)

508 
	#V4L2_BUF_FLAG_BFRAME
 0x0020

	)

509 
	#V4L2_BUF_FLAG_TIMECODE
 0x0100

	)

510 
	#V4L2_BUF_FLAG_INPUT
 0x0200

	)

515 
	sv4l2_‰amebuf„r


517 
__u32
 
	mˇ∑bûôy
;

518 
__u32
 
	mÊags
;

521 * 
	mba£
;

522 
v4l2_pix_f‹m©
 
	mfmt
;

525 
	#V4L2_FBUF_CAP_EXTERNOVERLAY
 0x0001

	)

526 
	#V4L2_FBUF_CAP_CHROMAKEY
 0x0002

	)

527 
	#V4L2_FBUF_CAP_LIST_CLIPPING
 0x0004

	)

528 
	#V4L2_FBUF_CAP_BITMAP_CLIPPING
 0x0008

	)

529 
	#V4L2_FBUF_CAP_LOCAL_ALPHA
 0x0010

	)

530 
	#V4L2_FBUF_CAP_GLOBAL_ALPHA
 0x0020

	)

531 
	#V4L2_FBUF_CAP_LOCAL_INV_ALPHA
 0x0040

	)

533 
	#V4L2_FBUF_FLAG_PRIMARY
 0x0001

	)

534 
	#V4L2_FBUF_FLAG_OVERLAY
 0x0002

	)

535 
	#V4L2_FBUF_FLAG_CHROMAKEY
 0x0004

	)

536 
	#V4L2_FBUF_FLAG_LOCAL_ALPHA
 0x0008

	)

537 
	#V4L2_FBUF_FLAG_GLOBAL_ALPHA
 0x0010

	)

538 
	#V4L2_FBUF_FLAG_LOCAL_INV_ALPHA
 0x0020

	)

540 
	sv4l2_˛ù


542 
v4l2_ª˘
 
	mc
;

543 
v4l2_˛ù
 *
	m√xt
;

546 
	sv4l2_wödow


548 
v4l2_ª˘
 
	mw
;

549 
v4l2_fõld
 
	mfõld
;

550 
__u32
 
	mchromakey
;

551 
v4l2_˛ù
 *
	m˛ùs
;

552 
__u32
 
	m˛ùcou¡
;

553 *
	mbôm≠
;

554 
__u8
 
	mglobÆ_Æpha
;

560 
	sv4l2_ˇ±uª∑rm


562 
__u32
 
	mˇ∑bûôy
;

563 
__u32
 
	mˇ±uªmode
;

564 
v4l2_‰a˘
 
	mtimïî‰ame
;

565 
__u32
 
	mexãndedmode
;

566 
__u32
 
	mªadbuf„rs
;

567 
__u32
 
	mª£rved
[4];

571 
	#V4L2_MODE_HIGHQUALITY
 0x0001

	)

572 
	#V4L2_CAP_TIMEPERFRAME
 0x1000

	)

574 
	sv4l2_ouçuç¨m


576 
__u32
 
	mˇ∑bûôy
;

577 
__u32
 
	mouçutmode
;

578 
v4l2_‰a˘
 
	mtimïî‰ame
;

579 
__u32
 
	mexãndedmode
;

580 
__u32
 
	mwrôebuf„rs
;

581 
__u32
 
	mª£rved
[4];

587 
	sv4l2_¸›ˇp
 {

588 
v4l2_buf_ty≥
 
	mty≥
;

589 
v4l2_ª˘
 
	mbounds
;

590 
v4l2_ª˘
 
	mde‰e˘
;

591 
v4l2_‰a˘
 
	mpixña•e˘
;

594 
	sv4l2_¸›
 {

595 
v4l2_buf_ty≥
 
	mty≥
;

596 
v4l2_ª˘
 
	mc
;

603 
__u64
 
	tv4l2_°d_id
;

606 
	#V4L2_STD_PAL_B
 ((
v4l2_°d_id
)0x00000001)

	)

607 
	#V4L2_STD_PAL_B1
 ((
v4l2_°d_id
)0x00000002)

	)

608 
	#V4L2_STD_PAL_G
 ((
v4l2_°d_id
)0x00000004)

	)

609 
	#V4L2_STD_PAL_H
 ((
v4l2_°d_id
)0x00000008)

	)

610 
	#V4L2_STD_PAL_I
 ((
v4l2_°d_id
)0x00000010)

	)

611 
	#V4L2_STD_PAL_D
 ((
v4l2_°d_id
)0x00000020)

	)

612 
	#V4L2_STD_PAL_D1
 ((
v4l2_°d_id
)0x00000040)

	)

613 
	#V4L2_STD_PAL_K
 ((
v4l2_°d_id
)0x00000080)

	)

615 
	#V4L2_STD_PAL_M
 ((
v4l2_°d_id
)0x00000100)

	)

616 
	#V4L2_STD_PAL_N
 ((
v4l2_°d_id
)0x00000200)

	)

617 
	#V4L2_STD_PAL_Nc
 ((
v4l2_°d_id
)0x00000400)

	)

618 
	#V4L2_STD_PAL_60
 ((
v4l2_°d_id
)0x00000800)

	)

620 
	#V4L2_STD_NTSC_M
 ((
v4l2_°d_id
)0x00001000)

	)

621 
	#V4L2_STD_NTSC_M_JP
 ((
v4l2_°d_id
)0x00002000)

	)

622 
	#V4L2_STD_NTSC_443
 ((
v4l2_°d_id
)0x00004000)

	)

623 
	#V4L2_STD_NTSC_M_KR
 ((
v4l2_°d_id
)0x00008000)

	)

625 
	#V4L2_STD_SECAM_B
 ((
v4l2_°d_id
)0x00010000)

	)

626 
	#V4L2_STD_SECAM_D
 ((
v4l2_°d_id
)0x00020000)

	)

627 
	#V4L2_STD_SECAM_G
 ((
v4l2_°d_id
)0x00040000)

	)

628 
	#V4L2_STD_SECAM_H
 ((
v4l2_°d_id
)0x00080000)

	)

629 
	#V4L2_STD_SECAM_K
 ((
v4l2_°d_id
)0x00100000)

	)

630 
	#V4L2_STD_SECAM_K1
 ((
v4l2_°d_id
)0x00200000)

	)

631 
	#V4L2_STD_SECAM_L
 ((
v4l2_°d_id
)0x00400000)

	)

632 
	#V4L2_STD_SECAM_LC
 ((
v4l2_°d_id
)0x00800000)

	)

635 
	#V4L2_STD_ATSC_8_VSB
 ((
v4l2_°d_id
)0x01000000)

	)

636 
	#V4L2_STD_ATSC_16_VSB
 ((
v4l2_°d_id
)0x02000000)

	)

648 
	#V4L2_STD_MN
 (
V4L2_STD_PAL_M
|
V4L2_STD_PAL_N
|
V4L2_STD_PAL_Nc
|
V4L2_STD_NTSC
)

	)

649 
	#V4L2_STD_B
 (
V4L2_STD_PAL_B
|
V4L2_STD_PAL_B1
|
V4L2_STD_SECAM_B
)

	)

650 
	#V4L2_STD_GH
 (
V4L2_STD_PAL_G
|
V4L2_STD_PAL_H
|
V4L2_STD_SECAM_G
|
V4L2_STD_SECAM_H
)

	)

651 
	#V4L2_STD_DK
 (
V4L2_STD_PAL_DK
|
V4L2_STD_SECAM_DK
)

	)

654 
	#V4L2_STD_PAL_BG
 (
V4L2_STD_PAL_B
 |\

655 
V4L2_STD_PAL_B1
 |\

656 
V4L2_STD_PAL_G
)

	)

657 
	#V4L2_STD_PAL_DK
 (
V4L2_STD_PAL_D
 |\

658 
V4L2_STD_PAL_D1
 |\

659 
V4L2_STD_PAL_K
)

	)

660 
	#V4L2_STD_PAL
 (
V4L2_STD_PAL_BG
 |\

661 
V4L2_STD_PAL_DK
 |\

662 
V4L2_STD_PAL_H
 |\

663 
V4L2_STD_PAL_I
)

	)

664 
	#V4L2_STD_NTSC
 (
V4L2_STD_NTSC_M
 |\

665 
V4L2_STD_NTSC_M_JP
 |\

666 
V4L2_STD_NTSC_M_KR
)

	)

667 
	#V4L2_STD_SECAM_DK
 (
V4L2_STD_SECAM_D
 |\

668 
V4L2_STD_SECAM_K
 |\

669 
V4L2_STD_SECAM_K1
)

	)

670 
	#V4L2_STD_SECAM
 (
V4L2_STD_SECAM_B
 |\

671 
V4L2_STD_SECAM_G
 |\

672 
V4L2_STD_SECAM_H
 |\

673 
V4L2_STD_SECAM_DK
 |\

674 
V4L2_STD_SECAM_L
 |\

675 
V4L2_STD_SECAM_LC
)

	)

677 
	#V4L2_STD_525_60
 (
V4L2_STD_PAL_M
 |\

678 
V4L2_STD_PAL_60
 |\

679 
V4L2_STD_NTSC
 |\

680 
V4L2_STD_NTSC_443
)

	)

681 
	#V4L2_STD_625_50
 (
V4L2_STD_PAL
 |\

682 
V4L2_STD_PAL_N
 |\

683 
V4L2_STD_PAL_Nc
 |\

684 
V4L2_STD_SECAM
)

	)

685 
	#V4L2_STD_ATSC
 (
V4L2_STD_ATSC_8_VSB
 |\

686 
V4L2_STD_ATSC_16_VSB
)

	)

688 
	#V4L2_STD_UNKNOWN
 0

	)

689 
	#V4L2_STD_ALL
 (
V4L2_STD_525_60
 |\

690 
V4L2_STD_625_50
)

	)

692 
	sv4l2_°™d¨d


694 
__u32
 
	mödex
;

695 
v4l2_°d_id
 
	mid
;

696 
__u8
 
	m«me
[24];

697 
v4l2_‰a˘
 
	m‰amïîiod
;

698 
__u32
 
	m‰amñöes
;

699 
__u32
 
	mª£rved
[4];

705 
	sv4l2_öput


707 
__u32
 
	mödex
;

708 
__u8
 
	m«me
[32];

709 
__u32
 
	mty≥
;

710 
__u32
 
	maudio£t
;

711 
__u32
 
	mtu√r
;

712 
v4l2_°d_id
 
	m°d
;

713 
__u32
 
	m°©us
;

714 
__u32
 
	mª£rved
[4];

718 
	#V4L2_INPUT_TYPE_TUNER
 1

	)

719 
	#V4L2_INPUT_TYPE_CAMERA
 2

	)

722 
	#V4L2_IN_ST_NO_POWER
 0x00000001

	)

723 
	#V4L2_IN_ST_NO_SIGNAL
 0x00000002

	)

724 
	#V4L2_IN_ST_NO_COLOR
 0x00000004

	)

727 
	#V4L2_IN_ST_NO_H_LOCK
 0x00000100

	)

728 
	#V4L2_IN_ST_COLOR_KILL
 0x00000200

	)

731 
	#V4L2_IN_ST_NO_SYNC
 0x00010000

	)

732 
	#V4L2_IN_ST_NO_EQU
 0x00020000

	)

733 
	#V4L2_IN_ST_NO_CARRIER
 0x00040000

	)

736 
	#V4L2_IN_ST_MACROVISION
 0x01000000

	)

737 
	#V4L2_IN_ST_NO_ACCESS
 0x02000000

	)

738 
	#V4L2_IN_ST_VTR
 0x04000000

	)

743 
	sv4l2_ouçut


745 
__u32
 
	mödex
;

746 
__u8
 
	m«me
[32];

747 
__u32
 
	mty≥
;

748 
__u32
 
	maudio£t
;

749 
__u32
 
	mmoduœt‹
;

750 
v4l2_°d_id
 
	m°d
;

751 
__u32
 
	mª£rved
[4];

754 
	#V4L2_OUTPUT_TYPE_MODULATOR
 1

	)

755 
	#V4L2_OUTPUT_TYPE_ANALOG
 2

	)

756 
	#V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY
 3

	)

761 
	sv4l2_c⁄åﬁ


763 
__u32
 
	mid
;

764 
__s32
 
	mvÆue
;

767 
	sv4l2_ext_c⁄åﬁ


769 
__u32
 
	mid
;

770 
__u32
 
	mª£rved2
[2];

772 
__s32
 
	mvÆue
;

773 
__s64
 
	mvÆue64
;

774 *
	mª£rved
;

776 } 
__©åibuã__
 ((
∑cked
));

778 
	sv4l2_ext_c⁄åﬁs


780 
__u32
 
	m˘æ_˛ass
;

781 
__u32
 
	mcou¡
;

782 
__u32
 
	mîr‹_idx
;

783 
__u32
 
	mª£rved
[2];

784 
v4l2_ext_c⁄åﬁ
 *
	mc⁄åﬁs
;

788 
	#V4L2_CTRL_CLASS_USER
 0x00980000

	)

789 
	#V4L2_CTRL_CLASS_MPEG
 0x00990000

	)

791 
	#V4L2_CTRL_ID_MASK
 (0x0fffffff)

	)

792 
	#V4L2_CTRL_ID2CLASS
(
id
Ë((idË& 0x0fff0000UL)

	)

793 
	#V4L2_CTRL_DRIVER_PRIV
(
id
Ë(((idË& 0xffffË>0x1000)

	)

796 
	sv4l2_quîy˘æ


798 
__u32
 
	mid
;

799 
v4l2_˘æ_ty≥
 
	mty≥
;

800 
__u8
 
	m«me
[32];

801 
__s32
 
	mmöimum
;

802 
__s32
 
	mmaximum
;

803 
__s32
 
	m°ï
;

804 
__s32
 
	mdeÁu…_vÆue
;

805 
__u32
 
	mÊags
;

806 
__u32
 
	mª£rved
[2];

810 
	sv4l2_quîymíu


812 
__u32
 
	mid
;

813 
__u32
 
	mödex
;

814 
__u8
 
	m«me
[32];

815 
__u32
 
	mª£rved
;

819 
	#V4L2_CTRL_FLAG_DISABLED
 0x0001

	)

820 
	#V4L2_CTRL_FLAG_GRABBED
 0x0002

	)

821 
	#V4L2_CTRL_FLAG_READ_ONLY
 0x0004

	)

822 
	#V4L2_CTRL_FLAG_UPDATE
 0x0008

	)

823 
	#V4L2_CTRL_FLAG_INACTIVE
 0x0010

	)

824 
	#V4L2_CTRL_FLAG_SLIDER
 0x0020

	)

827 
	#V4L2_CTRL_FLAG_NEXT_CTRL
 0x80000000

	)

830 
	#V4L2_CID_BASE
 (
V4L2_CTRL_CLASS_USER
 | 0x900)

	)

831 
	#V4L2_CID_USER_BASE
 
V4L2_CID_BASE


	)

833 
	#V4L2_CID_PRIVATE_BASE
 0x08000000

	)

835 
	#V4L2_CID_USER_CLASS
 (
V4L2_CTRL_CLASS_USER
 | 1)

	)

836 
	#V4L2_CID_BRIGHTNESS
 (
V4L2_CID_BASE
+0)

	)

837 
	#V4L2_CID_CONTRAST
 (
V4L2_CID_BASE
+1)

	)

838 
	#V4L2_CID_SATURATION
 (
V4L2_CID_BASE
+2)

	)

839 
	#V4L2_CID_HUE
 (
V4L2_CID_BASE
+3)

	)

840 
	#V4L2_CID_AUDIO_VOLUME
 (
V4L2_CID_BASE
+5)

	)

841 
	#V4L2_CID_AUDIO_BALANCE
 (
V4L2_CID_BASE
+6)

	)

842 
	#V4L2_CID_AUDIO_BASS
 (
V4L2_CID_BASE
+7)

	)

843 
	#V4L2_CID_AUDIO_TREBLE
 (
V4L2_CID_BASE
+8)

	)

844 
	#V4L2_CID_AUDIO_MUTE
 (
V4L2_CID_BASE
+9)

	)

845 
	#V4L2_CID_AUDIO_LOUDNESS
 (
V4L2_CID_BASE
+10)

	)

846 
	#V4L2_CID_BLACK_LEVEL
 (
V4L2_CID_BASE
+11)

	)

847 
	#V4L2_CID_AUTO_WHITE_BALANCE
 (
V4L2_CID_BASE
+12)

	)

848 
	#V4L2_CID_DO_WHITE_BALANCE
 (
V4L2_CID_BASE
+13)

	)

849 
	#V4L2_CID_RED_BALANCE
 (
V4L2_CID_BASE
+14)

	)

850 
	#V4L2_CID_BLUE_BALANCE
 (
V4L2_CID_BASE
+15)

	)

851 
	#V4L2_CID_GAMMA
 (
V4L2_CID_BASE
+16)

	)

852 
	#V4L2_CID_WHITENESS
 (
V4L2_CID_GAMMA
Ë

	)

853 
	#V4L2_CID_EXPOSURE
 (
V4L2_CID_BASE
+17)

	)

854 
	#V4L2_CID_AUTOGAIN
 (
V4L2_CID_BASE
+18)

	)

855 
	#V4L2_CID_GAIN
 (
V4L2_CID_BASE
+19)

	)

856 
	#V4L2_CID_HFLIP
 (
V4L2_CID_BASE
+20)

	)

857 
	#V4L2_CID_VFLIP
 (
V4L2_CID_BASE
+21)

	)

858 
	#V4L2_CID_HCENTER
 (
V4L2_CID_BASE
+22)

	)

859 
	#V4L2_CID_VCENTER
 (
V4L2_CID_BASE
+23)

	)

860 
	#V4L2_CID_LASTP1
 (
V4L2_CID_BASE
+24Ë

	)

863 
	#V4L2_CID_MPEG_BASE
 (
V4L2_CTRL_CLASS_MPEG
 | 0x900)

	)

864 
	#V4L2_CID_MPEG_CLASS
 (
V4L2_CTRL_CLASS_MPEG
 | 1)

	)

867 
	#V4L2_CID_MPEG_STREAM_TYPE
 (
V4L2_CID_MPEG_BASE
+0)

	)

868 
	ev4l2_m≥g_°ªam_ty≥
 {

869 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_PS
 = 0,

870 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_TS
 = 1,

871 
	mV4L2_MPEG_STREAM_TYPE_MPEG1_SS
 = 2,

872 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_DVD
 = 3,

873 
	mV4L2_MPEG_STREAM_TYPE_MPEG1_VCD
 = 4,

874 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_SVCD
 = 5,

876 
	#V4L2_CID_MPEG_STREAM_PID_PMT
 (
V4L2_CID_MPEG_BASE
+1)

	)

877 
	#V4L2_CID_MPEG_STREAM_PID_AUDIO
 (
V4L2_CID_MPEG_BASE
+2)

	)

878 
	#V4L2_CID_MPEG_STREAM_PID_VIDEO
 (
V4L2_CID_MPEG_BASE
+3)

	)

879 
	#V4L2_CID_MPEG_STREAM_PID_PCR
 (
V4L2_CID_MPEG_BASE
+4)

	)

880 
	#V4L2_CID_MPEG_STREAM_PES_ID_AUDIO
 (
V4L2_CID_MPEG_BASE
+5)

	)

881 
	#V4L2_CID_MPEG_STREAM_PES_ID_VIDEO
 (
V4L2_CID_MPEG_BASE
+6)

	)

882 
	#V4L2_CID_MPEG_STREAM_VBI_FMT
 (
V4L2_CID_MPEG_BASE
+7)

	)

883 
	ev4l2_m≥g_°ªam_vbi_fmt
 {

884 
	mV4L2_MPEG_STREAM_VBI_FMT_NONE
 = 0,

885 
	mV4L2_MPEG_STREAM_VBI_FMT_IVTV
 = 1,

889 
	#V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ
 (
V4L2_CID_MPEG_BASE
+100)

	)

890 
	ev4l2_m≥g_audio_ßm∂ög_‰eq
 {

891 
	mV4L2_MPEG_AUDIO_SAMPLING_FREQ_44100
 = 0,

892 
	mV4L2_MPEG_AUDIO_SAMPLING_FREQ_48000
 = 1,

893 
	mV4L2_MPEG_AUDIO_SAMPLING_FREQ_32000
 = 2,

895 
	#V4L2_CID_MPEG_AUDIO_ENCODING
 (
V4L2_CID_MPEG_BASE
+101)

	)

896 
	ev4l2_m≥g_audio_ícodög
 {

897 
	mV4L2_MPEG_AUDIO_ENCODING_LAYER_1
 = 0,

898 
	mV4L2_MPEG_AUDIO_ENCODING_LAYER_2
 = 1,

899 
	mV4L2_MPEG_AUDIO_ENCODING_LAYER_3
 = 2,

901 
	#V4L2_CID_MPEG_AUDIO_L1_BITRATE
 (
V4L2_CID_MPEG_BASE
+102)

	)

902 
	ev4l2_m≥g_audio_l1_bôøã
 {

903 
	mV4L2_MPEG_AUDIO_L1_BITRATE_32K
 = 0,

904 
	mV4L2_MPEG_AUDIO_L1_BITRATE_64K
 = 1,

905 
	mV4L2_MPEG_AUDIO_L1_BITRATE_96K
 = 2,

906 
	mV4L2_MPEG_AUDIO_L1_BITRATE_128K
 = 3,

907 
	mV4L2_MPEG_AUDIO_L1_BITRATE_160K
 = 4,

908 
	mV4L2_MPEG_AUDIO_L1_BITRATE_192K
 = 5,

909 
	mV4L2_MPEG_AUDIO_L1_BITRATE_224K
 = 6,

910 
	mV4L2_MPEG_AUDIO_L1_BITRATE_256K
 = 7,

911 
	mV4L2_MPEG_AUDIO_L1_BITRATE_288K
 = 8,

912 
	mV4L2_MPEG_AUDIO_L1_BITRATE_320K
 = 9,

913 
	mV4L2_MPEG_AUDIO_L1_BITRATE_352K
 = 10,

914 
	mV4L2_MPEG_AUDIO_L1_BITRATE_384K
 = 11,

915 
	mV4L2_MPEG_AUDIO_L1_BITRATE_416K
 = 12,

916 
	mV4L2_MPEG_AUDIO_L1_BITRATE_448K
 = 13,

918 
	#V4L2_CID_MPEG_AUDIO_L2_BITRATE
 (
V4L2_CID_MPEG_BASE
+103)

	)

919 
	ev4l2_m≥g_audio_l2_bôøã
 {

920 
	mV4L2_MPEG_AUDIO_L2_BITRATE_32K
 = 0,

921 
	mV4L2_MPEG_AUDIO_L2_BITRATE_48K
 = 1,

922 
	mV4L2_MPEG_AUDIO_L2_BITRATE_56K
 = 2,

923 
	mV4L2_MPEG_AUDIO_L2_BITRATE_64K
 = 3,

924 
	mV4L2_MPEG_AUDIO_L2_BITRATE_80K
 = 4,

925 
	mV4L2_MPEG_AUDIO_L2_BITRATE_96K
 = 5,

926 
	mV4L2_MPEG_AUDIO_L2_BITRATE_112K
 = 6,

927 
	mV4L2_MPEG_AUDIO_L2_BITRATE_128K
 = 7,

928 
	mV4L2_MPEG_AUDIO_L2_BITRATE_160K
 = 8,

929 
	mV4L2_MPEG_AUDIO_L2_BITRATE_192K
 = 9,

930 
	mV4L2_MPEG_AUDIO_L2_BITRATE_224K
 = 10,

931 
	mV4L2_MPEG_AUDIO_L2_BITRATE_256K
 = 11,

932 
	mV4L2_MPEG_AUDIO_L2_BITRATE_320K
 = 12,

933 
	mV4L2_MPEG_AUDIO_L2_BITRATE_384K
 = 13,

935 
	#V4L2_CID_MPEG_AUDIO_L3_BITRATE
 (
V4L2_CID_MPEG_BASE
+104)

	)

936 
	ev4l2_m≥g_audio_l3_bôøã
 {

937 
	mV4L2_MPEG_AUDIO_L3_BITRATE_32K
 = 0,

938 
	mV4L2_MPEG_AUDIO_L3_BITRATE_40K
 = 1,

939 
	mV4L2_MPEG_AUDIO_L3_BITRATE_48K
 = 2,

940 
	mV4L2_MPEG_AUDIO_L3_BITRATE_56K
 = 3,

941 
	mV4L2_MPEG_AUDIO_L3_BITRATE_64K
 = 4,

942 
	mV4L2_MPEG_AUDIO_L3_BITRATE_80K
 = 5,

943 
	mV4L2_MPEG_AUDIO_L3_BITRATE_96K
 = 6,

944 
	mV4L2_MPEG_AUDIO_L3_BITRATE_112K
 = 7,

945 
	mV4L2_MPEG_AUDIO_L3_BITRATE_128K
 = 8,

946 
	mV4L2_MPEG_AUDIO_L3_BITRATE_160K
 = 9,

947 
	mV4L2_MPEG_AUDIO_L3_BITRATE_192K
 = 10,

948 
	mV4L2_MPEG_AUDIO_L3_BITRATE_224K
 = 11,

949 
	mV4L2_MPEG_AUDIO_L3_BITRATE_256K
 = 12,

950 
	mV4L2_MPEG_AUDIO_L3_BITRATE_320K
 = 13,

952 
	#V4L2_CID_MPEG_AUDIO_MODE
 (
V4L2_CID_MPEG_BASE
+105)

	)

953 
	ev4l2_m≥g_audio_mode
 {

954 
	mV4L2_MPEG_AUDIO_MODE_STEREO
 = 0,

955 
	mV4L2_MPEG_AUDIO_MODE_JOINT_STEREO
 = 1,

956 
	mV4L2_MPEG_AUDIO_MODE_DUAL
 = 2,

957 
	mV4L2_MPEG_AUDIO_MODE_MONO
 = 3,

959 
	#V4L2_CID_MPEG_AUDIO_MODE_EXTENSION
 (
V4L2_CID_MPEG_BASE
+106)

	)

960 
	ev4l2_m≥g_audio_mode_exãnsi⁄
 {

961 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4
 = 0,

962 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8
 = 1,

963 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12
 = 2,

964 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16
 = 3,

966 
	#V4L2_CID_MPEG_AUDIO_EMPHASIS
 (
V4L2_CID_MPEG_BASE
+107)

	)

967 
	ev4l2_m≥g_audio_emphasis
 {

968 
	mV4L2_MPEG_AUDIO_EMPHASIS_NONE
 = 0,

969 
	mV4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS
 = 1,

970 
	mV4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17
 = 2,

972 
	#V4L2_CID_MPEG_AUDIO_CRC
 (
V4L2_CID_MPEG_BASE
+108)

	)

973 
	ev4l2_m≥g_audio_¸c
 {

974 
	mV4L2_MPEG_AUDIO_CRC_NONE
 = 0,

975 
	mV4L2_MPEG_AUDIO_CRC_CRC16
 = 1,

977 
	#V4L2_CID_MPEG_AUDIO_MUTE
 (
V4L2_CID_MPEG_BASE
+109)

	)

980 
	#V4L2_CID_MPEG_VIDEO_ENCODING
 (
V4L2_CID_MPEG_BASE
+200)

	)

981 
	ev4l2_m≥g_video_ícodög
 {

982 
	mV4L2_MPEG_VIDEO_ENCODING_MPEG_1
 = 0,

983 
	mV4L2_MPEG_VIDEO_ENCODING_MPEG_2
 = 1,

985 
	#V4L2_CID_MPEG_VIDEO_ASPECT
 (
V4L2_CID_MPEG_BASE
+201)

	)

986 
	ev4l2_m≥g_video_a•e˘
 {

987 
	mV4L2_MPEG_VIDEO_ASPECT_1x1
 = 0,

988 
	mV4L2_MPEG_VIDEO_ASPECT_4x3
 = 1,

989 
	mV4L2_MPEG_VIDEO_ASPECT_16x9
 = 2,

990 
	mV4L2_MPEG_VIDEO_ASPECT_221x100
 = 3,

992 
	#V4L2_CID_MPEG_VIDEO_B_FRAMES
 (
V4L2_CID_MPEG_BASE
+202)

	)

993 
	#V4L2_CID_MPEG_VIDEO_GOP_SIZE
 (
V4L2_CID_MPEG_BASE
+203)

	)

994 
	#V4L2_CID_MPEG_VIDEO_GOP_CLOSURE
 (
V4L2_CID_MPEG_BASE
+204)

	)

995 
	#V4L2_CID_MPEG_VIDEO_PULLDOWN
 (
V4L2_CID_MPEG_BASE
+205)

	)

996 
	#V4L2_CID_MPEG_VIDEO_BITRATE_MODE
 (
V4L2_CID_MPEG_BASE
+206)

	)

997 
	ev4l2_m≥g_video_bôøã_mode
 {

998 
	mV4L2_MPEG_VIDEO_BITRATE_MODE_VBR
 = 0,

999 
	mV4L2_MPEG_VIDEO_BITRATE_MODE_CBR
 = 1,

1001 
	#V4L2_CID_MPEG_VIDEO_BITRATE
 (
V4L2_CID_MPEG_BASE
+207)

	)

1002 
	#V4L2_CID_MPEG_VIDEO_BITRATE_PEAK
 (
V4L2_CID_MPEG_BASE
+208)

	)

1003 
	#V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION
 (
V4L2_CID_MPEG_BASE
+209)

	)

1004 
	#V4L2_CID_MPEG_VIDEO_MUTE
 (
V4L2_CID_MPEG_BASE
+210)

	)

1005 
	#V4L2_CID_MPEG_VIDEO_MUTE_YUV
 (
V4L2_CID_MPEG_BASE
+211)

	)

1008 
	#V4L2_CID_MPEG_CX2341X_BASE
 (
V4L2_CTRL_CLASS_MPEG
 | 0x1000)

	)

1009 
	#V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE
 (
V4L2_CID_MPEG_CX2341X_BASE
+0)

	)

1010 
	ev4l2_m≥g_cx2341x_video_•©ül_fûãr_mode
 {

1011 
	mV4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL
 = 0,

1012 
	mV4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO
 = 1,

1014 
	#V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER
 (
V4L2_CID_MPEG_CX2341X_BASE
+1)

	)

1015 
	#V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE
 (
V4L2_CID_MPEG_CX2341X_BASE
+2)

	)

1016 
	ev4l2_m≥g_cx2341x_video_luma_•©ül_fûãr_ty≥
 {

1017 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF
 = 0,

1018 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR
 = 1,

1019 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT
 = 2,

1020 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE
 = 3,

1021 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE
 = 4,

1023 
	#V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE
 (
V4L2_CID_MPEG_CX2341X_BASE
+3)

	)

1024 
	ev4l2_m≥g_cx2341x_video_chroma_•©ül_fûãr_ty≥
 {

1025 
	mV4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF
 = 0,

1026 
	mV4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR
 = 1,

1028 
	#V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE
 (
V4L2_CID_MPEG_CX2341X_BASE
+4)

	)

1029 
	ev4l2_m≥g_cx2341x_video_ãmp‹Æ_fûãr_mode
 {

1030 
	mV4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL
 = 0,

1031 
	mV4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO
 = 1,

1033 
	#V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER
 (
V4L2_CID_MPEG_CX2341X_BASE
+5)

	)

1034 
	#V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE
 (
V4L2_CID_MPEG_CX2341X_BASE
+6)

	)

1035 
	ev4l2_m≥g_cx2341x_video_medün_fûãr_ty≥
 {

1036 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF
 = 0,

1037 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR
 = 1,

1038 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT
 = 2,

1039 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT
 = 3,

1040 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG
 = 4,

1042 
	#V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM
 (
V4L2_CID_MPEG_CX2341X_BASE
+7)

	)

1043 
	#V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP
 (
V4L2_CID_MPEG_CX2341X_BASE
+8)

	)

1044 
	#V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM
 (
V4L2_CID_MPEG_CX2341X_BASE
+9)

	)

1045 
	#V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP
 (
V4L2_CID_MPEG_CX2341X_BASE
+10)

	)

1046 
	#V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS
 (
V4L2_CID_MPEG_CX2341X_BASE
+11)

	)

1051 
	sv4l2_tu√r


1053 
__u32
 
	mödex
;

1054 
__u8
 
	m«me
[32];

1055 
v4l2_tu√r_ty≥
 
	mty≥
;

1056 
__u32
 
	mˇ∑bûôy
;

1057 
__u32
 
	møngñow
;

1058 
__u32
 
	møngehigh
;

1059 
__u32
 
	mrxsubch™s
;

1060 
__u32
 
	maudmode
;

1061 
__s32
 
	msig«l
;

1062 
__s32
 
	mafc
;

1063 
__u32
 
	mª£rved
[4];

1066 
	sv4l2_moduœt‹


1068 
__u32
 
	mödex
;

1069 
__u8
 
	m«me
[32];

1070 
__u32
 
	mˇ∑bûôy
;

1071 
__u32
 
	møngñow
;

1072 
__u32
 
	møngehigh
;

1073 
__u32
 
	mtxsubch™s
;

1074 
__u32
 
	mª£rved
[4];

1078 
	#V4L2_TUNER_CAP_LOW
 0x0001

	)

1079 
	#V4L2_TUNER_CAP_NORM
 0x0002

	)

1080 
	#V4L2_TUNER_CAP_STEREO
 0x0010

	)

1081 
	#V4L2_TUNER_CAP_LANG2
 0x0020

	)

1082 
	#V4L2_TUNER_CAP_SAP
 0x0020

	)

1083 
	#V4L2_TUNER_CAP_LANG1
 0x0040

	)

1086 
	#V4L2_TUNER_SUB_MONO
 0x0001

	)

1087 
	#V4L2_TUNER_SUB_STEREO
 0x0002

	)

1088 
	#V4L2_TUNER_SUB_LANG2
 0x0004

	)

1089 
	#V4L2_TUNER_SUB_SAP
 0x0004

	)

1090 
	#V4L2_TUNER_SUB_LANG1
 0x0008

	)

1093 
	#V4L2_TUNER_MODE_MONO
 0x0000

	)

1094 
	#V4L2_TUNER_MODE_STEREO
 0x0001

	)

1095 
	#V4L2_TUNER_MODE_LANG2
 0x0002

	)

1096 
	#V4L2_TUNER_MODE_SAP
 0x0002

	)

1097 
	#V4L2_TUNER_MODE_LANG1
 0x0003

	)

1098 
	#V4L2_TUNER_MODE_LANG1_LANG2
 0x0004

	)

1100 
	sv4l2_‰equícy


1102 
__u32
 
	mtu√r
;

1103 
v4l2_tu√r_ty≥
 
	mty≥
;

1104 
__u32
 
	m‰equícy
;

1105 
__u32
 
	mª£rved
[8];

1111 
	sv4l2_audio


1113 
__u32
 
	mödex
;

1114 
__u8
 
	m«me
[32];

1115 
__u32
 
	mˇ∑bûôy
;

1116 
__u32
 
	mmode
;

1117 
__u32
 
	mª£rved
[2];

1121 
	#V4L2_AUDCAP_STEREO
 0x00001

	)

1122 
	#V4L2_AUDCAP_AVL
 0x00002

	)

1125 
	#V4L2_AUDMODE_AVL
 0x00001

	)

1127 
	sv4l2_audioout


1129 
__u32
 
	mödex
;

1130 
__u8
 
	m«me
[32];

1131 
__u32
 
	mˇ∑bûôy
;

1132 
__u32
 
	mmode
;

1133 
__u32
 
	mª£rved
[2];

1142 
	#V4L2_ENC_IDX_FRAME_I
 (0)

	)

1143 
	#V4L2_ENC_IDX_FRAME_P
 (1)

	)

1144 
	#V4L2_ENC_IDX_FRAME_B
 (2)

	)

1145 
	#V4L2_ENC_IDX_FRAME_MASK
 (0xf)

	)

1147 
	sv4l2_íc_idx_íåy
 {

1148 
__u64
 
	moff£t
;

1149 
__u64
 
	m±s
;

1150 
__u32
 
	mÀngth
;

1151 
__u32
 
	mÊags
;

1152 
__u32
 
	mª£rved
[2];

1155 
	#V4L2_ENC_IDX_ENTRIES
 (64)

	)

1156 
	sv4l2_íc_idx
 {

1157 
__u32
 
	míåõs
;

1158 
__u32
 
	míåõs_ˇp
;

1159 
__u32
 
	mª£rved
[4];

1160 
v4l2_íc_idx_íåy
 
	míåy
[
V4L2_ENC_IDX_ENTRIES
];

1164 
	#V4L2_ENC_CMD_START
 (0)

	)

1165 
	#V4L2_ENC_CMD_STOP
 (1)

	)

1166 
	#V4L2_ENC_CMD_PAUSE
 (2)

	)

1167 
	#V4L2_ENC_CMD_RESUME
 (3)

	)

1170 
	#V4L2_ENC_CMD_STOP_AT_GOP_END
 (1 << 0)

	)

1172 
	sv4l2_ícodî_cmd
 {

1173 
__u32
 
	mcmd
;

1174 
__u32
 
	mÊags
;

1177 
__u32
 
	md©a
[8];

1178 } 
	møw
;

1192 
	sv4l2_vbi_f‹m©


1194 
__u32
 
	mßm∂ög_øã
;

1195 
__u32
 
	moff£t
;

1196 
__u32
 
	mßm∂es_≥r_löe
;

1197 
__u32
 
	mßm∂e_f‹m©
;

1198 
__s32
 
	m°¨t
[2];

1199 
__u32
 
	mcou¡
[2];

1200 
__u32
 
	mÊags
;

1201 
__u32
 
	mª£rved
[2];

1205 
	#V4L2_VBI_UNSYNC
 (1<< 0)

	)

1206 
	#V4L2_VBI_INTERLACED
 (1<< 1)

	)

1215 
	sv4l2_¶i˚d_vbi_f‹m©


1217 
__u16
 
	m£rvi˚_£t
;

1222 
__u16
 
	m£rvi˚_löes
[2][24];

1223 
__u32
 
	mio_size
;

1224 
__u32
 
	mª£rved
[2];

1229 
	#V4L2_SLICED_TELETEXT_B
 (0x0001)

	)

1231 
	#V4L2_SLICED_VPS
 (0x0400)

	)

1233 
	#V4L2_SLICED_CAPTION_525
 (0x1000)

	)

1235 
	#V4L2_SLICED_WSS_625
 (0x4000)

	)

1237 
	#V4L2_SLICED_VBI_525
 (
V4L2_SLICED_CAPTION_525
)

	)

1238 
	#V4L2_SLICED_VBI_625
 (
V4L2_SLICED_TELETEXT_B
 | 
V4L2_SLICED_VPS
 | 
V4L2_SLICED_WSS_625
)

	)

1240 
	sv4l2_¶i˚d_vbi_ˇp


1242 
__u16
 
	m£rvi˚_£t
;

1247 
__u16
 
	m£rvi˚_löes
[2][24];

1248 
v4l2_buf_ty≥
 
	mty≥
;

1249 
__u32
 
	mª£rved
[3];

1252 
	sv4l2_¶i˚d_vbi_d©a


1254 
__u32
 
	mid
;

1255 
__u32
 
	mfõld
;

1256 
__u32
 
	mlöe
;

1257 
__u32
 
	mª£rved
;

1258 
__u8
 
	md©a
[48];

1267 
	sv4l2_f‹m©


1269 
v4l2_buf_ty≥
 
	mty≥
;

1272 
v4l2_pix_f‹m©
 
	mpix
;

1273 
v4l2_wödow
 
	mwö
;

1274 
v4l2_vbi_f‹m©
 
	mvbi
;

1275 
v4l2_¶i˚d_vbi_f‹m©
 
	m¶i˚d
;

1276 
__u8
 
	møw_d©a
[200];

1277 } 
	mfmt
;

1283 
	sv4l2_°ªam∑rm


1285 
v4l2_buf_ty≥
 
	mty≥
;

1288 
v4l2_ˇ±uª∑rm
 
	mˇ±uª
;

1289 
v4l2_ouçuç¨m
 
	mouçut
;

1290 
__u8
 
	møw_d©a
[200];

1291 } 
	m∑rm
;

1302 
	#V4L2_CHIP_MATCH_HOST
 0

	)

1303 
	#V4L2_CHIP_MATCH_I2C_DRIVER
 1

	)

1304 
	#V4L2_CHIP_MATCH_I2C_ADDR
 2

	)

1306 
	sv4l2_ªgi°î
 {

1307 
__u32
 
	mm©ch_ty≥
;

1308 
__u32
 
	mm©ch_chù
;

1309 
__u64
 
	mªg
;

1310 
__u64
 
	mvÆ
;

1314 
	sv4l2_chù_idít
 {

1315 
__u32
 
	mm©ch_ty≥
;

1316 
__u32
 
	mm©ch_chù
;

1317 
__u32
 
	midít
;

1318 
__u32
 
	mªvisi⁄
;

1325 
	#VIDIOC_QUERYCAP
 
	`_IOR
 ('V', 0, 
v4l2_ˇ∑bûôy
)

	)

1326 
	#VIDIOC_RESERVED
 
	`_IO
 ('V', 1)

	)

1327 
	#VIDIOC_ENUM_FMT
 
	`_IOWR
 ('V', 2, 
v4l2_fmtdesc
)

	)

1328 
	#VIDIOC_G_FMT
 
	`_IOWR
 ('V', 4, 
v4l2_f‹m©
)

	)

1329 
	#VIDIOC_S_FMT
 
	`_IOWR
 ('V', 5, 
v4l2_f‹m©
)

	)

1330 
	#VIDIOC_REQBUFS
 
	`_IOWR
 ('V', 8, 
v4l2_ªque°buf„rs
)

	)

1331 
	#VIDIOC_QUERYBUF
 
	`_IOWR
 ('V', 9, 
v4l2_buf„r
)

	)

1332 
	#VIDIOC_G_FBUF
 
	`_IOR
 ('V', 10, 
v4l2_‰amebuf„r
)

	)

1333 
	#VIDIOC_S_FBUF
 
	`_IOW
 ('V', 11, 
v4l2_‰amebuf„r
)

	)

1334 
	#VIDIOC_OVERLAY
 
	`_IOW
 ('V', 14, )

	)

1335 
	#VIDIOC_QBUF
 
	`_IOWR
 ('V', 15, 
v4l2_buf„r
)

	)

1336 
	#VIDIOC_DQBUF
 
	`_IOWR
 ('V', 17, 
v4l2_buf„r
)

	)

1337 
	#VIDIOC_STREAMON
 
	`_IOW
 ('V', 18, )

	)

1338 
	#VIDIOC_STREAMOFF
 
	`_IOW
 ('V', 19, )

	)

1339 
	#VIDIOC_G_PARM
 
	`_IOWR
 ('V', 21, 
v4l2_°ªam∑rm
)

	)

1340 
	#VIDIOC_S_PARM
 
	`_IOWR
 ('V', 22, 
v4l2_°ªam∑rm
)

	)

1341 
	#VIDIOC_G_STD
 
	`_IOR
 ('V', 23, 
v4l2_°d_id
)

	)

1342 
	#VIDIOC_S_STD
 
	`_IOW
 ('V', 24, 
v4l2_°d_id
)

	)

1343 
	#VIDIOC_ENUMSTD
 
	`_IOWR
 ('V', 25, 
v4l2_°™d¨d
)

	)

1344 
	#VIDIOC_ENUMINPUT
 
	`_IOWR
 ('V', 26, 
v4l2_öput
)

	)

1345 
	#VIDIOC_G_CTRL
 
	`_IOWR
 ('V', 27, 
v4l2_c⁄åﬁ
)

	)

1346 
	#VIDIOC_S_CTRL
 
	`_IOWR
 ('V', 28, 
v4l2_c⁄åﬁ
)

	)

1347 
	#VIDIOC_G_TUNER
 
	`_IOWR
 ('V', 29, 
v4l2_tu√r
)

	)

1348 
	#VIDIOC_S_TUNER
 
	`_IOW
 ('V', 30, 
v4l2_tu√r
)

	)

1349 
	#VIDIOC_G_AUDIO
 
	`_IOR
 ('V', 33, 
v4l2_audio
)

	)

1350 
	#VIDIOC_S_AUDIO
 
	`_IOW
 ('V', 34, 
v4l2_audio
)

	)

1351 
	#VIDIOC_QUERYCTRL
 
	`_IOWR
 ('V', 36, 
v4l2_quîy˘æ
)

	)

1352 
	#VIDIOC_QUERYMENU
 
	`_IOWR
 ('V', 37, 
v4l2_quîymíu
)

	)

1353 
	#VIDIOC_G_INPUT
 
	`_IOR
 ('V', 38, )

	)

1354 
	#VIDIOC_S_INPUT
 
	`_IOWR
 ('V', 39, )

	)

1355 
	#VIDIOC_G_OUTPUT
 
	`_IOR
 ('V', 46, )

	)

1356 
	#VIDIOC_S_OUTPUT
 
	`_IOWR
 ('V', 47, )

	)

1357 
	#VIDIOC_ENUMOUTPUT
 
	`_IOWR
 ('V', 48, 
v4l2_ouçut
)

	)

1358 
	#VIDIOC_G_AUDOUT
 
	`_IOR
 ('V', 49, 
v4l2_audioout
)

	)

1359 
	#VIDIOC_S_AUDOUT
 
	`_IOW
 ('V', 50, 
v4l2_audioout
)

	)

1360 
	#VIDIOC_G_MODULATOR
 
	`_IOWR
 ('V', 54, 
v4l2_moduœt‹
)

	)

1361 
	#VIDIOC_S_MODULATOR
 
	`_IOW
 ('V', 55, 
v4l2_moduœt‹
)

	)

1362 
	#VIDIOC_G_FREQUENCY
 
	`_IOWR
 ('V', 56, 
v4l2_‰equícy
)

	)

1363 
	#VIDIOC_S_FREQUENCY
 
	`_IOW
 ('V', 57, 
v4l2_‰equícy
)

	)

1364 
	#VIDIOC_CROPCAP
 
	`_IOWR
 ('V', 58, 
v4l2_¸›ˇp
)

	)

1365 
	#VIDIOC_G_CROP
 
	`_IOWR
 ('V', 59, 
v4l2_¸›
)

	)

1366 
	#VIDIOC_S_CROP
 
	`_IOW
 ('V', 60, 
v4l2_¸›
)

	)

1367 
	#VIDIOC_G_JPEGCOMP
 
	`_IOR
 ('V', 61, 
v4l2_j≥gcom¥essi⁄
)

	)

1368 
	#VIDIOC_S_JPEGCOMP
 
	`_IOW
 ('V', 62, 
v4l2_j≥gcom¥essi⁄
)

	)

1369 
	#VIDIOC_QUERYSTD
 
	`_IOR
 ('V', 63, 
v4l2_°d_id
)

	)

1370 
	#VIDIOC_TRY_FMT
 
	`_IOWR
 ('V', 64, 
v4l2_f‹m©
)

	)

1371 
	#VIDIOC_ENUMAUDIO
 
	`_IOWR
 ('V', 65, 
v4l2_audio
)

	)

1372 
	#VIDIOC_ENUMAUDOUT
 
	`_IOWR
 ('V', 66, 
v4l2_audioout
)

	)

1373 
	#VIDIOC_G_PRIORITY
 
	`_IOR
 ('V', 67, 
v4l2_¥i‹ôy
)

	)

1374 
	#VIDIOC_S_PRIORITY
 
	`_IOW
 ('V', 68, 
v4l2_¥i‹ôy
)

	)

1375 
	#VIDIOC_G_SLICED_VBI_CAP
 
	`_IOWR
 ('V', 69, 
v4l2_¶i˚d_vbi_ˇp
)

	)

1376 
	#VIDIOC_LOG_STATUS
 
	`_IO
 ('V', 70)

	)

1377 
	#VIDIOC_G_EXT_CTRLS
 
	`_IOWR
 ('V', 71, 
v4l2_ext_c⁄åﬁs
)

	)

1378 
	#VIDIOC_S_EXT_CTRLS
 
	`_IOWR
 ('V', 72, 
v4l2_ext_c⁄åﬁs
)

	)

1379 
	#VIDIOC_TRY_EXT_CTRLS
 
	`_IOWR
 ('V', 73, 
v4l2_ext_c⁄åﬁs
)

	)

1381 
	#VIDIOC_ENUM_FRAMESIZES
 
	`_IOWR
 ('V', 74, 
v4l2_‰msizìnum
)

	)

1382 
	#VIDIOC_ENUM_FRAMEINTERVALS
 
	`_IOWR
 ('V', 75, 
v4l2_‰mivÆíum
)

	)

1383 
	#VIDIOC_G_ENC_INDEX
 
	`_IOR
 ('V', 76, 
v4l2_íc_idx
)

	)

1384 
	#VIDIOC_ENCODER_CMD
 
	`_IOWR
 ('V', 77, 
v4l2_ícodî_cmd
)

	)

1385 
	#VIDIOC_TRY_ENCODER_CMD
 
	`_IOWR
 ('V', 78, 
v4l2_ícodî_cmd
)

	)

1388 
	#VIDIOC_DBG_S_REGISTER
 
	`_IOW
 ('V', 79, 
v4l2_ªgi°î
)

	)

1389 
	#VIDIOC_DBG_G_REGISTER
 
	`_IOWR
 ('V', 80, 
v4l2_ªgi°î
)

	)

1391 
	#VIDIOC_G_CHIP_IDENT
 
	`_IOWR
 ('V', 81, 
v4l2_chù_idít
)

	)

1394 #ifde‡
__OLD_VIDIOC_


1396 
	#VIDIOC_OVERLAY_OLD
 
	`_IOWR
 ('V', 14, )

	)

1397 
	#VIDIOC_S_PARM_OLD
 
	`_IOW
 ('V', 22, 
v4l2_°ªam∑rm
)

	)

1398 
	#VIDIOC_S_CTRL_OLD
 
	`_IOW
 ('V', 28, 
v4l2_c⁄åﬁ
)

	)

1399 
	#VIDIOC_G_AUDIO_OLD
 
	`_IOWR
 ('V', 33, 
v4l2_audio
)

	)

1400 
	#VIDIOC_G_AUDOUT_OLD
 
	`_IOWR
 ('V', 49, 
v4l2_audioout
)

	)

1401 
	#VIDIOC_CROPCAP_OLD
 
	`_IOR
 ('V', 58, 
v4l2_¸›ˇp
)

	)

1404 
	#BASE_VIDIOC_PRIVATE
 192

	)

	@/usr/include/linux/wait.h

1 #i‚de‡
_LINUX_WAIT_H


2 
	#_LINUX_WAIT_H


	)

4 
	#WNOHANG
 0x00000001

	)

5 
	#WUNTRACED
 0x00000002

	)

6 
	#WSTOPPED
 
WUNTRACED


	)

7 
	#WEXITED
 0x00000004

	)

8 
	#WCONTINUED
 0x00000008

	)

9 
	#WNOWAIT
 0x01000000

	)

11 
	#__WNOTHREAD
 0x20000000

	)

12 
	#__WALL
 0x40000000

	)

13 
	#__WCLONE
 0x80000000

	)

16 
	#P_ALL
 0

	)

17 
	#P_PID
 1

	)

18 
	#P_PGID
 2

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/poll.h

1 
	~<asm-gíîic/pﬁl.h
>

	@/usr/include/asm/siginfo.h

1 #i‚de‡
_ASM_X86_SIGINFO_H


2 
	#_ASM_X86_SIGINFO_H


	)

4 #ifde‡
__x86_64__


5 
	#__ARCH_SI_PREAMBLE_SIZE
 (4 * ())

	)

8 
	~<asm-gíîic/sigöfo.h
>

	@/usr/include/asm/signal.h

1 #i‚de‡
_ASM_X86_SIGNAL_H


2 
	#_ASM_X86_SIGNAL_H


	)

4 #i‚de‡
__ASSEMBLY__


5 
	~<löux/ty≥s.h
>

6 
	~<löux/time.h
>

9 
	gsigöfo
;

13 
	#NSIG
 32

	)

14 
	tsig£t_t
;

18 
	#SIGHUP
 1

	)

19 
	#SIGINT
 2

	)

20 
	#SIGQUIT
 3

	)

21 
	#SIGILL
 4

	)

22 
	#SIGTRAP
 5

	)

23 
	#SIGABRT
 6

	)

24 
	#SIGIOT
 6

	)

25 
	#SIGBUS
 7

	)

26 
	#SIGFPE
 8

	)

27 
	#SIGKILL
 9

	)

28 
	#SIGUSR1
 10

	)

29 
	#SIGSEGV
 11

	)

30 
	#SIGUSR2
 12

	)

31 
	#SIGPIPE
 13

	)

32 
	#SIGALRM
 14

	)

33 
	#SIGTERM
 15

	)

34 
	#SIGSTKFLT
 16

	)

35 
	#SIGCHLD
 17

	)

36 
	#SIGCONT
 18

	)

37 
	#SIGSTOP
 19

	)

38 
	#SIGTSTP
 20

	)

39 
	#SIGTTIN
 21

	)

40 
	#SIGTTOU
 22

	)

41 
	#SIGURG
 23

	)

42 
	#SIGXCPU
 24

	)

43 
	#SIGXFSZ
 25

	)

44 
	#SIGVTALRM
 26

	)

45 
	#SIGPROF
 27

	)

46 
	#SIGWINCH
 28

	)

47 
	#SIGIO
 29

	)

48 
	#SIGPOLL
 
SIGIO


	)

52 
	#SIGPWR
 30

	)

53 
	#SIGSYS
 31

	)

54 
	#SIGUNUSED
 31

	)

57 
	#SIGRTMIN
 32

	)

58 
	#SIGRTMAX
 
_NSIG


	)

73 
	#SA_NOCLDSTOP
 0x00000001u

	)

74 
	#SA_NOCLDWAIT
 0x00000002u

	)

75 
	#SA_SIGINFO
 0x00000004u

	)

76 
	#SA_ONSTACK
 0x08000000u

	)

77 
	#SA_RESTART
 0x10000000u

	)

78 
	#SA_NODEFER
 0x40000000u

	)

79 
	#SA_RESETHAND
 0x80000000u

	)

81 
	#SA_NOMASK
 
SA_NODEFER


	)

82 
	#SA_ONESHOT
 
SA_RESETHAND


	)

84 
	#SA_RESTORER
 0x04000000

	)

89 
	#SS_ONSTACK
 1

	)

90 
	#SS_DISABLE
 2

	)

92 
	#MINSIGSTKSZ
 2048

	)

93 
	#SIGSTKSZ
 8192

	)

95 
	~<asm-gíîic/sig«l.h
>

97 #i‚de‡
__ASSEMBLY__


99 #ifde‡
__i386__


102 
	ssiga˘i⁄
 {

104 
__sigh™dÀr_t
 
	m_ß_h™dÀr
;

105 (*
	m_ß_siga˘i⁄
)(, 
	msigöfo
 *, *);

106 } 
	m_u
;

107 
sig£t_t
 
	mß_mask
;

108 
	mß_Êags
;

109 (*
	mß_ª°‹î
)();

112 
	#ß_h™dÀr
 
_u
.
_ß_h™dÀr


	)

113 
	#ß_siga˘i⁄
 
_u
.
_ß_siga˘i⁄


	)

117 
	ssiga˘i⁄
 {

118 
__sigh™dÀr_t
 
	mß_h™dÀr
;

119 
	mß_Êags
;

120 
__sigª°‹e_t
 
	mß_ª°‹î
;

121 
sig£t_t
 
	mß_mask
;

124 
	sk_siga˘i⁄
 {

125 
siga˘i⁄
 
	mß
;

130 
	ssigÆt°ack
 {

131 *
	mss_•
;

132 
	mss_Êags
;

133 
size_t
 
	mss_size
;

134 } 
	t°ack_t
;

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_ATFILE


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

	@/usr/include/asm-generic/poll.h

1 #i‚de‡
__ASM_GENERIC_POLL_H


2 
	#__ASM_GENERIC_POLL_H


	)

5 
	#POLLIN
 0x0001

	)

6 
	#POLLPRI
 0x0002

	)

7 
	#POLLOUT
 0x0004

	)

8 
	#POLLERR
 0x0008

	)

9 
	#POLLHUP
 0x0010

	)

10 
	#POLLNVAL
 0x0020

	)

13 
	#POLLRDNORM
 0x0040

	)

14 
	#POLLRDBAND
 0x0080

	)

15 #i‚de‡
POLLWRNORM


16 
	#POLLWRNORM
 0x0100

	)

18 #i‚de‡
POLLWRBAND


19 
	#POLLWRBAND
 0x0200

	)

21 #i‚de‡
POLLMSG


22 
	#POLLMSG
 0x0400

	)

24 #i‚de‡
POLLREMOVE


25 
	#POLLREMOVE
 0x1000

	)

27 #i‚de‡
POLLRDHUP


28 
	#POLLRDHUP
 0x2000

	)

31 
	spﬁlfd
 {

32 
	mfd
;

33 
	mevíts
;

34 
	mªvíts
;

	@/usr/include/asm-generic/siginfo.h

1 #i‚de‡
_ASM_GENERIC_SIGINFO_H


2 
	#_ASM_GENERIC_SIGINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	usigvÆ
 {

7 
	msivÆ_öt
;

8 *
	msivÆ_±r
;

9 } 
	tsigvÆ_t
;

15 #i‚de‡
__ARCH_SI_PREAMBLE_SIZE


16 
	#__ARCH_SI_PREAMBLE_SIZE
 (3 * ())

	)

19 
	#SI_MAX_SIZE
 128

	)

20 #i‚de‡
SI_PAD_SIZE


21 
	#SI_PAD_SIZE
 ((
SI_MAX_SIZE
 - 
__ARCH_SI_PREAMBLE_SIZE
Ë/ ())

	)

24 #i‚de‡
__ARCH_SI_UID_T


25 
	#__ARCH_SI_UID_T
 
uid_t


	)

33 #i‚de‡
__ARCH_SI_BAND_T


34 
	#__ARCH_SI_BAND_T
 

	)

37 #i‚de‡
HAVE_ARCH_SIGINFO_T


39 
	ssigöfo
 {

40 
	msi_signo
;

41 
	msi_î∫o
;

42 
	msi_code
;

45 
	m_∑d
[
SI_PAD_SIZE
];

49 
pid_t
 
	m_pid
;

50 
__ARCH_SI_UID_T
 
	m_uid
;

51 } 
	m_kûl
;

55 
timî_t
 
	m_tid
;

56 
	m_ovîrun
;

57 
	m_∑d
[–
__ARCH_SI_UID_T
) - ()];

58 
sigvÆ_t
 
	m_sigvÆ
;

59 
	m_sys_¥iv©e
;

60 } 
	m_timî
;

64 
pid_t
 
	m_pid
;

65 
__ARCH_SI_UID_T
 
	m_uid
;

66 
sigvÆ_t
 
	m_sigvÆ
;

67 } 
	m_π
;

71 
pid_t
 
	m_pid
;

72 
__ARCH_SI_UID_T
 
	m_uid
;

73 
	m_°©us
;

74 
˛ock_t
 
	m_utime
;

75 
˛ock_t
 
	m_°ime
;

76 } 
	m_sigchld
;

80 *
	m_addr
;

81 #ifde‡
__ARCH_SI_TRAPNO


82 
	m_å≠no
;

84 } 
	m_sigÁu…
;

88 
__ARCH_SI_BAND_T
 
	m_b™d
;

89 
	m_fd
;

90 } 
	m_sigpﬁl
;

91 } 
	m_sifõlds
;

92 } 
	tsigöfo_t
;

99 
	#si_pid
 
_sifõlds
.
_kûl
.
_pid


	)

100 
	#si_uid
 
_sifõlds
.
_kûl
.
_uid


	)

101 
	#si_tid
 
_sifõlds
.
_timî
.
_tid


	)

102 
	#si_ovîrun
 
_sifõlds
.
_timî
.
_ovîrun


	)

103 
	#si_sys_¥iv©e
 
_sifõlds
.
_timî
.
_sys_¥iv©e


	)

104 
	#si_°©us
 
_sifõlds
.
_sigchld
.
_°©us


	)

105 
	#si_utime
 
_sifõlds
.
_sigchld
.
_utime


	)

106 
	#si_°ime
 
_sifõlds
.
_sigchld
.
_°ime


	)

107 
	#si_vÆue
 
_sifõlds
.
_π
.
_sigvÆ


	)

108 
	#si_öt
 
_sifõlds
.
_π
.
_sigvÆ
.
sivÆ_öt


	)

109 
	#si_±r
 
_sifõlds
.
_π
.
_sigvÆ
.
sivÆ_±r


	)

110 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
_addr


	)

111 #ifde‡
__ARCH_SI_TRAPNO


112 
	#si_å≠no
 
_sifõlds
.
_sigÁu…
.
_å≠no


	)

114 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
_b™d


	)

115 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
_fd


	)

117 
	#__SI_KILL
 0

	)

118 
	#__SI_TIMER
 0

	)

119 
	#__SI_POLL
 0

	)

120 
	#__SI_FAULT
 0

	)

121 
	#__SI_CHLD
 0

	)

122 
	#__SI_RT
 0

	)

123 
	#__SI_MESGQ
 0

	)

124 
	#__SI_CODE
(
T
,
N
Ë(N)

	)

130 
	#SI_USER
 0

	)

131 
	#SI_KERNEL
 0x80

	)

132 
	#SI_QUEUE
 -1

	)

133 
	#SI_TIMER
 
	`__SI_CODE
(
__SI_TIMER
,-2Ë

	)

134 
	#SI_MESGQ
 
	`__SI_CODE
(
__SI_MESGQ
,-3Ë

	)

135 
	#SI_ASYNCIO
 -4

	)

136 
	#SI_SIGIO
 -5

	)

137 
	#SI_TKILL
 -6

	)

138 
	#SI_DETHREAD
 -7

	)

140 
	#SI_FROMUSER
(
sùå
Ë((sùå)->
si_code
 <0)

	)

141 
	#SI_FROMKERNEL
(
sùå
Ë((sùå)->
si_code
 > 0)

	)

146 
	#ILL_ILLOPC
 (
__SI_FAULT
|1Ë

	)

147 
	#ILL_ILLOPN
 (
__SI_FAULT
|2Ë

	)

148 
	#ILL_ILLADR
 (
__SI_FAULT
|3Ë

	)

149 
	#ILL_ILLTRP
 (
__SI_FAULT
|4Ë

	)

150 
	#ILL_PRVOPC
 (
__SI_FAULT
|5Ë

	)

151 
	#ILL_PRVREG
 (
__SI_FAULT
|6Ë

	)

152 
	#ILL_COPROC
 (
__SI_FAULT
|7Ë

	)

153 
	#ILL_BADSTK
 (
__SI_FAULT
|8Ë

	)

154 
	#NSIGILL
 8

	)

159 
	#FPE_INTDIV
 (
__SI_FAULT
|1Ë

	)

160 
	#FPE_INTOVF
 (
__SI_FAULT
|2Ë

	)

161 
	#FPE_FLTDIV
 (
__SI_FAULT
|3Ë

	)

162 
	#FPE_FLTOVF
 (
__SI_FAULT
|4Ë

	)

163 
	#FPE_FLTUND
 (
__SI_FAULT
|5Ë

	)

164 
	#FPE_FLTRES
 (
__SI_FAULT
|6Ë

	)

165 
	#FPE_FLTINV
 (
__SI_FAULT
|7Ë

	)

166 
	#FPE_FLTSUB
 (
__SI_FAULT
|8Ë

	)

167 
	#NSIGFPE
 8

	)

172 
	#SEGV_MAPERR
 (
__SI_FAULT
|1Ë

	)

173 
	#SEGV_ACCERR
 (
__SI_FAULT
|2Ë

	)

174 
	#NSIGSEGV
 2

	)

179 
	#BUS_ADRALN
 (
__SI_FAULT
|1Ë

	)

180 
	#BUS_ADRERR
 (
__SI_FAULT
|2Ë

	)

181 
	#BUS_OBJERR
 (
__SI_FAULT
|3Ë

	)

182 
	#NSIGBUS
 3

	)

187 
	#TRAP_BRKPT
 (
__SI_FAULT
|1Ë

	)

188 
	#TRAP_TRACE
 (
__SI_FAULT
|2Ë

	)

189 
	#NSIGTRAP
 2

	)

194 
	#CLD_EXITED
 (
__SI_CHLD
|1Ë

	)

195 
	#CLD_KILLED
 (
__SI_CHLD
|2Ë

	)

196 
	#CLD_DUMPED
 (
__SI_CHLD
|3Ë

	)

197 
	#CLD_TRAPPED
 (
__SI_CHLD
|4Ë

	)

198 
	#CLD_STOPPED
 (
__SI_CHLD
|5Ë

	)

199 
	#CLD_CONTINUED
 (
__SI_CHLD
|6Ë

	)

200 
	#NSIGCHLD
 6

	)

205 
	#POLL_IN
 (
__SI_POLL
|1Ë

	)

206 
	#POLL_OUT
 (
__SI_POLL
|2Ë

	)

207 
	#POLL_MSG
 (
__SI_POLL
|3Ë

	)

208 
	#POLL_ERR
 (
__SI_POLL
|4Ë

	)

209 
	#POLL_PRI
 (
__SI_POLL
|5Ë

	)

210 
	#POLL_HUP
 (
__SI_POLL
|6Ë

	)

211 
	#NSIGPOLL
 6

	)

221 
	#SIGEV_SIGNAL
 0

	)

222 
	#SIGEV_NONE
 1

	)

223 
	#SIGEV_THREAD
 2

	)

224 
	#SIGEV_THREAD_ID
 4

	)

230 #i‚de‡
__ARCH_SIGEV_PREAMBLE_SIZE


231 
	#__ARCH_SIGEV_PREAMBLE_SIZE
 ((Ë* 2 + (
sigvÆ_t
))

	)

234 
	#SIGEV_MAX_SIZE
 64

	)

235 
	#SIGEV_PAD_SIZE
 ((
SIGEV_MAX_SIZE
 - 
__ARCH_SIGEV_PREAMBLE_SIZE
) \

236 / ())

	)

238 
	ssigevít
 {

239 
sigvÆ_t
 
	msigev_vÆue
;

240 
	msigev_signo
;

241 
	msigev_nŸify
;

243 
	m_∑d
[
SIGEV_PAD_SIZE
];

244 
	m_tid
;

247 (*
	m_fun˘i⁄
)(
	msigvÆ_t
);

248 *
	m_©åibuã
;

249 } 
	m_sigev_thªad
;

250 } 
	m_sigev_un
;

251 } 
	tsigevít_t
;

253 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

254 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

255 
	#sigev_nŸify_thªad_id
 
_sigev_un
.
_tid


	)

	@/usr/include/asm-generic/signal.h

1 #i‚de‡
__ASM_GENERIC_SIGNAL_H


2 
	#__ASM_GENERIC_SIGNAL_H


	)

5 #i‚de‡
SIG_BLOCK


6 
	#SIG_BLOCK
 0

	)

8 #i‚de‡
SIG_UNBLOCK


9 
	#SIG_UNBLOCK
 1

	)

11 #i‚de‡
SIG_SETMASK


12 
	#SIG_SETMASK
 2

	)

15 #i‚de‡
__ASSEMBLY__


16 
	t__sig«l‚_t
();

17 
__sig«l‚_t
 *
	t__sigh™dÀr_t
;

19 
	t__ª°‹e‚_t
();

20 
__ª°‹e‚_t
 *
	t__sigª°‹e_t
;

22 
	#SIG_DFL
 ( (
__sigh™dÀr_t
)0Ë

	)

23 
	#SIG_IGN
 ( (
__sigh™dÀr_t
)1Ë

	)

24 
	#SIG_ERR
 ( (
__sigh™dÀr_t
)-1Ë

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

93 #unde‡
__USE_ISOC99


94 #unde‡
__USE_ISOC95


95 #unde‡
__USE_POSIX


96 #unde‡
__USE_POSIX2


97 #unde‡
__USE_POSIX199309


98 #unde‡
__USE_POSIX199506


99 #unde‡
__USE_XOPEN


100 #unde‡
__USE_XOPEN_EXTENDED


101 #unde‡
__USE_UNIX98


102 #unde‡
__USE_XOPEN2K


103 #unde‡
__USE_LARGEFILE


104 #unde‡
__USE_LARGEFILE64


105 #unde‡
__USE_FILE_OFFSET64


106 #unde‡
__USE_BSD


107 #unde‡
__USE_SVID


108 #unde‡
__USE_MISC


109 #unde‡
__USE_ATFILE


110 #unde‡
__USE_GNU


111 #unde‡
__USE_REENTRANT


112 #unde‡
__USE_FORTIFY_LEVEL


113 #unde‡
__FAVOR_BSD


114 #unde‡
__KERNEL_STRICT_NAMES


118 #i‚de‡
_LOOSE_KERNEL_NAMES


119 
	#__KERNEL_STRICT_NAMES


	)

123 
	#__USE_ANSI
 1

	)

132 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


133 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

134 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

136 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

141 #i‡
deföed
 
_BSD_SOURCE
 && \

142 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

143 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

144 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

145 
	#__FAVOR_BSD
 1

	)

149 #ifde‡
_GNU_SOURCE


150 #unde‡
_ISOC99_SOURCE


151 
	#_ISOC99_SOURCE
 1

	)

152 #unde‡
_POSIX_SOURCE


153 
	#_POSIX_SOURCE
 1

	)

154 #unde‡
_POSIX_C_SOURCE


155 
	#_POSIX_C_SOURCE
 200112L

	)

156 #unde‡
_XOPEN_SOURCE


157 
	#_XOPEN_SOURCE
 600

	)

158 #unde‡
_XOPEN_SOURCE_EXTENDED


159 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

160 #unde‡
_LARGEFILE64_SOURCE


161 
	#_LARGEFILE64_SOURCE
 1

	)

162 #unde‡
_BSD_SOURCE


163 
	#_BSD_SOURCE
 1

	)

164 #unde‡
_SVID_SOURCE


165 
	#_SVID_SOURCE
 1

	)

166 #unde‡
_ATFILE_SOURCE


167 
	#_ATFILE_SOURCE
 1

	)

172 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

173 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

174 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

175 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

176 
	#_BSD_SOURCE
 1

	)

177 
	#_SVID_SOURCE
 1

	)

184 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

185 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

186 
	#__USE_ISOC99
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

192 
	#__USE_ISOC95
 1

	)

197 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

198 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

199 
	#_POSIX_SOURCE
 1

	)

200 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

201 
	#_POSIX_C_SOURCE
 2

	)

202 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

203 
	#_POSIX_C_SOURCE
 199506L

	)

205 
	#_POSIX_C_SOURCE
 200112L

	)

209 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


210 
	#__USE_POSIX
 1

	)

213 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


214 
	#__USE_POSIX2
 1

	)

217 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

218 
	#__USE_POSIX199309
 1

	)

221 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

222 
	#__USE_POSIX199506
 1

	)

225 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

226 
	#__USE_XOPEN2K
 1

	)

229 #ifdef 
_XOPEN_SOURCE


230 
	#__USE_XOPEN
 1

	)

231 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

232 
	#__USE_XOPEN_EXTENDED
 1

	)

233 
	#__USE_UNIX98
 1

	)

234 #unde‡
_LARGEFILE_SOURCE


235 
	#_LARGEFILE_SOURCE
 1

	)

236 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #ifde‡
_XOPEN_SOURCE_EXTENDED


243 
	#__USE_XOPEN_EXTENDED
 1

	)

248 #ifde‡
_LARGEFILE_SOURCE


249 
	#__USE_LARGEFILE
 1

	)

252 #ifde‡
_LARGEFILE64_SOURCE


253 
	#__USE_LARGEFILE64
 1

	)

256 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

257 
	#__USE_FILE_OFFSET64
 1

	)

260 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


261 
	#__USE_MISC
 1

	)

264 #ifdef 
_BSD_SOURCE


265 
	#__USE_BSD
 1

	)

268 #ifdef 
_SVID_SOURCE


269 
	#__USE_SVID
 1

	)

272 #ifdef 
_ATFILE_SOURCE


273 
	#__USE_ATFILE
 1

	)

276 #ifdef 
_GNU_SOURCE


277 
	#__USE_GNU
 1

	)

280 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


281 
	#__USE_REENTRANT
 1

	)

284 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

285 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

286 #i‡
_FORTIFY_SOURCE
 > 1

287 
	#__USE_FORTIFY_LEVEL
 2

	)

289 
	#__USE_FORTIFY_LEVEL
 1

	)

292 
	#__USE_FORTIFY_LEVEL
 0

	)

296 
	#__STDC_IEC_559__
 1

	)

297 
	#__STDC_IEC_559_COMPLEX__
 1

	)

300 
	#__STDC_ISO_10646__
 200009L

	)

308 #unde‡
__GNU_LIBRARY__


309 
	#__GNU_LIBRARY__
 6

	)

313 
	#__GLIBC__
 2

	)

314 
	#__GLIBC_MINOR__
 7

	)

316 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

317 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

320 #i‡
deföed
 
__GNUC__
 \

321 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

322 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

323 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

324 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

328 #i‚de‡
__ASSEMBLER__


329 #i‚de‡
_SYS_CDEFS_H


330 
	~<sys/cdefs.h
>

335 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


336 
	#__USE_LARGEFILE
 1

	)

337 
	#__USE_LARGEFILE64
 1

	)

343 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

344 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

345 && 
deföed
 
	g__exã∫_ölöe


346 
	#__USE_EXTERN_INLINES
 1

	)

354 
	~<gnu/°ubs.h
>

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

5 #unde‡
NULL


6 #i‡
deföed
(
__˝lu•lus
)

7 
	#NULL
 0

	)

9 
	#NULL
 ((*)0)

	)

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

15 
	stimevÆ
 {

16 
time_t
 
	mtv_£c
;

17 
su£c⁄ds_t
 
	mtv_u£c
;

20 
	stimez⁄e
 {

21 
	mtz_möuãswe°
;

22 
	mtz_d°time
;

26 
	#NFDBITS
 
__NFDBITS


	)

28 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

29 
	#FD_SET
(
fd
,
fd£ç
Ë
	`__FD_SET
(fd,fd£ç)

	)

30 
	#FD_CLR
(
fd
,
fd£ç
Ë
	`__FD_CLR
(fd,fd£ç)

	)

31 
	#FD_ISSET
(
fd
,
fd£ç
Ë
	`__FD_ISSET
(fd,fd£ç)

	)

32 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
(fd£ç)

	)

38 
	#ITIMER_REAL
 0

	)

39 
	#ITIMER_VIRTUAL
 1

	)

40 
	#ITIMER_PROF
 2

	)

42 
	sôimî•ec
 {

43 
time•ec
 
	mô_öãrvÆ
;

44 
time•ec
 
	mô_vÆue
;

47 
	sôimîvÆ
 {

48 
timevÆ
 
	mô_öãrvÆ
;

49 
timevÆ
 
	mô_vÆue
;

55 
	#CLOCK_REALTIME
 0

	)

56 
	#CLOCK_MONOTONIC
 1

	)

57 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

58 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

63 
	#CLOCK_SGI_CYCLE
 10

	)

64 
	#MAX_CLOCKS
 16

	)

65 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

66 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

71 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/time.h

24 #i‚def 
_TIME_H


26 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

27 ! 
deföed
 
	g__√ed_time•ec
)

28 
	#_TIME_H
 1

	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 #ifdef 
_TIME_H


37 
	#__√ed_size_t


	)

38 
	#__√ed_NULL


	)

39 
	~<°ddef.h
>

43 
	~<bôs/time.h
>

46 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


47 #i‚de‡
CLK_TCK


48 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

54 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

55 
	#__˛ock_t_deföed
 1

	)

57 
	~<bôs/ty≥s.h
>

59 
__BEGIN_NAMESPACE_STD


61 
__˛ock_t
 
	t˛ock_t
;

62 
	g__END_NAMESPACE_STD


63 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


64 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

68 #unde‡
__√ed_˛ock_t


70 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

71 
	#__time_t_deföed
 1

	)

73 
	~<bôs/ty≥s.h
>

75 
__BEGIN_NAMESPACE_STD


77 
__time_t
 
	ttime_t
;

78 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


80 
	$__USING_NAMESPACE_STD
(
time_t
)

84 #unde‡
__√ed_time_t


86 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

87 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

88 
	#__˛ockid_t_deföed
 1

	)

90 
	~<bôs/ty≥s.h
>

93 
__˛ockid_t
 
	t˛ockid_t
;

96 #unde‡
__˛ockid_time_t


98 #i‡!
deföed
 
__timî_t_deföed
 && \

99 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

100 
	#__timî_t_deföed
 1

	)

102 
	~<bôs/ty≥s.h
>

105 
__timî_t
 
	ttimî_t
;

108 #unde‡
__√ed_timî_t


111 #i‡!
deföed
 
__time•ec_deföed
 && \

112 ((
deföed
 
_TIME_H
 && \

113 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

114 
deföed
 
__√ed_time•ec
)

115 
	#__time•ec_deföed
 1

	)

117 
	~<bôs/ty≥s.h
>

121 
	stime•ec


123 
__time_t
 
tv_£c
;

124 
tv_n£c
;

128 #unde‡
__√ed_time•ec


131 #ifdef 
_TIME_H


132 
__BEGIN_NAMESPACE_STD


134 
	stm


136 
tm_£c
;

137 
tm_mö
;

138 
tm_hour
;

139 
tm_mday
;

140 
tm_m⁄
;

141 
tm_yór
;

142 
tm_wday
;

143 
tm_yday
;

144 
tm_isd°
;

146 #ifdef 
__USE_BSD


147 
tm_gmtoff
;

148 
__c⁄°
 *
tm_z⁄e
;

150 
__tm_gmtoff
;

151 
__c⁄°
 *
__tm_z⁄e
;

154 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


156 
	$__USING_NAMESPACE_STD
(
tm
)

160 #ifde‡
__USE_POSIX199309


162 
	sôimî•ec


164 
time•ec
 
ô_öãrvÆ
;

165 
time•ec
 
ô_vÆue
;

169 
sigevít
;

173 #ifde‡
__USE_XOPEN2K


174 #i‚de‡
__pid_t_deföed


175 
__pid_t
 
	tpid_t
;

176 
	#__pid_t_deföed


	)

181 
__BEGIN_NAMESPACE_STD


184 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

187 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

190 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

191 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

194 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

200 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

201 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

202 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

203 
__END_NAMESPACE_STD


205 #ifde‡
__USE_XOPEN


208 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

209 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

210 
__THROW
;

213 #ifde‡
__USE_GNU


216 
	~<xloˇÀ.h
>

218 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

219 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

220 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

221 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

224 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

225 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 
__BEGIN_NAMESPACE_STD


232 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

236 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
__END_NAMESPACE_STD


239 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


242 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

243 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

247 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

248 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

251 
__BEGIN_NAMESPACE_STD


254 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

257 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

258 
__END_NAMESPACE_STD


260 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


265 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

266 *
__ª°ri˘
 
__buf
Ë
__THROW
;

269 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

270 *
__ª°ri˘
 
__buf
Ë
__THROW
;

275 *
__tz«me
[2];

276 
__daylight
;

277 
__timez⁄e
;

280 #ifdef 
__USE_POSIX


282 *
tz«me
[2];

286 
	$tz£t
 (Ë
__THROW
;

289 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


290 
daylight
;

291 
timez⁄e
;

294 #ifde‡
__USE_SVID


297 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

303 
	#__i¶óp
(
yór
) \

304 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

307 #ifde‡
__USE_MISC


312 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

315 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

318 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifde‡
__USE_POSIX199309


327 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

328 
time•ec
 *
__ªmaöög
);

332 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

335 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

338 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

339 
__THROW
;

341 #ifde‡
__USE_XOPEN2K


346 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

347 
__c⁄°
 
time•ec
 *
__ªq
,

348 
time•ec
 *
__ªm
);

351 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

356 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

357 
sigevít
 *
__ª°ri˘
 
__evp
,

358 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

361 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

364 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

365 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

366 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

369 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

370 
__THROW
;

373 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

377 #ifde‡
__USE_XOPEN_EXTENDED


389 
gëd©e_îr
;

398 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

401 #ifde‡
__USE_GNU


412 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

413 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

416 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

24 
	#_IOC_SIZEBITS
 14

	)

25 
	#_IOC_DIRBITS
 2

	)

27 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

28 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

29 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

30 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

32 
	#_IOC_NRSHIFT
 0

	)

33 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

34 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

35 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

40 
	#_IOC_NONE
 0U

	)

41 
	#_IOC_WRITE
 1U

	)

42 
	#_IOC_READ
 2U

	)

44 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

45 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

46 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

47 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

48 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

51 
__övÆid_size_¨gumít_f‹_IOC
;

52 
	#_IOC_TYPECHECK
(
t
) \

53 (((
t
) == (t[1]) && \

54 (
t
Ë< (1 << 
_IOC_SIZEBITS
)) ? \

55 (
t
Ë: 
__övÆid_size_¨gumít_f‹_IOC
)

	)

58 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

59 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

60 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

61 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

62 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

63 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

64 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

67 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

68 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

69 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

70 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

74 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

75 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

76 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

77 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

78 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


26 
	#__FD_ZERO
(
s
) \

28 
__i
; \

29 
fd_£t
 *
__¨r
 = (
s
); \

30 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

31 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

32 } 0)

	)

33 
	#__FD_SET
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] |
	`__FDMASK
(d))

	)

34 
	#__FD_CLR
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] &~
	`__FDMASK
(d))

	)

35 
	#__FD_ISSET
(
d
, 
s
Ë((
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] & 
	`__FDMASK
(d)Ë!0)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

312 #i‡
__GNUC_PREREQ
 (4,3)

313 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

314 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

321 #i‡!
__GNUC_PREREQ
 (2,8)

322 
	#__exãnsi⁄__


	)

326 #i‡!
__GNUC_PREREQ
 (2,92)

327 
	#__ª°ri˘


	)

333 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


334 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

336 #ifde‡
__GNUC__


337 
	#__ª°ri˘_¨r


	)

339 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

340 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

343 
	#__ª°ri˘_¨r


	)

348 
	~<bôs/w‹dsize.h
>

350 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


351 
	#__LDBL_COMPAT
 1

	)

352 #ifde‡
__REDIRECT


353 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

354 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

355 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

356 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

357 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

358 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

359 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

360 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

361 
	#__LDBL_REDIR_DECL
(
«me
) \

362 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

363 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

364 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

365 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

366 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

369 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

372 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

373 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

374 
	#__LDBL_REDIR_DECL
(
«me
)

	)

375 #ifde‡
__REDIRECT


376 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

377 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

378 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@
1
.
1
/usr/include
61
1498
osal.h
s3c.h
s3c_camera_driver.c
s3c_camif.c
s3c_camif.h
s3c_camif_fsm.c
s3c_camif_fsm.h
saa7113h.c
saa7113h.h
saa711x_regs.h
tuner-simple.h
videocodec.h
videodev2_s3c.h
/usr/include/asm/page.h
/usr/include/asm/types.h
/usr/include/linux/errno.h
/usr/include/linux/fs.h
/usr/include/linux/i2c.h
/usr/include/linux/kernel.h
/usr/include/linux/major.h
/usr/include/linux/poll.h
/usr/include/linux/sched.h
/usr/include/linux/signal.h
/usr/include/linux/tty.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/linux/video_decoder.h
/usr/include/linux/videodev.h
/usr/include/linux/videodev2.h
/usr/include/linux/wait.h
/usr/include/asm/errno.h
/usr/include/asm/poll.h
/usr/include/asm/siginfo.h
/usr/include/asm/signal.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/sys/time.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/poll.h
/usr/include/asm-generic/siginfo.h
/usr/include/asm-generic/signal.h
/usr/include/asm/ioctl.h
/usr/include/asm/posix_types.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/features.h
/usr/include/linux/stddef.h
/usr/include/linux/time.h
/usr/include/sys/select.h
/usr/include/time.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/ioctl.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs.h
/usr/include/sys/cdefs.h
/usr/include/xlocale.h
/usr/include/gnu/stubs-32.h
